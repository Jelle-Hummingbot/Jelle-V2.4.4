/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "hummingbot/core/cpp/LimitOrder.h",
            "hummingbot/core/cpp/OrderBookEntry.h",
            "hummingbot/core/cpp/PyRef.h"
        ],
        "include_dirs": [
            "./hummingbot/core",
            "./hummingbot/core/data_type"
        ],
        "language": "c++",
        "name": "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making",
        "sources": [
            "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx"
        ]
    },
    "module_name": "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hummingbot__strategy__cross_exchange_market_making__cross_exchange_market_making
#define __PYX_HAVE_API__hummingbot__strategy__cross_exchange_market_making__cross_exchange_market_making
/* Early includes */
#include <stdint.h>
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include "../cpp/LimitOrder.h"
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <set>
#include <vector>
#include "../cpp/OrderBookEntry.h"
#include <unordered_map>
#include <unordered_set>
#include "cpp/PyRef.h"
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx",
  "stringsource",
  "__init__.pxd",
  "hummingbot/core/data_type/limit_order.pxd",
  "hummingbot/core/event/event_listener.pxd",
  "hummingbot/core/pubsub.pxd",
  "hummingbot/core/data_type/order_book_query_result.pxd",
  "type.pxd",
  "hummingbot/core/data_type/order_book.pxd",
  "hummingbot/core/clock.pxd",
  "hummingbot/core/time_iterator.pxd",
  "hummingbot/strategy/order_tracker.pxd",
  "hummingbot/strategy/cross_exchange_market_making/order_id_market_pair_tracker.pxd",
  "hummingbot/core/event/event_reporter.pxd",
  "hummingbot/core/event/event_logger.pxd",
  "hummingbot/core/network_iterator.pxd",
  "hummingbot/connector/connector_base.pxd",
  "hummingbot/connector/exchange_base.pxd",
};

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder;
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener;
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook;
struct __pyx_obj_10hummingbot_4core_5clock_Clock;
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator;
struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase;
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker;
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter;
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger;
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator;
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase;
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase;
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy;
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples;
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr;
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr;

/* "hummingbot/core/pubsub.pxd":10
 * from hummingbot.core.event.event_listener cimport EventListener
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 */
typedef std::unordered_set<PyRef>  __pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection;

/* "hummingbot/core/pubsub.pxd":11
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 */
typedef std::unordered_set<PyRef> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventListenersIterator;

/* "hummingbot/core/pubsub.pxd":12
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_Events;

/* "hummingbot/core/pubsub.pxd":13
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 * 
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventsIterator;

/* "hummingbot/core/pubsub.pxd":14
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_EventsPair;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market;
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market;

/* "hummingbot/strategy/strategy_base.pxd":45
 *     cdef c_did_complete_sell_order_tracker(self, object order_completed_event)
 * 
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,             # <<<<<<<<<<<<<<
 *                                         object price = *, double expiration_seconds = *, position_action = *)
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,
 */
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  double expiration_seconds;
  PyObject *position_action;
};

/* "hummingbot/strategy/strategy_base.pxd":47
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,
 *                                         object price = *, double expiration_seconds = *, position_action = *)
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,             # <<<<<<<<<<<<<<
 *                                          object price = *, double expiration_seconds = *, position_action = *, )
 *     cdef c_cancel_order(self, object market_pair, str order_id)
 */
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  double expiration_seconds;
  PyObject *position_action;
};
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount;

/* "hummingbot/connector/connector_base.pxd":20
 *         public object _trade_volume_metric_collector
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":21
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":30
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size)
 *     cdef object c_quantize_order_price(self, str trading_pair, object price)
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_get_fee;

/* "hummingbot/connector/exchange_base.pxd":15
 *         object _budget_checker
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange_base.pxd":16
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange_base.pxd":27
 *     cdef ClientOrderBookQueryResult c_get_price_for_quote_volume(self, str trading_pair, bint is_buy, double volume)
 *     cdef ClientOrderBookQueryResult c_get_price_for_volume(self, str trading_pair, bint is_buy, object volume)
 *     cdef object c_get_fee(self, str base_currency, str quote_currency, object order_type, object order_side,             # <<<<<<<<<<<<<<
 *                           object amount, object price, object is_maker=*)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_get_fee {
  int __pyx_n;
  PyObject *is_maker;
};

/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_vtab;
  LimitOrder _cpp_limit_order;
};


/* "hummingbot/core/event/event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtab;
  PyObject *__weakref__;
  int64_t _current_event_tag;
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *_current_event_caller;
};


/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtab;
  __pyx_t_10hummingbot_4core_6pubsub_Events _events;
  PyObject *__weakref__;
};


/* "order_book_query_result.pxd":3
 * # distutils: language=c++
 * 
 * cdef class OrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult {
  PyObject_HEAD
  double query_price;
  double query_volume;
  double result_price;
  double result_volume;
};


/* "order_book_query_result.pxd":11
 * 
 * 
 * cdef class ClientOrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult {
  PyObject_HEAD
  PyObject *query_price;
  PyObject *query_volume;
  PyObject *result_price;
  PyObject *result_volume;
};


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  std::set<OrderBookEntry>  _bid_book;
  std::set<OrderBookEntry>  _ask_book;
  int64_t _snapshot_uid;
  int64_t _last_diff_uid;
  double _best_bid;
  double _best_ask;
  double _last_trade_price;
  double _last_applied_trade;
  double _last_trade_price_rest_updated;
  int _dex;
};


/* "hummingbot/core/clock.pxd":3
 * # distutils: language=c++
 * 
 * cdef class Clock:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _clock_mode
 */
struct __pyx_obj_10hummingbot_4core_5clock_Clock {
  PyObject_HEAD
  PyObject *_clock_mode;
  double _tick_size;
  double _start_time;
  double _end_time;
  PyObject *_child_iterators;
  PyObject *_current_context;
  double _current_tick;
  int _started;
};


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  double _current_timestamp;
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *_clock;
};


/* "order_tracker.pxd":7
 * 
 * 
 * cdef class OrderTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tracked_limit_orders
 */
struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_tracked_limit_orders;
  PyObject *_tracked_market_orders;
  PyObject *_order_id_to_market_pair;
  PyObject *_shadow_tracked_limit_orders;
  PyObject *_shadow_order_id_to_market_pair;
  PyObject *_shadow_gc_requests;
  PyObject *_in_flight_cancels;
  PyObject *_in_flight_pending_created;
};


/* "hummingbot/strategy/strategy_base.pxd":8
 * from .order_tracker cimport OrderTracker
 * 
 * cdef class StrategyBase(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         set _sb_markets
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_sb_markets;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_buy_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_sell_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_fill_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_fail_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_cancel_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_expire_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_buy_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_sell_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_funding_payment_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_range_position_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_remove_range_position_order_listener;
  int _sb_delegate_lock;
  struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *_sb_order_tracker;
};


/* "order_id_market_pair_tracker.pxd":4
 * 
 * 
 * cdef class OrderIDMarketPairTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_id_to_tracking_item
 */
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_order_id_to_tracking_item;
  float _expiry_timeout;
};


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *event_source;
};


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *_event_source;
  PyObject *_logged_events;
  PyObject *_generic_logged_events;
  PyObject *_order_filled_logged_events;
  PyObject *_waiting;
  PyObject *_wait_returns;
};


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_network_status;
  double _last_connected_timestamp;
  double _check_network_interval;
  double _check_network_timeout;
  double _network_error_wait_time;
  PyObject *_check_network_task;
};


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter *_event_reporter;
  struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger *_event_logger;
  int _trading_required;
  PyObject *_account_available_balances;
  PyObject *_account_balances;
  int _real_time_balance_update;
  PyObject *_in_flight_orders_snapshot;
  double _in_flight_orders_snapshot_timestamp;
  PyObject *_current_trade_fills;
  PyObject *_exchange_order_ids;
  PyObject *_trade_fee_schema;
  PyObject *_trade_volume_metric_collector;
};


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  PyObject *_order_book_tracker;
  PyObject *_budget_checker;
};


/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pxd":9
 * from .order_id_market_pair_tracker cimport OrderIDMarketPairTracker
 * 
 * cdef class CrossExchangeMarketMakingStrategy(StrategyBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         set _maker_markets
 */
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_base;
  PyObject *_maker_markets;
  PyObject *_taker_markets;
  int _all_markets_ready;
  int _active_order_canceling;
  int _adjust_orders_enabled;
  PyObject *_anti_hysteresis_timers;
  PyObject *_min_profitability;
  PyObject *_third_market;
  PyObject *_order_size_taker_volume_factor;
  PyObject *_balance_fix_maker;
  PyObject *_order_size_taker_balance_factor;
  PyObject *_order_size_portfolio_ratio_limit;
  PyObject *_order_size_maker_balance_factor;
  PyObject *_triangular_switch;
  PyObject *_order_amount;
  PyObject *_target_base_balance;
  PyObject *_maker_order_update;
  PyObject *_top_maker_cancel_seconds;
  PyObject *_top_maker_cancel_timer;
  PyObject *_slippage_buffer_fix;
  PyObject *_waiting_time;
  PyObject *_fix_counter;
  int _keep_target_balance;
  int _filled_order_delay;
  PyObject *_filled_order_delay_seconds;
  PyObject *_filled_order_delay_timer;
  PyObject *_cancel_order_threshold;
  PyObject *_triangular_arbitrage;
  PyObject *_top_depth_tolerance;
  PyObject *_top_depth_tolerance_taker;
  double _anti_hysteresis_duration;
  double _status_report_interval;
  double _last_timestamp;
  PyObject *_cancel_timer;
  double _limit_order_min_expiration;
  PyObject *_counter;
  PyObject *_restore_timer;
  int _cancel_order_timer;
  PyObject *_cancel_order_timer_seconds;
  PyObject *_order_fill_buy_events;
  PyObject *_order_fill_sell_events;
  PyObject *_suggested_price_samples;
  PyObject *_market_pairs;
  int64_t _logging_options;
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *_market_pair_tracker;
  int _use_oracle_conversion_rate;
  PyObject *_taker_to_maker_base_conversion_rate;
  PyObject *_taker_to_maker_quote_conversion_rate;
  PyObject *_slippage_buffer;
  PyObject *_min_order_amount;
  int _hb_app_notification;
  PyObject *_maker_order_ids;
  double _last_conv_rates_logged;
};


/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1635
 *                 ask_price_samples_deque.popleft()
 * 
 *     cdef tuple c_get_top_bid_ask_from_price_samples(self,             # <<<<<<<<<<<<<<
 *                                                     object market_pair):
 *         """
 */
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples {
  PyObject_HEAD
  PyObject *__pyx_v_ask_price_samples;
  PyObject *__pyx_v_bid_price_samples;
};


/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1648
 *         bid_price_samples, ask_price_samples = self.c_get_suggested_price_samples(market_pair)
 * 
 *         if not any(Decimal.is_nan(p) for p in bid_price_samples) and not Decimal.is_nan(current_top_bid_price):             # <<<<<<<<<<<<<<
 *             top_bid_price = max(list(bid_price_samples) + [current_top_bid_price])
 *         else:
 */
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *__pyx_outer_scope;
  PyObject *__pyx_v_p;
};


/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1653
 *             top_bid_price = current_top_bid_price
 * 
 *         if not any(Decimal.is_nan(p) for p in ask_price_samples) and not Decimal.is_nan(current_top_ask_price):             # <<<<<<<<<<<<<<
 *             top_ask_price = min(list(ask_price_samples) + [current_top_ask_price])
 *         else:
 */
struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *__pyx_outer_scope;
  PyObject *__pyx_v_p;
};



/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  PY_LONG_LONG (*c_age)(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *);
  PY_LONG_LONG (*c_age_til)(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *, PY_LONG_LONG);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder;


/* "hummingbot/core/event/event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject *(*c_set_event_info)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, int64_t, struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *);
  PyObject *(*c_call)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;


/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */

struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub {
  PyObject *(*c_log_exception)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
  PyObject *(*c_add_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_dead_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_get_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_trigger_event)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub;


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_apply_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_trade)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyObject *);
  PyObject *(*c_apply_numpy_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  PyObject *(*c_apply_numpy_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  double (*c_get_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_quote_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook;


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */

struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_start)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double);
  PyObject *(*c_stop)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *);
  PyObject *(*c_tick)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;


/* "order_tracker.pxd":7
 * 
 * 
 * cdef class OrderTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tracked_limit_orders
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_get_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_get_market_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_get_shadow_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  int (*c_has_in_flight_cancel)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  int (*c_check_and_track_cancel)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_get_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_get_shadow_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*c_get_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_get_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*c_get_shadow_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *, int, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_stop_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_check_and_cleanup_shadow_records)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_add_create_order_pending)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_remove_create_order_pending)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *__pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker;


/* "hummingbot/strategy/strategy_base.pxd":8
 * from .order_tracker cimport OrderTracker
 * 
 * cdef class StrategyBase(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         set _sb_markets
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_add_markets)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_remove_markets)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_buy_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_sell_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fill_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fail_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_cancel_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_expire_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_buy_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_sell_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_funding_payment)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_range_position_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_remove_range_position_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fail_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_cancel_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_expire_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_buy_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_sell_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_buy_with_specific_market)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market *__pyx_optional_args);
  PyObject *(*c_sell_with_specific_market)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market *__pyx_optional_args);
  PyObject *(*c_cancel_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_stop_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_track_restored_orders)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_sum_flat_fees)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase;


/* "order_id_market_pair_tracker.pxd":4
 * 
 * 
 * cdef class OrderIDMarketPairTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_id_to_tracking_item
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_get_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *, PyObject *);
  PyObject *(*c_get_exchange_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *, PyObject *);
  PyObject *(*c_start_tracking_order_id)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *, PyObject *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order_id)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *, PyObject *);
  PyObject *(*c_check_and_expire_tracking_items)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *__pyx_vtabptr_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker;


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter *__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter;


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger *__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger;


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */

struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator *__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator;


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */

struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  PyObject *(*c_buy)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args);
  PyObject *(*c_sell)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args);
  PyObject *(*c_cancel)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_available_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, int);
  PyObject *(*c_get_order_price_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_get_order_size_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_amount)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase;


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */

struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*c_get_order_book)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_price_for_quote_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  PyObject *(*c_get_fee)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_get_fee *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;


/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":40
 * 
 * 
 * cdef class CrossExchangeMarketMakingStrategy(StrategyBase):             # <<<<<<<<<<<<<<
 *     OPTION_LOG_NULL_ORDER_SIZE = 1 << 0
 *     OPTION_LOG_REMOVING_ORDER = 1 << 1
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_base;
  PyObject *(*c_process_market_pair)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, PyObject *);
  PyObject *(*c_check_and_hedge_orders)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_get_order_size_after_portfolio_ratio_limit)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_get_adjusted_limit_order_size)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_get_market_making_size)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int);
  PyObject *(*c_get_market_making_price)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int, PyObject *);
  PyObject *(*c_calculate_effective_hedging_price)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int, PyObject *);
  int (*c_check_if_still_profitable)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *, PyObject *);
  int (*c_check_if_sufficient_balance)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *);
  int (*c_check_if_price_has_drifted)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *);
  PyObject *(*c_get_top_bid_ask)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_get_top_bid_ask_from_price_samples)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_get_suggested_price_samples)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_take_suggested_price_sample)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_balance_fix_fix)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_check_and_create_new_orders)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int, int);
  PyObject *(*c_cancel_all_maker_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_place_top_maker)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_cancel_all_taker_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_balance_fix_check)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *);
  PyObject *(*c_check_available_balance)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, PyObject *);
  PyObject *(*c_place_fixing_order)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, PyObject *, PyObject *);
  PyObject *(*c_place_order)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int, PyObject *, int, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_vtabptr_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_start(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_tick(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_balance_fix_check(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_available_balance(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_fixing_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_is_maker, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_all_maker_limit_orders(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_all_taker_limit_orders(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_balance_fix_fix(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_process_market_pair(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_active_orders); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_fill_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_filled_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_complete_buy_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_complete_sell_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event); /* proto*/
static int __pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_price_has_drifted(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_and_hedge_orders(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_adjusted_limit_order_size(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_order_size_after_portfolio_ratio_limit(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_market_making_size(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_market_making_price(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid, PyObject *__pyx_v_size); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_calculate_effective_hedging_price(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid, PyObject *__pyx_v_size); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_suggested_price_samples(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_top_bid_ask(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_take_suggested_price_sample(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_top_bid_ask_from_price_samples(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static int __pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_still_profitable(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order, PyObject *__pyx_v_current_hedging_price); /* proto*/
static int __pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_sufficient_balance(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_top_maker(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_and_create_new_orders(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_has_active_bid, int __pyx_v_has_active_ask); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_buy, PyObject *__pyx_v_market, int __pyx_v_record_maker, PyObject *__pyx_v_amount, PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_stop_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_stop_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_create_buy_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_created_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_create_sell_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_created_event); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'hummingbot.core.data_type.LimitOrder' */

/* Module declarations from 'hummingbot.core.data_type.limit_order' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = 0;

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'hummingbot.core.data_type.OrderBookEntry' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'hummingbot.core.PyRef' */

/* Module declarations from 'hummingbot.core.event.event_listener' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = 0;

/* Module declarations from 'hummingbot.core.pubsub' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub = 0;

/* Module declarations from 'hummingbot.core.data_type.order_book_query_result' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'hummingbot.core.data_type.order_book' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = 0;

/* Module declarations from 'hummingbot.core.clock' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock = 0;

/* Module declarations from 'hummingbot.core.time_iterator' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = 0;

/* Module declarations from 'hummingbot.strategy.order_tracker' */
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker = 0;

/* Module declarations from 'hummingbot.strategy.strategy_base' */
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = 0;

/* Module declarations from 'hummingbot.strategy.cross_exchange_market_making.order_id_market_pair_tracker' */
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker = 0;

/* Module declarations from 'hummingbot.core.event.event_reporter' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = 0;

/* Module declarations from 'hummingbot.core.event.event_logger' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = 0;

/* Module declarations from 'hummingbot.core.network_iterator' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = 0;

/* Module declarations from 'hummingbot.connector.connector_base' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = 0;

/* Module declarations from 'hummingbot.connector.exchange_base' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = 0;

/* Module declarations from 'hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making' */
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr = 0;
#define __Pyx_MODULE_NAME "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making"
extern int __pyx_module_is_main_hummingbot__strategy__cross_exchange_market_making__cross_exchange_market_making;
int __pyx_module_is_main_hummingbot__strategy__cross_exchange_market_making__cross_exchange_market_making = 0;

/* Implementation of 'hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_ZeroDivisionError;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_1[] = "1";
static const char __pyx_k_8g[] = ".8g";
static const char __pyx_k_AF[] = " AF ";
static const char __pyx_k_OP[] = ", OP ";
static const char __pyx_k_RA[] = " RA:";
static const char __pyx_k_TT[] = " TT: ";
static const char __pyx_k_at[] = " at ";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_0_0[] = "0.0";
static const char __pyx_k_10f[] = ".10f";
static const char __pyx_k_10g[] = ".10g";
static const char __pyx_k_BUY[] = "BUY";
static const char __pyx_k_NaN[] = "NaN";
static const char __pyx_k__18[] = "-";
static const char __pyx_k__19[] = " (";
static const char __pyx_k__20[] = "";
static const char __pyx_k__21[] = "\n";
static const char __pyx_k__22[] = "    ";
static const char __pyx_k__23[] = " ";
static const char __pyx_k__24[] = "(";
static const char __pyx_k__25[] = " @ ";
static const char __pyx_k__26[] = ")";
static const char __pyx_k__27[] = " .";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_ask[] = "ask";
static const char __pyx_k_bid[] = "bid";
static const char __pyx_k_for[] = " for (";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_0_05[] = "0.05";
static const char __pyx_k_AF_2[] = " AF: ";
static const char __pyx_k_Diff[] = ", Diff: ";
static const char __pyx_k_INFO[] = "INFO";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_OP_2[] = " OP: ";
static const char __pyx_k_Pair[] = "Pair";
static const char __pyx_k_Rate[] = "Rate";
static const char __pyx_k_TT_2[] = " TT ";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_ceil[] = "ceil";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_rate[] = "rate";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_0_925[] = "0.925";
static const char __pyx_k_DEBUG[] = "DEBUG";
static const char __pyx_k_ERROR[] = "ERROR";
static const char __pyx_k_LIMIT[] = "LIMIT";
static const char __pyx_k_Limit[] = ") Limit ";
static const char __pyx_k_Max_P[] = ", Max P. ";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_Value[] = "Value";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_fixed[] = "fixed";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_isnan[] = "isnan";
static const char __pyx_k_maker[] = "maker";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_ready[] = "ready";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_taker[] = "taker";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_0_1667[] = "0.1667";
static const char __pyx_k_Assets[] = "  Assets:";
static const char __pyx_k_MARKET[] = "MARKET";
static const char __pyx_k_Source[] = "Source";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_filled[] = " filled.";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_bid[] = "is_bid";
static const char __pyx_k_is_buy[] = "is_buy";
static const char __pyx_k_is_nan[] = "is_nan";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_market[] = "market";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_to_buy[] = " to buy ";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_Markets[] = "  Markets:";
static const char __pyx_k_Max_P_2[] = ", Max. P. ";
static const char __pyx_k_Max_P_3[] = " Max P. ";
static const char __pyx_k_WARNING[] = "WARNING";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_counter[] = "counter";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_popleft[] = "popleft";
static const char __pyx_k_seconds[] = " seconds";
static const char __pyx_k_to_sell[] = ", to sell ";
static const char __pyx_k_top_ask[] = ", top_ask ";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_Optional[] = "Optional";
static const char __pyx_k_WARNINGS[] = "  *** WARNINGS ***";
static const char __pyx_k_exc_info[] = "exc_info";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_order_at[] = " order at ";
static const char __pyx_k_order_id[] = "order_id";
static const char __pyx_k_quantity[] = "quantity";
static const char __pyx_k_s_logger[] = "s_logger";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_CONNECTED[] = "CONNECTED";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_OrderType[] = "OrderType";
static const char __pyx_k_TradeType[] = "TradeType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_actual_is[] = " actual is: ";
static const char __pyx_k_buy_maker[] = "buy_maker";
static const char __pyx_k_buy_taker[] = "buy_taker";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_is_filled[] = " is filled.";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_taker_top[] = ", taker top=";
static const char __pyx_k_to_pandas[] = "to_pandas";
static const char __pyx_k_to_sell_2[] = " to sell ";
static const char __pyx_k_LimitOrder[] = "LimitOrder";
static const char __pyx_k_RateOracle[] = "RateOracle";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_base_asset[] = "base_asset";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_sell_maker[] = "sell_maker";
static const char __pyx_k_sell_taker[] = "sell_taker";
static const char __pyx_k_trade_type[] = "trade_type";
static const char __pyx_k_user_order[] = " user order: ";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_M_Buy_Min_P[] = "M. Buy  Min P.";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_defaultdict[] = "defaultdict";
static const char __pyx_k_fix_counter[] = "fix_counter";
static const char __pyx_k_market_pair[] = "market_pair";
static const char __pyx_k_quote_asset[] = "quote_asset";
static const char __pyx_k_smart_round[] = "smart_round";
static const char __pyx_k_Base_Balance[] = " Base Balance: ";
static const char __pyx_k_ExchangeBase[] = "ExchangeBase";
static const char __pyx_k_M_Sell_Min_P[] = "M. Sell Min P.";
static const char __pyx_k_StrategyBase[] = "StrategyBase";
static const char __pyx_k_Timer_passed[] = "Timer passed ";
static const char __pyx_k_active_order[] = "active_order";
static const char __pyx_k_get_instance[] = "get_instance";
static const char __pyx_k_intersection[] = "intersection";
static const char __pyx_k_market_pairs[] = "market_pairs";
static const char __pyx_k_order_amount[] = "order_amount";
static const char __pyx_k_third_market[] = "third_market";
static const char __pyx_k_trading_pair[] = "trading_pair";
static const char __pyx_k_waiting_time[] = "waiting_time";
static const char __pyx_k_Active_orders[] = "  Active orders:";
static const char __pyx_k_M_Buy_Min_P_2[] = "M. Buy Min P. ";
static const char __pyx_k_NetworkStatus[] = "NetworkStatus";
static const char __pyx_k_Rate_adjusted[] = " (Rate adjusted: ";
static const char __pyx_k_Total_Balance[] = "Total Balance: ";
static const char __pyx_k_balance_fixes[] = " balance fixes";
static const char __pyx_k_base_currency[] = "base_currency";
static const char __pyx_k_get_mid_price[] = "get_mid_price";
static const char __pyx_k_notify_hb_app[] = "notify_hb_app";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_restore_timer[] = "restore_timer";
static const char __pyx_k_s_decimal_nan[] = "s_decimal_nan";
static const char __pyx_k_M_Sell_Min_P_2[] = "M. Sell Min P. ";
static const char __pyx_k_OPTION_LOG_ALL[] = "OPTION_LOG_ALL";
static const char __pyx_k_Target_Balance[] = ", Target Balance: ";
static const char __pyx_k_log_with_clock[] = "log_with_clock";
static const char __pyx_k_network_status[] = "network_status";
static const char __pyx_k_quote_currency[] = "quote_currency";
static const char __pyx_k_s_decimal_zero[] = "s_decimal_zero";
static const char __pyx_k_Maker_BUY_order[] = "Maker BUY order (";
static const char __pyx_k_Maker_buy_order[] = ") Maker buy order ";
static const char __pyx_k_Order_size_base[] = " Order_size base: ";
static const char __pyx_k_Rate_conversion[] = "  Rate conversion:";
static const char __pyx_k_Taker_buy_order[] = ") Taker buy order ";
static const char __pyx_k_a_Quote_rate_of[] = ") & a Quote rate of ";
static const char __pyx_k_balance_warning[] = "balance_warning";
static const char __pyx_k_buy_maker_taker[] = "buy_maker_taker";
static const char __pyx_k_client_order_id[] = "client_order_id";
static const char __pyx_k_conversion_rate[] = ") conversion rate: ";
static const char __pyx_k_logging_options[] = "logging_options";
static const char __pyx_k_network_warning[] = "network_warning";
static const char __pyx_k_order_size_base[] = " order size base: ";
static const char __pyx_k_pref_min_acutal[] = " pref_min_acutal ";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_slippage_buffer[] = "slippage_buffer";
static const char __pyx_k_Maker_sell_order[] = ") Maker sell order ";
static const char __pyx_k_Order_size_limit[] = ") Order size limit (";
static const char __pyx_k_Taker_sell_order[] = ") Taker sell order ";
static const char __pyx_k_Unexpected_error[] = "Unexpected error.";
static const char __pyx_k_min_order_amount[] = "min_order_amount";
static const char __pyx_k_oracle_status_df[] = "oracle_status_df";
static const char __pyx_k_sell_maker_taker[] = "sell_maker_taker";
static const char __pyx_k_Maker_Taker_Taker[] = " (Maker - Taker / Taker)).";
static const char __pyx_k_Taker_Maker_Taker[] = " (Taker - Maker / Taker)).";
static const char __pyx_k_Taker_buy_order_2[] = "Taker buy order ";
static const char __pyx_k_ZeroDivisionError[] = "ZeroDivisionError";
static const char __pyx_k_a_Quote_rate_of_2[] = ") & a Quote rate of (";
static const char __pyx_k_balance_fix_maker[] = "balance_fix_maker";
static const char __pyx_k_base_asset_amount[] = "base_asset_amount";
static const char __pyx_k_min_profitability[] = "min_profitability";
static const char __pyx_k_triangular_switch[] = "triangular_switch";
static const char __pyx_k_Maker_buy_order_of[] = ") Maker buy order of ";
static const char __pyx_k_Maker_sell_order_2[] = "Maker sell order (";
static const char __pyx_k_PerformanceMetrics[] = "PerformanceMetrics";
static const char __pyx_k_Taker_sell_order_2[] = "Taker sell order ";
static const char __pyx_k_Total_Base_Balance[] = " Total Base Balance: ";
static const char __pyx_k_cancel_order_timer[] = "cancel_order_timer";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_filled_order_delay[] = "filled_order_delay";
static const char __pyx_k_maker_order_update[] = "maker_order_update";
static const char __pyx_k_Balance_fix_counter[] = "  Balance fix counter:";
static const char __pyx_k_Maker_Quote_balance[] = ". Maker Quote balance: ";
static const char __pyx_k_Maker_sell_order_of[] = ") Maker sell order of ";
static const char __pyx_k_Order_size_in_quote[] = " Order size in quote: ";
static const char __pyx_k_Taker_Quote_balance[] = ", Taker Quote balance:";
static const char __pyx_k_active_limit_orders[] = "active_limit_orders";
static const char __pyx_k_hb_app_notification[] = "hb_app_notification";
static const char __pyx_k_keep_target_balance[] = "keep_target_balance";
static const char __pyx_k_shadow_limit_orders[] = "shadow_limit_orders";
static const char __pyx_k_slippage_buffer_fix[] = "slippage_buffer_fix";
static const char __pyx_k_target_base_balance[] = "target_base_balance";
static const char __pyx_k_top_depth_tolerance[] = "top_depth_tolerance";
static const char __pyx_k_Min_profitability_is[] = ").(Min_profitability is: ";
static const char __pyx_k_adjust_order_enabled[] = "adjust_order_enabled";
static const char __pyx_k_and_a_Taker_price_of[] = ") and a Taker_price of (";
static const char __pyx_k_hedge_order_quantity[] = "hedge order quantity ";
static const char __pyx_k_log_conversion_rates[] = "log_conversion_rates";
static const char __pyx_k_quantize_order_price[] = "quantize_order_price";
static const char __pyx_k_triangular_arbitrage[] = "triangular_arbitrage";
static const char __pyx_k_Current_hedging_price[] = ". Current hedging price: ";
static const char __pyx_k_Max_size_of_the_order[] = "), Max size of the order: (";
static const char __pyx_k_current_hedging_price[] = "current_hedging_price";
static const char __pyx_k_fix_counter_is_now_at[] = "(fix_counter is now at: ";
static const char __pyx_k_fix_counter_status_df[] = "fix_counter_status_df";
static const char __pyx_k_suggested_order_price[] = ", suggested order price=";
static const char __pyx_k_CANCEL_EXPIRY_DURATION[] = "CANCEL_EXPIRY_DURATION";
static const char __pyx_k_No_active_maker_orders[] = "  No active maker orders.";
static const char __pyx_k_Price_for_quote_volume[] = ") Price for quote volume ";
static const char __pyx_k_active_order_canceling[] = "active_order_canceling";
static const char __pyx_k_cancel_order_threshold[] = "cancel_order_threshold";
static const char __pyx_k_has_active_taker_order[] = "has_active_taker_order";
static const char __pyx_k_hedge_order_quantity_2[] = " hedge order quantity ";
static const char __pyx_k_market_conversion_rate[] = "market_conversion_rate";
static const char __pyx_k_price_for_quote_volume[] = ") price for quote volume ";
static const char __pyx_k_status_report_interval[] = "status_report_interval";
static const char __pyx_k_taker_balance_in_quote[] = ", taker balance in quote: ";
static const char __pyx_k_top_maker_cancel_timer[] = "top_maker_cancel_timer";
static const char __pyx_k_CrossExchangeMarketPair[] = "CrossExchangeMarketPair";
static const char __pyx_k_Current_buy_order_price[] = "Current buy order price=";
static const char __pyx_k_OPTION_LOG_ADJUST_ORDER[] = "OPTION_LOG_ADJUST_ORDER";
static const char __pyx_k_OPTION_LOG_CREATE_ORDER[] = "OPTION_LOG_CREATE_ORDER";
static const char __pyx_k_active_limit_orders_all[] = "active_limit_orders_all";
static const char __pyx_k_effective_hedging_price[] = ", effective hedging price ";
static const char __pyx_k_Current_sell_order_price[] = "Current sell order price=";
static const char __pyx_k_OPTION_LOG_STATUS_REPORT[] = "OPTION_LOG_STATUS_REPORT";
static const char __pyx_k_OrderIDMarketPairTracker[] = "OrderIDMarketPairTracker";
static const char __pyx_k_anti_hysteresis_duration[] = "anti_hysteresis_duration";
static const char __pyx_k_is_placed_as_last_option[] = " is placed as last option";
static const char __pyx_k_market_status_data_frame[] = "market_status_data_frame";
static const char __pyx_k_timer_over_cancelled_all[] = "timer over, cancelled all";
static const char __pyx_k_top_maker_cancel_seconds[] = "top_maker_cancel_seconds";
static const char __pyx_k_Maker_enough_base_balance[] = "Maker enough base balance ";
static const char __pyx_k_OPTION_LOG_REMOVING_ORDER[] = "OPTION_LOG_REMOVING_ORDER";
static const char __pyx_k_Taker_enough_base_balance[] = "Taker enough base balance ";
static const char __pyx_k_We_will_place_a_third_leg[] = "We will place a third leg";
static const char __pyx_k_top_depth_tolerance_taker[] = "top_depth_tolerance_taker";
static const char __pyx_k_wallet_balance_data_frame[] = "wallet_balance_data_frame";
static const char __pyx_k_Maker_enough_quote_balance[] = "Maker enough quote balance ";
static const char __pyx_k_OPTION_LOG_NULL_ORDER_SIZE[] = "OPTION_LOG_NULL_ORDER_SIZE";
static const char __pyx_k_ORDER_ADJUST_SAMPLE_WINDOW[] = "ORDER_ADJUST_SAMPLE_WINDOW";
static const char __pyx_k_Taker_enough_quote_balance[] = "Taker enough quote balance ";
static const char __pyx_k_cancel_order_timer_seconds[] = "cancel_order_timer_seconds";
static const char __pyx_k_cross_exchange_market_pair[] = "cross_exchange_market_pair";
static const char __pyx_k_filled_order_delay_seconds[] = "filled_order_delay_seconds";
static const char __pyx_k_has_been_completely_filled[] = ") has been completely filled.";
static const char __pyx_k_limit_order_min_expiration[] = "limit_order_min_expiration";
static const char __pyx_k_use_oracle_conversion_rate[] = "use_oracle_conversion_rate";
static const char __pyx_k_Hedged_maker_buy_order_s_of[] = ") Hedged maker buy order(s) of ";
static const char __pyx_k_Creating_limit_ask_order_for[] = ") Creating limit ask order for ";
static const char __pyx_k_Creating_limit_bid_order_for[] = ") Creating limit bid order for ";
static const char __pyx_k_Hedged_maker_sell_order_s_of[] = ") Hedged maker sell order(s) of ";
static const char __pyx_k_ORDER_ADJUST_SAMPLE_INTERVAL[] = "ORDER_ADJUST_SAMPLE_INTERVAL";
static const char __pyx_k_has_been_completely_filled_2[] = " has been completely filled.";
static const char __pyx_k_hummingbot_core_event_events[] = "hummingbot.core.event.events";
static const char __pyx_k_notify_hb_app_with_timestamp[] = "notify_hb_app_with_timestamp";
static const char __pyx_k_order_id_market_pair_tracker[] = "order_id_market_pair_tracker";
static const char __pyx_k_self__top_maker_cancel_timer[] = " self._top_maker_cancel_timer";
static const char __pyx_k_will_place_a_maker_buy_order[] = ", will place a maker buy order";
static const char __pyx_k_will_place_a_taker_buy_order[] = ", will place a taker buy order";
static const char __pyx_k_OPTION_LOG_MAKER_ORDER_FILLED[] = "OPTION_LOG_MAKER_ORDER_FILLED";
static const char __pyx_k_OPTION_LOG_MAKER_ORDER_HEDGED[] = "OPTION_LOG_MAKER_ORDER_HEDGED";
static const char __pyx_k_hummingbot_client_performance[] = "hummingbot.client.performance";
static const char __pyx_k_too_many_orders_cancelled_all[] = "too many orders, cancelled all ";
static const char __pyx_k_will_place_a_Maker_sell_order[] = ", will place a Maker sell order";
static const char __pyx_k_will_place_a_taker_sell_order[] = ", will place a taker sell order";
static const char __pyx_k_Current_maker_sell_fill_amount[] = ") Current maker sell fill amount of ";
static const char __pyx_k_buy_fixing_maker_order_top_bid[] = "buy fixing maker order top bid ";
static const char __pyx_k_is_less_than_the_minimum_order[] = " is less than the minimum order amount allowed on the taker market. No hedging possible yet.";
static const char __pyx_k_market_pairs_must_not_be_empty[] = "market_pairs must not be empty.";
static const char __pyx_k_order_size_taker_volume_factor[] = "order_size_taker_volume_factor";
static const char __pyx_k_seconds_current_value_of_Timer[] = " seconds, current value of Timer: ";
static const char __pyx_k_self__top_maker_cancel_seconds[] = " self._top_maker_cancel_seconds";
static const char __pyx_k_Attempting_to_place_a_limit_ask[] = ") Attempting to place a limit ask but the ask size is 0. Skipping. Check available balance.";
static const char __pyx_k_Attempting_to_place_a_limit_bid[] = ") Attempting to place a limit bid but the bid size is 0. Skipping. Check available balance.";
static const char __pyx_k_Current_maker_buy_fill_amount_o[] = ") Current maker buy fill amount of ";
static const char __pyx_k_Going_to_adjust_the_order_Taker[] = "). Going to adjust the order. Taker_balance calculation ";
static const char __pyx_k_Going_to_cancel_the_old_order_a[] = ". Going to cancel the old order and create a new one...";
static const char __pyx_k_Just_canceled_all_orders_to_res[] = "(Just canceled all orders to restore balance";
static const char __pyx_k_Markets_are_not_ready_No_market[] = "Markets are not ready. No market making trades are permitted.";
static const char __pyx_k_Max_size_based_on_taker_balance[] = "), Max size based on taker balance:(";
static const char __pyx_k_Not_enough_base_balance_to_sell[] = "Not enough base balance to sell. order size: ";
static const char __pyx_k_Not_enough_quote_balance_to_buy[] = "Not enough quote balance to buy Order size: ";
static const char __pyx_k_Order_book_on_taker_is_too_thin[] = ")Order book on taker is too thin to place order for size: ";
static const char __pyx_k_Order_size_taker_balance_factor[] = ", Order size taker balance factor";
static const char __pyx_k_Taking_into_account_a_Base_rate[] = ") Taking into account a Base_rate of (";
static const char __pyx_k_The_current_limit_ask_order_for[] = ") The current limit ask order for ";
static const char __pyx_k_The_current_limit_bid_order_for[] = ") The current limit bid order for ";
static const char __pyx_k_does_not_correspond_to_any_whit[] = "' does not correspond to any whitelisted trading pairs. Skipping.";
static const char __pyx_k_hummingbot_core_data_type_limit[] = "hummingbot.core.data_type.limit_order";
static const char __pyx_k_is_no_longer_profitable_Removin[] = " is no longer profitable. Removing the order.";
static const char __pyx_k_is_now_below_the_suggested_orde[] = " is now below the suggested order price at ";
static const char __pyx_k_is_now_less_than_the_current_ac[] = ") is now less than the current active order amount (";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_on_taker_market_to_lock_in_prof[] = " on taker market to lock in profits. (maker avg price=";
static const char __pyx_k_order_size_maker_balance_factor[] = "order_size_maker_balance_factor";
static const char __pyx_k_order_size_quantized_hedge_amou[] = ",  & order_size quantized hedge amount ";
static const char __pyx_k_order_size_qunatized_hedge_amou[] = ",  & order_size qunatized hedge amount ";
static const char __pyx_k_order_size_taker_balance_factor[] = "order_size_taker_balance_factor";
static const char __pyx_k_quantized_amount_before_convert[] = ", quantized amount before converting";
static const char __pyx_k_sell_fixing_maker_order_top_bid[] = "sell fixing maker order top bid ";
static const char __pyx_k_sell_order_is_placed_on_the_mak[] = " sell order is placed on the maker exchange";
static const char __pyx_k_taker_to_maker_quote_conversion[] = "taker_to_maker_quote_conversion_rate";
static const char __pyx_k_CrossExchangeMarketMakingStrateg[] = "CrossExchangeMarketMakingStrategy.c_get_top_bid_ask_from_price_samples.<locals>.genexpr";
static const char __pyx_k_Determining_max_size_of_the_Make[] = "Determining max size of the Maker bid order: Max size based on maker balance: (";
static const char __pyx_k_Going_to_place_a_maker_buy_order[] = "Going to place a maker buy order to fix balance";
static const char __pyx_k_Going_to_place_a_maker_sell_orde[] = "Going to place a maker sell order to fix balance";
static const char __pyx_k_Going_to_place_a_taker_buy_order[] = "Going to place a taker buy order to fix balance";
static const char __pyx_k_Going_to_place_a_taker_sell_orde[] = "Going to place a taker sell order to fix balance ";
static const char __pyx_k_Just_canceled_all_maker_order_an[] = "Just canceled all maker order and will not place any new orders for ";
static const char __pyx_k_Just_canceled_all_maker_orders_t[] = "Just canceled all maker orders to prevent the bot from being stuck";
static const char __pyx_k_Markets_are_ready_Trading_starte[] = "Markets are ready. Trading started.";
static const char __pyx_k_Place_buy_order_on_taker_and_mak[] = "Place buy order on taker and maker - Taker buy order is placed with most available balance or at max size of the order to restore balance ";
static const char __pyx_k_Place_sell_order_on_taker_and_ma[] = "Place sell order on taker and maker - Taker sell order is placed with most available balance or at max size of the order to restore balance ";
static const char __pyx_k_Reduce_order_size_portfolio_rati[] = "Reduce order_size_portfolio_ratio_limit";
static const char __pyx_k_SHADOW_MAKER_ORDER_KEEP_ALIVE_DU[] = "SHADOW_MAKER_ORDER_KEEP_ALIVE_DURATION";
static const char __pyx_k_Slippage_buffer_adjusted_order_p[] = "Slippage buffer adjusted order_price: ";
static const char __pyx_k_The_in_flight_maker_order_in_for[] = "The in-flight maker order in for the trading pair '";
static const char __pyx_k_WARNING_Some_markets_are_not_con[] = "WARNING: Some markets are not connected or are down at the moment. Market making may be dangerous when markets or networks are unstable.";
static const char __pyx_k_get_taker_to_maker_conversion_ra[] = "get_taker_to_maker_conversion_rate";
static const char __pyx_k_hummingbot_connector_exchange_ba[] = "hummingbot.connector.exchange_base";
static const char __pyx_k_hummingbot_core_network_iterator[] = "hummingbot.core.network_iterator";
static const char __pyx_k_hummingbot_core_rate_oracle_rate[] = "hummingbot.core.rate_oracle.rate_oracle";
static const char __pyx_k_hummingbot_strategy_cross_exchan[] = "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making";
static const char __pyx_k_hummingbot_strategy_strategy_bas[] = "hummingbot.strategy.strategy_base";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_order_size_portfolio_ratio_limit[] = "order_size_portfolio_ratio_limit";
static const char __pyx_k_order_size_taker_volume_factor_m[] = "order_size_taker_volume_factor must be between 0 and 1.";
static const char __pyx_k_self__events_cannot_be_converted[] = "self._events cannot be converted to a Python object for pickling";
static const char __pyx_k_taker_to_maker_base_conversion_r[] = "taker_to_maker_base_conversion_rate";
static const char __pyx_k_order_size_taker_balance_factor_2[] = "order_size_taker_balance_factor must be between 0 and 1.";
static const char __pyx_k_CrossExchangeMarketMakingStrateg_2[] = "CrossExchangeMarketMakingStrategy";
static const char __pyx_k_Determining_max_size_of_the_Make_2[] = "Determining max size of the Maker ask order: Max size based on maker balance: (";
static const char __pyx_k_Place_buy_order_on_taker_and_mak_2[] = "Place buy order on taker and maker - The remaining amount of buy order is placed on the maker exchange ";
static const char __pyx_k_Place_buy_order_on_taker_and_mak_3[] = "Place buy order on taker and maker - An order with as much taker buy available is placed as last option, Taker available:";
static const char __pyx_k_Place_buy_order_on_taker_and_mak_4[] = "Place buy order on taker and maker - An order with as much maker buy available is placed as last option, Maker available:";
static const char __pyx_k_Place_sell_order_on_taker_and_ma_2[] = "Place sell order on taker and maker - The remaining amount of ";
static const char __pyx_k_Place_sell_order_on_taker_and_ma_3[] = "Place sell order on taker and maker- An order with as much taker sell available ";
static PyObject *__pyx_kp_u_0_0;
static PyObject *__pyx_kp_u_0_05;
static PyObject *__pyx_kp_u_0_1667;
static PyObject *__pyx_kp_u_0_925;
static PyObject *__pyx_kp_u_1;
static PyObject *__pyx_kp_u_10f;
static PyObject *__pyx_kp_u_10g;
static PyObject *__pyx_kp_u_8g;
static PyObject *__pyx_kp_u_AF;
static PyObject *__pyx_kp_u_AF_2;
static PyObject *__pyx_kp_u_Active_orders;
static PyObject *__pyx_kp_u_Assets;
static PyObject *__pyx_kp_u_Attempting_to_place_a_limit_ask;
static PyObject *__pyx_kp_u_Attempting_to_place_a_limit_bid;
static PyObject *__pyx_n_s_BUY;
static PyObject *__pyx_kp_u_Balance_fix_counter;
static PyObject *__pyx_kp_u_Base_Balance;
static PyObject *__pyx_n_s_CANCEL_EXPIRY_DURATION;
static PyObject *__pyx_n_s_CONNECTED;
static PyObject *__pyx_kp_u_Creating_limit_ask_order_for;
static PyObject *__pyx_kp_u_Creating_limit_bid_order_for;
static PyObject *__pyx_n_s_CrossExchangeMarketMakingStrateg;
static PyObject *__pyx_n_s_CrossExchangeMarketMakingStrateg_2;
static PyObject *__pyx_n_s_CrossExchangeMarketPair;
static PyObject *__pyx_kp_u_Current_buy_order_price;
static PyObject *__pyx_kp_u_Current_hedging_price;
static PyObject *__pyx_kp_u_Current_maker_buy_fill_amount_o;
static PyObject *__pyx_kp_u_Current_maker_sell_fill_amount;
static PyObject *__pyx_kp_u_Current_sell_order_price;
static PyObject *__pyx_n_s_DEBUG;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_kp_u_Determining_max_size_of_the_Make;
static PyObject *__pyx_kp_u_Determining_max_size_of_the_Make_2;
static PyObject *__pyx_kp_u_Diff;
static PyObject *__pyx_n_s_ERROR;
static PyObject *__pyx_n_s_ExchangeBase;
static PyObject *__pyx_kp_u_Going_to_adjust_the_order_Taker;
static PyObject *__pyx_kp_u_Going_to_cancel_the_old_order_a;
static PyObject *__pyx_kp_u_Going_to_place_a_maker_buy_order;
static PyObject *__pyx_kp_u_Going_to_place_a_maker_sell_orde;
static PyObject *__pyx_kp_u_Going_to_place_a_taker_buy_order;
static PyObject *__pyx_kp_u_Going_to_place_a_taker_sell_orde;
static PyObject *__pyx_kp_u_Hedged_maker_buy_order_s_of;
static PyObject *__pyx_kp_u_Hedged_maker_sell_order_s_of;
static PyObject *__pyx_n_s_INFO;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Just_canceled_all_maker_order_an;
static PyObject *__pyx_kp_u_Just_canceled_all_maker_orders_t;
static PyObject *__pyx_kp_u_Just_canceled_all_orders_to_res;
static PyObject *__pyx_n_s_LIMIT;
static PyObject *__pyx_kp_u_Limit;
static PyObject *__pyx_n_s_LimitOrder;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_MARKET;
static PyObject *__pyx_kp_u_M_Buy_Min_P;
static PyObject *__pyx_kp_u_M_Buy_Min_P_2;
static PyObject *__pyx_kp_u_M_Sell_Min_P;
static PyObject *__pyx_kp_u_M_Sell_Min_P_2;
static PyObject *__pyx_kp_u_Maker_BUY_order;
static PyObject *__pyx_kp_u_Maker_Quote_balance;
static PyObject *__pyx_kp_u_Maker_Taker_Taker;
static PyObject *__pyx_kp_u_Maker_buy_order;
static PyObject *__pyx_kp_u_Maker_buy_order_of;
static PyObject *__pyx_kp_u_Maker_enough_base_balance;
static PyObject *__pyx_kp_u_Maker_enough_quote_balance;
static PyObject *__pyx_kp_u_Maker_sell_order;
static PyObject *__pyx_kp_u_Maker_sell_order_2;
static PyObject *__pyx_kp_u_Maker_sell_order_of;
static PyObject *__pyx_kp_u_Markets;
static PyObject *__pyx_kp_u_Markets_are_not_ready_No_market;
static PyObject *__pyx_kp_u_Markets_are_ready_Trading_starte;
static PyObject *__pyx_kp_u_Max_P;
static PyObject *__pyx_kp_u_Max_P_2;
static PyObject *__pyx_kp_u_Max_P_3;
static PyObject *__pyx_kp_u_Max_size_based_on_taker_balance;
static PyObject *__pyx_kp_u_Max_size_of_the_order;
static PyObject *__pyx_kp_u_Min_profitability_is;
static PyObject *__pyx_n_s_NaN;
static PyObject *__pyx_n_s_NetworkStatus;
static PyObject *__pyx_kp_u_No_active_maker_orders;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_kp_u_Not_enough_base_balance_to_sell;
static PyObject *__pyx_kp_u_Not_enough_quote_balance_to_buy;
static PyObject *__pyx_kp_u_OP;
static PyObject *__pyx_n_s_OPTION_LOG_ADJUST_ORDER;
static PyObject *__pyx_n_s_OPTION_LOG_ALL;
static PyObject *__pyx_n_s_OPTION_LOG_CREATE_ORDER;
static PyObject *__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED;
static PyObject *__pyx_n_s_OPTION_LOG_MAKER_ORDER_HEDGED;
static PyObject *__pyx_n_s_OPTION_LOG_NULL_ORDER_SIZE;
static PyObject *__pyx_n_s_OPTION_LOG_REMOVING_ORDER;
static PyObject *__pyx_n_s_OPTION_LOG_STATUS_REPORT;
static PyObject *__pyx_kp_u_OP_2;
static PyObject *__pyx_n_s_ORDER_ADJUST_SAMPLE_INTERVAL;
static PyObject *__pyx_n_s_ORDER_ADJUST_SAMPLE_WINDOW;
static PyObject *__pyx_n_s_Optional;
static PyObject *__pyx_n_s_OrderIDMarketPairTracker;
static PyObject *__pyx_n_s_OrderType;
static PyObject *__pyx_kp_u_Order_book_on_taker_is_too_thin;
static PyObject *__pyx_kp_u_Order_size_base;
static PyObject *__pyx_kp_u_Order_size_in_quote;
static PyObject *__pyx_kp_u_Order_size_limit;
static PyObject *__pyx_kp_u_Order_size_taker_balance_factor;
static PyObject *__pyx_n_u_Pair;
static PyObject *__pyx_n_s_PerformanceMetrics;
static PyObject *__pyx_kp_u_Place_buy_order_on_taker_and_mak;
static PyObject *__pyx_kp_u_Place_buy_order_on_taker_and_mak_2;
static PyObject *__pyx_kp_u_Place_buy_order_on_taker_and_mak_3;
static PyObject *__pyx_kp_u_Place_buy_order_on_taker_and_mak_4;
static PyObject *__pyx_kp_u_Place_sell_order_on_taker_and_ma;
static PyObject *__pyx_kp_u_Place_sell_order_on_taker_and_ma_2;
static PyObject *__pyx_kp_u_Place_sell_order_on_taker_and_ma_3;
static PyObject *__pyx_kp_u_Price_for_quote_volume;
static PyObject *__pyx_kp_u_RA;
static PyObject *__pyx_n_u_Rate;
static PyObject *__pyx_n_s_RateOracle;
static PyObject *__pyx_kp_u_Rate_adjusted;
static PyObject *__pyx_kp_u_Rate_conversion;
static PyObject *__pyx_kp_u_Reduce_order_size_portfolio_rati;
static PyObject *__pyx_n_s_SHADOW_MAKER_ORDER_KEEP_ALIVE_DU;
static PyObject *__pyx_kp_u_Slippage_buffer_adjusted_order_p;
static PyObject *__pyx_n_u_Source;
static PyObject *__pyx_n_s_StrategyBase;
static PyObject *__pyx_kp_u_TT;
static PyObject *__pyx_kp_u_TT_2;
static PyObject *__pyx_kp_u_Taker_Maker_Taker;
static PyObject *__pyx_kp_u_Taker_Quote_balance;
static PyObject *__pyx_kp_u_Taker_buy_order;
static PyObject *__pyx_kp_u_Taker_buy_order_2;
static PyObject *__pyx_kp_u_Taker_enough_base_balance;
static PyObject *__pyx_kp_u_Taker_enough_quote_balance;
static PyObject *__pyx_kp_u_Taker_sell_order;
static PyObject *__pyx_kp_u_Taker_sell_order_2;
static PyObject *__pyx_kp_u_Taking_into_account_a_Base_rate;
static PyObject *__pyx_kp_u_Target_Balance;
static PyObject *__pyx_kp_u_The_current_limit_ask_order_for;
static PyObject *__pyx_kp_u_The_current_limit_bid_order_for;
static PyObject *__pyx_kp_u_The_in_flight_maker_order_in_for;
static PyObject *__pyx_kp_u_Timer_passed;
static PyObject *__pyx_kp_u_Total_Balance;
static PyObject *__pyx_kp_u_Total_Base_Balance;
static PyObject *__pyx_n_s_TradeType;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Unexpected_error;
static PyObject *__pyx_n_u_Value;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_WARNING;
static PyObject *__pyx_kp_u_WARNINGS;
static PyObject *__pyx_kp_u_WARNING_Some_markets_are_not_con;
static PyObject *__pyx_kp_u_We_will_place_a_third_leg;
static PyObject *__pyx_n_s_ZeroDivisionError;
static PyObject *__pyx_kp_u__18;
static PyObject *__pyx_kp_u__19;
static PyObject *__pyx_kp_u__20;
static PyObject *__pyx_kp_u__21;
static PyObject *__pyx_kp_u__22;
static PyObject *__pyx_kp_u__23;
static PyObject *__pyx_kp_u__24;
static PyObject *__pyx_kp_u__25;
static PyObject *__pyx_kp_u__26;
static PyObject *__pyx_kp_u__27;
static PyObject *__pyx_kp_u_a_Quote_rate_of;
static PyObject *__pyx_kp_u_a_Quote_rate_of_2;
static PyObject *__pyx_n_s_active_limit_orders;
static PyObject *__pyx_n_s_active_limit_orders_all;
static PyObject *__pyx_n_s_active_order;
static PyObject *__pyx_n_s_active_order_canceling;
static PyObject *__pyx_kp_u_actual_is;
static PyObject *__pyx_n_s_adjust_order_enabled;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_kp_u_and_a_Taker_price_of;
static PyObject *__pyx_n_s_anti_hysteresis_duration;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_u_ask;
static PyObject *__pyx_kp_u_at;
static PyObject *__pyx_n_s_balance_fix_maker;
static PyObject *__pyx_kp_u_balance_fixes;
static PyObject *__pyx_n_s_balance_warning;
static PyObject *__pyx_n_s_base_asset;
static PyObject *__pyx_n_s_base_asset_amount;
static PyObject *__pyx_n_s_base_currency;
static PyObject *__pyx_n_u_bid;
static PyObject *__pyx_kp_u_buy_fixing_maker_order_top_bid;
static PyObject *__pyx_n_u_buy_maker;
static PyObject *__pyx_n_u_buy_maker_taker;
static PyObject *__pyx_n_u_buy_taker;
static PyObject *__pyx_n_s_cancel_order_threshold;
static PyObject *__pyx_n_s_cancel_order_timer;
static PyObject *__pyx_n_s_cancel_order_timer_seconds;
static PyObject *__pyx_n_s_ceil;
static PyObject *__pyx_n_s_client_order_id;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_kp_u_conversion_rate;
static PyObject *__pyx_n_s_counter;
static PyObject *__pyx_n_s_cross_exchange_market_pair;
static PyObject *__pyx_n_s_current_hedging_price;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_n_s_defaultdict;
static PyObject *__pyx_n_s_deque;
static PyObject *__pyx_kp_u_does_not_correspond_to_any_whit;
static PyObject *__pyx_kp_u_effective_hedging_price;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_exc_info;
static PyObject *__pyx_kp_u_filled;
static PyObject *__pyx_n_s_filled_order_delay;
static PyObject *__pyx_n_s_filled_order_delay_seconds;
static PyObject *__pyx_n_s_fix_counter;
static PyObject *__pyx_kp_u_fix_counter_is_now_at;
static PyObject *__pyx_n_s_fix_counter_status_df;
static PyObject *__pyx_n_u_fixed;
static PyObject *__pyx_n_s_floor;
static PyObject *__pyx_kp_u_for;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_instance;
static PyObject *__pyx_n_s_get_mid_price;
static PyObject *__pyx_n_s_get_taker_to_maker_conversion_ra;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_has_active_taker_order;
static PyObject *__pyx_kp_u_has_been_completely_filled;
static PyObject *__pyx_kp_u_has_been_completely_filled_2;
static PyObject *__pyx_n_s_hb_app_notification;
static PyObject *__pyx_kp_u_hedge_order_quantity;
static PyObject *__pyx_kp_u_hedge_order_quantity_2;
static PyObject *__pyx_n_s_hummingbot_client_performance;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
static PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
static PyObject *__pyx_n_s_hummingbot_core_event_events;
static PyObject *__pyx_n_s_hummingbot_core_network_iterator;
static PyObject *__pyx_n_s_hummingbot_core_rate_oracle_rate;
static PyObject *__pyx_n_s_hummingbot_strategy_cross_exchan;
static PyObject *__pyx_n_s_hummingbot_strategy_strategy_bas;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_intersection;
static PyObject *__pyx_n_s_is_bid;
static PyObject *__pyx_n_s_is_buy;
static PyObject *__pyx_kp_u_is_filled;
static PyObject *__pyx_kp_u_is_less_than_the_minimum_order;
static PyObject *__pyx_n_s_is_nan;
static PyObject *__pyx_kp_u_is_no_longer_profitable_Removin;
static PyObject *__pyx_kp_u_is_now_below_the_suggested_orde;
static PyObject *__pyx_kp_u_is_now_less_than_the_current_ac;
static PyObject *__pyx_kp_u_is_placed_as_last_option;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_keep_target_balance;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_limit_order_min_expiration;
static PyObject *__pyx_n_s_log_conversion_rates;
static PyObject *__pyx_n_s_log_with_clock;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_logging_options;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maker;
static PyObject *__pyx_n_s_maker_order_update;
static PyObject *__pyx_n_s_market;
static PyObject *__pyx_n_s_market_conversion_rate;
static PyObject *__pyx_n_s_market_pair;
static PyObject *__pyx_n_s_market_pairs;
static PyObject *__pyx_kp_u_market_pairs_must_not_be_empty;
static PyObject *__pyx_n_s_market_status_data_frame;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_min_order_amount;
static PyObject *__pyx_n_s_min_profitability;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_u_nan;
static PyObject *__pyx_n_s_network_status;
static PyObject *__pyx_n_s_network_warning;
static PyObject *__pyx_n_s_notify_hb_app;
static PyObject *__pyx_n_s_notify_hb_app_with_timestamp;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_kp_u_on_taker_market_to_lock_in_prof;
static PyObject *__pyx_n_s_oracle_status_df;
static PyObject *__pyx_n_s_order_amount;
static PyObject *__pyx_kp_u_order_at;
static PyObject *__pyx_n_s_order_id;
static PyObject *__pyx_n_s_order_id_market_pair_tracker;
static PyObject *__pyx_kp_u_order_size_base;
static PyObject *__pyx_n_s_order_size_maker_balance_factor;
static PyObject *__pyx_n_s_order_size_portfolio_ratio_limit;
static PyObject *__pyx_kp_u_order_size_quantized_hedge_amou;
static PyObject *__pyx_kp_u_order_size_qunatized_hedge_amou;
static PyObject *__pyx_n_s_order_size_taker_balance_factor;
static PyObject *__pyx_kp_u_order_size_taker_balance_factor_2;
static PyObject *__pyx_n_s_order_size_taker_volume_factor;
static PyObject *__pyx_kp_u_order_size_taker_volume_factor_m;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_popleft;
static PyObject *__pyx_kp_u_pref_min_acutal;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_kp_u_price_for_quote_volume;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_quantity;
static PyObject *__pyx_n_s_quantize_order_price;
static PyObject *__pyx_kp_u_quantized_amount_before_convert;
static PyObject *__pyx_n_s_quote_asset;
static PyObject *__pyx_n_s_quote_currency;
static PyObject *__pyx_n_s_rate;
static PyObject *__pyx_n_s_ready;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_restore_timer;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_s_decimal_nan;
static PyObject *__pyx_n_s_s_decimal_zero;
static PyObject *__pyx_n_s_s_logger;
static PyObject *__pyx_kp_u_seconds;
static PyObject *__pyx_kp_u_seconds_current_value_of_Timer;
static PyObject *__pyx_kp_s_self__events_cannot_be_converted;
static PyObject *__pyx_kp_u_self__top_maker_cancel_seconds;
static PyObject *__pyx_kp_u_self__top_maker_cancel_timer;
static PyObject *__pyx_kp_u_sell_fixing_maker_order_top_bid;
static PyObject *__pyx_n_u_sell_maker;
static PyObject *__pyx_n_u_sell_maker_taker;
static PyObject *__pyx_kp_u_sell_order_is_placed_on_the_mak;
static PyObject *__pyx_n_u_sell_taker;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shadow_limit_orders;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_slippage_buffer;
static PyObject *__pyx_n_s_slippage_buffer_fix;
static PyObject *__pyx_n_s_smart_round;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_status_report_interval;
static PyObject *__pyx_kp_u_suggested_order_price;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_taker;
static PyObject *__pyx_kp_u_taker_balance_in_quote;
static PyObject *__pyx_n_s_taker_to_maker_base_conversion_r;
static PyObject *__pyx_n_s_taker_to_maker_quote_conversion;
static PyObject *__pyx_kp_u_taker_top;
static PyObject *__pyx_n_s_target_base_balance;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_third_market;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_kp_u_timer_over_cancelled_all;
static PyObject *__pyx_kp_u_to_buy;
static PyObject *__pyx_n_s_to_pandas;
static PyObject *__pyx_kp_u_to_sell;
static PyObject *__pyx_kp_u_to_sell_2;
static PyObject *__pyx_kp_u_too_many_orders_cancelled_all;
static PyObject *__pyx_kp_u_top_ask;
static PyObject *__pyx_n_s_top_depth_tolerance;
static PyObject *__pyx_n_s_top_depth_tolerance_taker;
static PyObject *__pyx_n_s_top_maker_cancel_seconds;
static PyObject *__pyx_n_s_top_maker_cancel_timer;
static PyObject *__pyx_n_s_trade_type;
static PyObject *__pyx_n_s_trading_pair;
static PyObject *__pyx_n_s_triangular_arbitrage;
static PyObject *__pyx_n_s_triangular_switch;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_use_oracle_conversion_rate;
static PyObject *__pyx_kp_u_user_order;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_waiting_time;
static PyObject *__pyx_n_s_wallet_balance_data_frame;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_kp_u_will_place_a_Maker_sell_order;
static PyObject *__pyx_kp_u_will_place_a_maker_buy_order;
static PyObject *__pyx_kp_u_will_place_a_taker_buy_order;
static PyObject *__pyx_kp_u_will_place_a_taker_sell_order;
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_2init_params(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pairs, PyObject *__pyx_v_third_market, PyObject *__pyx_v_min_profitability, PyObject *__pyx_v_order_amount, PyObject *__pyx_v_order_size_taker_volume_factor, PyObject *__pyx_v_order_size_taker_balance_factor, PyObject *__pyx_v_order_size_maker_balance_factor, PyObject *__pyx_v_order_size_portfolio_ratio_limit, double __pyx_v_limit_order_min_expiration, PyObject *__pyx_v_adjust_order_enabled, double __pyx_v_anti_hysteresis_duration, PyObject *__pyx_v_filled_order_delay, double __pyx_v_filled_order_delay_seconds, int __pyx_v_active_order_canceling, PyObject *__pyx_v_triangular_arbitrage, PyObject *__pyx_v_triangular_switch, PyObject *__pyx_v_cancel_order_threshold, PyObject *__pyx_v_top_depth_tolerance, PyObject *__pyx_v_top_depth_tolerance_taker, PyObject *__pyx_v_logging_options, double __pyx_v_status_report_interval, PyObject *__pyx_v_use_oracle_conversion_rate, PyObject *__pyx_v_taker_to_maker_base_conversion_rate, PyObject *__pyx_v_taker_to_maker_quote_conversion_rate, PyObject *__pyx_v_slippage_buffer, PyObject *__pyx_v_min_order_amount, PyObject *__pyx_v_hb_app_notification, PyObject *__pyx_v_target_base_balance, PyObject *__pyx_v_slippage_buffer_fix, double __pyx_v_waiting_time, PyObject *__pyx_v_keep_target_balance, PyObject *__pyx_v_cancel_order_timer, double __pyx_v_top_maker_cancel_timer, double __pyx_v_top_maker_cancel_seconds, double __pyx_v_cancel_order_timer_seconds, PyObject *__pyx_v_counter, PyObject *__pyx_v_fix_counter, PyObject *__pyx_v_restore_timer, CYTHON_UNUSED PyObject *__pyx_v_maker_order_update, PyObject *__pyx_v_balance_fix_maker); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12order_amount___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17min_profitability___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23active_limit_orders_all___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19active_limit_orders___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19cached_limit_orders___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_bids___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_asks___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_2__set__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, int64_t __pyx_v_logging_options); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_4get_taker_to_maker_conversion_rate(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_6log_conversion_rates(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_8oracle_status_df(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_10fix_counter_status_df(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12format_status(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_14get_order_size_after_portfolio_ratio_limit(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_16get_market_making_size(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_18get_market_making_price(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_20get_adjusted_limit_order_size(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_22get_effective_hedging_price(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_24check_if_still_profitable(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order, PyObject *__pyx_v_current_hedging_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_26check_if_sufficient_balance(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_28has_active_taker_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_30market_conversion_rate(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_32notify_hb_app(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values = {0, &__pyx_n_s_values, 0, 0, 0};
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_60_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_64;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_9223372036854775807;
static PyObject *__pyx_k_;
static PyObject *__pyx_k__2;
static PyObject *__pyx_k__3;
static PyObject *__pyx_k__4;
static PyObject *__pyx_k__5;
static PyObject *__pyx_k__6;
static PyObject *__pyx_k__7;
static PyObject *__pyx_k__8;
static PyObject *__pyx_k__9;
static PyObject *__pyx_k__10;
static PyObject *__pyx_k__11;
static PyObject *__pyx_k__12;
static PyObject *__pyx_k__13;
static PyObject *__pyx_k__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
/* Late includes */

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":57
 * 
 *     @classmethod
 *     def logger(cls):             # <<<<<<<<<<<<<<
 *         global s_logger
 *         if s_logger is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_1logger(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_1logger(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logger (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_logger(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logger", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":59
 *     def logger(cls):
 *         global s_logger
 *         if s_logger is None:             # <<<<<<<<<<<<<<
 *             s_logger = logging.getLogger(__name__)
 *         return s_logger
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":60
 *         global s_logger
 *         if s_logger is None:
 *             s_logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 *         return s_logger
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_logger, __pyx_t_1) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":59
 *     def logger(cls):
 *         global s_logger
 *         if s_logger is None:             # <<<<<<<<<<<<<<
 *             s_logger = logging.getLogger(__name__)
 *         return s_logger
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":61
 *         if s_logger is None:
 *             s_logger = logging.getLogger(__name__)
 *         return s_logger             # <<<<<<<<<<<<<<
 * 
 *     def init_params(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":57
 * 
 *     @classmethod
 *     def logger(cls):             # <<<<<<<<<<<<<<
 *         global s_logger
 *         if s_logger is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":63
 *         return s_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_pairs: List[CrossExchangeMarketPair],
 *                     third_market: [MarketTradingPairTuple],
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_3init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_2init_params[] = "\n        Initializes a cross exchange market making strategy object.\n\n        :param market_pairs: list of cross exchange market pairs\n        :param min_profitability: minimum profitability ratio threshold, for actively cancelling unprofitable orders\n        :param order_amount: override the limit order trade size, in base asset unit\n        :param order_size_taker_volume_factor: maximum size limit of new limit orders, in terms of ratio of hedge-able\n                                               volume on taker side\n        :param order_size_taker_balance_factor: maximum size limit of new limit orders, in terms of ratio of asset\n                                                balance available for hedging trade on taker side\n        :param order_size_portfolio_ratio_limit: maximum size limit of new limit orders, in terms of ratio of total\n                                                 portfolio value on both maker and taker markets\n        :param limit_order_min_expiration: amount of time after which limit order will expire to be used alongside\n                                           cancel_order_threshold\n        :param cancel_order_threshold: if active order cancellation is disabled, the hedging loss ratio required for the\n                                       strategy to force an order cancellation\n        :param active_order_canceling: True if active order cancellation is enabled, False if disabled\n        :param anti_hysteresis_duration: the minimum amount of time interval between adjusting limit order prices\n        :param logging_options: bit field for what types of logging to enable in this strategy object\n        :param status_report_interval: what is the time interval between outputting new network warnings\n        :param slippage_buffer: Buffer added to the price to account for slippage for taker orders\n        ";
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_3init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_market_pairs = 0;
  PyObject *__pyx_v_third_market = 0;
  PyObject *__pyx_v_min_profitability = 0;
  PyObject *__pyx_v_order_amount = 0;
  PyObject *__pyx_v_order_size_taker_volume_factor = 0;
  PyObject *__pyx_v_order_size_taker_balance_factor = 0;
  PyObject *__pyx_v_order_size_maker_balance_factor = 0;
  PyObject *__pyx_v_order_size_portfolio_ratio_limit = 0;
  double __pyx_v_limit_order_min_expiration;
  PyObject *__pyx_v_adjust_order_enabled = 0;
  double __pyx_v_anti_hysteresis_duration;
  PyObject *__pyx_v_filled_order_delay = 0;
  double __pyx_v_filled_order_delay_seconds;
  int __pyx_v_active_order_canceling;
  PyObject *__pyx_v_triangular_arbitrage = 0;
  PyObject *__pyx_v_triangular_switch = 0;
  PyObject *__pyx_v_cancel_order_threshold = 0;
  PyObject *__pyx_v_top_depth_tolerance = 0;
  PyObject *__pyx_v_top_depth_tolerance_taker = 0;
  PyObject *__pyx_v_logging_options = 0;
  double __pyx_v_status_report_interval;
  PyObject *__pyx_v_use_oracle_conversion_rate = 0;
  PyObject *__pyx_v_taker_to_maker_base_conversion_rate = 0;
  PyObject *__pyx_v_taker_to_maker_quote_conversion_rate = 0;
  PyObject *__pyx_v_slippage_buffer = 0;
  PyObject *__pyx_v_min_order_amount = 0;
  PyObject *__pyx_v_hb_app_notification = 0;
  PyObject *__pyx_v_target_base_balance = 0;
  PyObject *__pyx_v_slippage_buffer_fix = 0;
  double __pyx_v_waiting_time;
  PyObject *__pyx_v_keep_target_balance = 0;
  PyObject *__pyx_v_cancel_order_timer = 0;
  double __pyx_v_top_maker_cancel_timer;
  double __pyx_v_top_maker_cancel_seconds;
  double __pyx_v_cancel_order_timer_seconds;
  PyObject *__pyx_v_counter = 0;
  PyObject *__pyx_v_fix_counter = 0;
  PyObject *__pyx_v_restore_timer = 0;
  CYTHON_UNUSED PyObject *__pyx_v_maker_order_update = 0;
  PyObject *__pyx_v_balance_fix_maker = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_params (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pairs,&__pyx_n_s_third_market,&__pyx_n_s_min_profitability,&__pyx_n_s_order_amount,&__pyx_n_s_order_size_taker_volume_factor,&__pyx_n_s_order_size_taker_balance_factor,&__pyx_n_s_order_size_maker_balance_factor,&__pyx_n_s_order_size_portfolio_ratio_limit,&__pyx_n_s_limit_order_min_expiration,&__pyx_n_s_adjust_order_enabled,&__pyx_n_s_anti_hysteresis_duration,&__pyx_n_s_filled_order_delay,&__pyx_n_s_filled_order_delay_seconds,&__pyx_n_s_active_order_canceling,&__pyx_n_s_triangular_arbitrage,&__pyx_n_s_triangular_switch,&__pyx_n_s_cancel_order_threshold,&__pyx_n_s_top_depth_tolerance,&__pyx_n_s_top_depth_tolerance_taker,&__pyx_n_s_logging_options,&__pyx_n_s_status_report_interval,&__pyx_n_s_use_oracle_conversion_rate,&__pyx_n_s_taker_to_maker_base_conversion_r,&__pyx_n_s_taker_to_maker_quote_conversion,&__pyx_n_s_slippage_buffer,&__pyx_n_s_min_order_amount,&__pyx_n_s_hb_app_notification,&__pyx_n_s_target_base_balance,&__pyx_n_s_slippage_buffer_fix,&__pyx_n_s_waiting_time,&__pyx_n_s_keep_target_balance,&__pyx_n_s_cancel_order_timer,&__pyx_n_s_top_maker_cancel_timer,&__pyx_n_s_top_maker_cancel_seconds,&__pyx_n_s_cancel_order_timer_seconds,&__pyx_n_s_counter,&__pyx_n_s_fix_counter,&__pyx_n_s_restore_timer,&__pyx_n_s_maker_order_update,&__pyx_n_s_balance_fix_maker,0};
    PyObject* values[40] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[3] = __pyx_k_;
    values[4] = __pyx_k__2;
    values[5] = __pyx_k__3;
    values[6] = __pyx_k__4;
    values[7] = __pyx_k__5;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":73
 *                     order_size_portfolio_ratio_limit: Decimal = Decimal("0.1667"),
 *                     limit_order_min_expiration: float = 130.0,
 *                     adjust_order_enabled: bool = True,             # <<<<<<<<<<<<<<
 *                     anti_hysteresis_duration: float = 60.0,
 *                     filled_order_delay: bool = True,
 */
    values[9] = ((PyObject *)Py_True);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":75
 *                     adjust_order_enabled: bool = True,
 *                     anti_hysteresis_duration: float = 60.0,
 *                     filled_order_delay: bool = True,             # <<<<<<<<<<<<<<
 *                     filled_order_delay_seconds: float = 60.0,
 *                     active_order_canceling: bint = True,
 */
    values[11] = ((PyObject *)Py_True);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":78
 *                     filled_order_delay_seconds: float = 60.0,
 *                     active_order_canceling: bint = True,
 *                     triangular_arbitrage: bool = False,             # <<<<<<<<<<<<<<
 *                     triangular_switch: bool = True,
 *                     cancel_order_threshold: Decimal = Decimal("0.05"),
 */
    values[14] = ((PyObject *)Py_False);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":79
 *                     active_order_canceling: bint = True,
 *                     triangular_arbitrage: bool = False,
 *                     triangular_switch: bool = True,             # <<<<<<<<<<<<<<
 *                     cancel_order_threshold: Decimal = Decimal("0.05"),
 *                     top_depth_tolerance: Decimal = Decimal(0),
 */
    values[15] = ((PyObject *)Py_True);
    values[16] = __pyx_k__6;
    values[17] = __pyx_k__7;
    values[18] = __pyx_k__8;
    values[19] = __pyx_k__9;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":85
 *                     logging_options: int = OPTION_LOG_ALL,
 *                     status_report_interval: float = 900,
 *                     use_oracle_conversion_rate: bool = False,             # <<<<<<<<<<<<<<
 *                     taker_to_maker_base_conversion_rate: Decimal = Decimal("1"),
 *                     taker_to_maker_quote_conversion_rate: Decimal = Decimal("1"),
 */
    values[21] = ((PyObject *)Py_False);
    values[22] = __pyx_k__10;
    values[23] = __pyx_k__11;
    values[24] = __pyx_k__12;
    values[25] = __pyx_k__13;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":90
 *                     slippage_buffer: Decimal = Decimal("0.05"),
 *                     min_order_amount: Decimal = Decimal,
 *                     hb_app_notification: bool = False,             # <<<<<<<<<<<<<<
 *                     target_base_balance: Decimal = Decimal("1"),
 *                     slippage_buffer_fix: Decimal = 3,
 */
    values[26] = ((PyObject *)Py_False);
    values[27] = __pyx_k__14;
    values[28] = ((PyObject *)__pyx_int_3);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":94
 *                     slippage_buffer_fix: Decimal = 3,
 *                     waiting_time: float = 1,
 *                     keep_target_balance: bool = False,             # <<<<<<<<<<<<<<
 *                     cancel_order_timer: bool = True,
 *                     top_maker_cancel_timer : float = 0,
 */
    values[30] = ((PyObject *)Py_False);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":95
 *                     waiting_time: float = 1,
 *                     keep_target_balance: bool = False,
 *                     cancel_order_timer: bool = True,             # <<<<<<<<<<<<<<
 *                     top_maker_cancel_timer : float = 0,
 *                     top_maker_cancel_seconds : float = 3,
 */
    values[31] = ((PyObject *)Py_True);
    values[35] = ((PyObject *)__pyx_int_0);
    values[36] = ((PyObject *)__pyx_int_0);
    values[37] = ((PyObject *)__pyx_int_0);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":102
 *                     fix_counter: Decimal = 0,
 *                     restore_timer = 0,
 *                     maker_order_update : bool = False,             # <<<<<<<<<<<<<<
 *                     balance_fix_maker : bool = False
 *                     ):
 */
    values[38] = ((PyObject *)Py_False);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":103
 *                     restore_timer = 0,
 *                     maker_order_update : bool = False,
 *                     balance_fix_maker : bool = False             # <<<<<<<<<<<<<<
 *                     ):
 *         """
 */
    values[39] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        CYTHON_FALLTHROUGH;
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        CYTHON_FALLTHROUGH;
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        CYTHON_FALLTHROUGH;
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        CYTHON_FALLTHROUGH;
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        CYTHON_FALLTHROUGH;
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        CYTHON_FALLTHROUGH;
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        CYTHON_FALLTHROUGH;
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        CYTHON_FALLTHROUGH;
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        CYTHON_FALLTHROUGH;
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        CYTHON_FALLTHROUGH;
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        CYTHON_FALLTHROUGH;
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        CYTHON_FALLTHROUGH;
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        CYTHON_FALLTHROUGH;
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        CYTHON_FALLTHROUGH;
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        CYTHON_FALLTHROUGH;
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        CYTHON_FALLTHROUGH;
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        CYTHON_FALLTHROUGH;
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        CYTHON_FALLTHROUGH;
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        CYTHON_FALLTHROUGH;
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_market_pairs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_third_market)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_params", 0, 3, 40, 1); __PYX_ERR(0, 63, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_profitability)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_params", 0, 3, 40, 2); __PYX_ERR(0, 63, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_amount);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_size_taker_volume_factor);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_size_taker_balance_factor);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_size_maker_balance_factor);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_size_portfolio_ratio_limit);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limit_order_min_expiration);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_adjust_order_enabled);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anti_hysteresis_duration);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filled_order_delay);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filled_order_delay_seconds);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_active_order_canceling);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_triangular_arbitrage);
          if (value) { values[14] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_triangular_switch);
          if (value) { values[15] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cancel_order_threshold);
          if (value) { values[16] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top_depth_tolerance);
          if (value) { values[17] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top_depth_tolerance_taker);
          if (value) { values[18] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_logging_options);
          if (value) { values[19] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 20:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_status_report_interval);
          if (value) { values[20] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 21:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_oracle_conversion_rate);
          if (value) { values[21] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 22:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_taker_to_maker_base_conversion_r);
          if (value) { values[22] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 23:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_taker_to_maker_quote_conversion);
          if (value) { values[23] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 24:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_slippage_buffer);
          if (value) { values[24] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 25:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_order_amount);
          if (value) { values[25] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 26:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hb_app_notification);
          if (value) { values[26] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 27:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_base_balance);
          if (value) { values[27] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 28:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_slippage_buffer_fix);
          if (value) { values[28] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 29:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_waiting_time);
          if (value) { values[29] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 30:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keep_target_balance);
          if (value) { values[30] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 31:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cancel_order_timer);
          if (value) { values[31] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 32:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top_maker_cancel_timer);
          if (value) { values[32] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 33:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top_maker_cancel_seconds);
          if (value) { values[33] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 34:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cancel_order_timer_seconds);
          if (value) { values[34] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 35:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_counter);
          if (value) { values[35] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 36:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fix_counter);
          if (value) { values[36] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 37:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_restore_timer);
          if (value) { values[37] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 38:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maker_order_update);
          if (value) { values[38] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 39:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_balance_fix_maker);
          if (value) { values[39] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_params") < 0)) __PYX_ERR(0, 63, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        CYTHON_FALLTHROUGH;
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        CYTHON_FALLTHROUGH;
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        CYTHON_FALLTHROUGH;
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        CYTHON_FALLTHROUGH;
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        CYTHON_FALLTHROUGH;
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        CYTHON_FALLTHROUGH;
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        CYTHON_FALLTHROUGH;
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        CYTHON_FALLTHROUGH;
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        CYTHON_FALLTHROUGH;
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        CYTHON_FALLTHROUGH;
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        CYTHON_FALLTHROUGH;
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        CYTHON_FALLTHROUGH;
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        CYTHON_FALLTHROUGH;
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        CYTHON_FALLTHROUGH;
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        CYTHON_FALLTHROUGH;
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        CYTHON_FALLTHROUGH;
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        CYTHON_FALLTHROUGH;
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        CYTHON_FALLTHROUGH;
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        CYTHON_FALLTHROUGH;
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_market_pairs = values[0];
    __pyx_v_third_market = values[1];
    __pyx_v_min_profitability = values[2];
    __pyx_v_order_amount = values[3];
    __pyx_v_order_size_taker_volume_factor = values[4];
    __pyx_v_order_size_taker_balance_factor = values[5];
    __pyx_v_order_size_maker_balance_factor = values[6];
    __pyx_v_order_size_portfolio_ratio_limit = values[7];
    if (values[8]) {
      __pyx_v_limit_order_min_expiration = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_limit_order_min_expiration == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L3_error)
    } else {
      __pyx_v_limit_order_min_expiration = ((double)130.0);
    }
    __pyx_v_adjust_order_enabled = values[9];
    if (values[10]) {
      __pyx_v_anti_hysteresis_duration = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_anti_hysteresis_duration == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 74, __pyx_L3_error)
    } else {
      __pyx_v_anti_hysteresis_duration = ((double)60.0);
    }
    __pyx_v_filled_order_delay = values[11];
    if (values[12]) {
      __pyx_v_filled_order_delay_seconds = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_filled_order_delay_seconds == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 76, __pyx_L3_error)
    } else {
      __pyx_v_filled_order_delay_seconds = ((double)60.0);
    }
    if (values[13]) {
      __pyx_v_active_order_canceling = __Pyx_PyObject_IsTrue(values[13]); if (unlikely((__pyx_v_active_order_canceling == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
    } else {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":77
 *                     filled_order_delay: bool = True,
 *                     filled_order_delay_seconds: float = 60.0,
 *                     active_order_canceling: bint = True,             # <<<<<<<<<<<<<<
 *                     triangular_arbitrage: bool = False,
 *                     triangular_switch: bool = True,
 */
      __pyx_v_active_order_canceling = ((int)1);
    }
    __pyx_v_triangular_arbitrage = values[14];
    __pyx_v_triangular_switch = values[15];
    __pyx_v_cancel_order_threshold = values[16];
    __pyx_v_top_depth_tolerance = values[17];
    __pyx_v_top_depth_tolerance_taker = values[18];
    __pyx_v_logging_options = values[19];
    if (values[20]) {
      __pyx_v_status_report_interval = __pyx_PyFloat_AsDouble(values[20]); if (unlikely((__pyx_v_status_report_interval == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L3_error)
    } else {
      __pyx_v_status_report_interval = ((double)900.0);
    }
    __pyx_v_use_oracle_conversion_rate = values[21];
    __pyx_v_taker_to_maker_base_conversion_rate = values[22];
    __pyx_v_taker_to_maker_quote_conversion_rate = values[23];
    __pyx_v_slippage_buffer = values[24];
    __pyx_v_min_order_amount = values[25];
    __pyx_v_hb_app_notification = values[26];
    __pyx_v_target_base_balance = values[27];
    __pyx_v_slippage_buffer_fix = values[28];
    if (values[29]) {
      __pyx_v_waiting_time = __pyx_PyFloat_AsDouble(values[29]); if (unlikely((__pyx_v_waiting_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L3_error)
    } else {
      __pyx_v_waiting_time = ((double)1.0);
    }
    __pyx_v_keep_target_balance = values[30];
    __pyx_v_cancel_order_timer = values[31];
    if (values[32]) {
      __pyx_v_top_maker_cancel_timer = __pyx_PyFloat_AsDouble(values[32]); if (unlikely((__pyx_v_top_maker_cancel_timer == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L3_error)
    } else {
      __pyx_v_top_maker_cancel_timer = ((double)0.0);
    }
    if (values[33]) {
      __pyx_v_top_maker_cancel_seconds = __pyx_PyFloat_AsDouble(values[33]); if (unlikely((__pyx_v_top_maker_cancel_seconds == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    } else {
      __pyx_v_top_maker_cancel_seconds = ((double)3.0);
    }
    if (values[34]) {
      __pyx_v_cancel_order_timer_seconds = __pyx_PyFloat_AsDouble(values[34]); if (unlikely((__pyx_v_cancel_order_timer_seconds == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L3_error)
    } else {
      __pyx_v_cancel_order_timer_seconds = ((double)1800.0);
    }
    __pyx_v_counter = values[35];
    __pyx_v_fix_counter = values[36];
    __pyx_v_restore_timer = values[37];
    __pyx_v_maker_order_update = values[38];
    __pyx_v_balance_fix_maker = values[39];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_params", 0, 3, 40, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 63, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_2init_params(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), __pyx_v_market_pairs, __pyx_v_third_market, __pyx_v_min_profitability, __pyx_v_order_amount, __pyx_v_order_size_taker_volume_factor, __pyx_v_order_size_taker_balance_factor, __pyx_v_order_size_maker_balance_factor, __pyx_v_order_size_portfolio_ratio_limit, __pyx_v_limit_order_min_expiration, __pyx_v_adjust_order_enabled, __pyx_v_anti_hysteresis_duration, __pyx_v_filled_order_delay, __pyx_v_filled_order_delay_seconds, __pyx_v_active_order_canceling, __pyx_v_triangular_arbitrage, __pyx_v_triangular_switch, __pyx_v_cancel_order_threshold, __pyx_v_top_depth_tolerance, __pyx_v_top_depth_tolerance_taker, __pyx_v_logging_options, __pyx_v_status_report_interval, __pyx_v_use_oracle_conversion_rate, __pyx_v_taker_to_maker_base_conversion_rate, __pyx_v_taker_to_maker_quote_conversion_rate, __pyx_v_slippage_buffer, __pyx_v_min_order_amount, __pyx_v_hb_app_notification, __pyx_v_target_base_balance, __pyx_v_slippage_buffer_fix, __pyx_v_waiting_time, __pyx_v_keep_target_balance, __pyx_v_cancel_order_timer, __pyx_v_top_maker_cancel_timer, __pyx_v_top_maker_cancel_seconds, __pyx_v_cancel_order_timer_seconds, __pyx_v_counter, __pyx_v_fix_counter, __pyx_v_restore_timer, __pyx_v_maker_order_update, __pyx_v_balance_fix_maker);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":63
 *         return s_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_pairs: List[CrossExchangeMarketPair],
 *                     third_market: [MarketTradingPairTuple],
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_2init_params(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pairs, PyObject *__pyx_v_third_market, PyObject *__pyx_v_min_profitability, PyObject *__pyx_v_order_amount, PyObject *__pyx_v_order_size_taker_volume_factor, PyObject *__pyx_v_order_size_taker_balance_factor, PyObject *__pyx_v_order_size_maker_balance_factor, PyObject *__pyx_v_order_size_portfolio_ratio_limit, double __pyx_v_limit_order_min_expiration, PyObject *__pyx_v_adjust_order_enabled, double __pyx_v_anti_hysteresis_duration, PyObject *__pyx_v_filled_order_delay, double __pyx_v_filled_order_delay_seconds, int __pyx_v_active_order_canceling, PyObject *__pyx_v_triangular_arbitrage, PyObject *__pyx_v_triangular_switch, PyObject *__pyx_v_cancel_order_threshold, PyObject *__pyx_v_top_depth_tolerance, PyObject *__pyx_v_top_depth_tolerance_taker, PyObject *__pyx_v_logging_options, double __pyx_v_status_report_interval, PyObject *__pyx_v_use_oracle_conversion_rate, PyObject *__pyx_v_taker_to_maker_base_conversion_rate, PyObject *__pyx_v_taker_to_maker_quote_conversion_rate, PyObject *__pyx_v_slippage_buffer, PyObject *__pyx_v_min_order_amount, PyObject *__pyx_v_hb_app_notification, PyObject *__pyx_v_target_base_balance, PyObject *__pyx_v_slippage_buffer_fix, double __pyx_v_waiting_time, PyObject *__pyx_v_keep_target_balance, PyObject *__pyx_v_cancel_order_timer, double __pyx_v_top_maker_cancel_timer, double __pyx_v_top_maker_cancel_seconds, double __pyx_v_cancel_order_timer_seconds, PyObject *__pyx_v_counter, PyObject *__pyx_v_fix_counter, PyObject *__pyx_v_restore_timer, CYTHON_UNUSED PyObject *__pyx_v_maker_order_update, PyObject *__pyx_v_balance_fix_maker) {
  PyObject *__pyx_v_all_markets = NULL;
  PyObject *__pyx_7genexpr__pyx_v_market_pair = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_market_pair = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_market_pair = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int64_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_params", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":127
 *         :param slippage_buffer: Buffer added to the price to account for slippage for taker orders
 *         """
 *         if len(market_pairs) < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"market_pairs must not be empty.")
 *         if not 0 <= order_size_taker_volume_factor <= 1:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_market_pairs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 < 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":128
 *         """
 *         if len(market_pairs) < 0:
 *             raise ValueError(f"market_pairs must not be empty.")             # <<<<<<<<<<<<<<
 *         if not 0 <= order_size_taker_volume_factor <= 1:
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 128, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":127
 *         :param slippage_buffer: Buffer added to the price to account for slippage for taker orders
 *         """
 *         if len(market_pairs) < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"market_pairs must not be empty.")
 *         if not 0 <= order_size_taker_volume_factor <= 1:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":129
 *         if len(market_pairs) < 0:
 *             raise ValueError(f"market_pairs must not be empty.")
 *         if not 0 <= order_size_taker_volume_factor <= 1:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")
 *         if not 0 <= order_size_taker_balance_factor <= 1:
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_int_0, __pyx_v_order_size_taker_volume_factor, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_3)) {
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_order_size_taker_volume_factor, __pyx_int_1, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!__pyx_t_2) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":130
 *             raise ValueError(f"market_pairs must not be empty.")
 *         if not 0 <= order_size_taker_volume_factor <= 1:
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")             # <<<<<<<<<<<<<<
 *         if not 0 <= order_size_taker_balance_factor <= 1:
 *             raise ValueError(f"order_size_taker_balance_factor must be between 0 and 1.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 130, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":129
 *         if len(market_pairs) < 0:
 *             raise ValueError(f"market_pairs must not be empty.")
 *         if not 0 <= order_size_taker_volume_factor <= 1:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")
 *         if not 0 <= order_size_taker_balance_factor <= 1:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":131
 *         if not 0 <= order_size_taker_volume_factor <= 1:
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")
 *         if not 0 <= order_size_taker_balance_factor <= 1:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"order_size_taker_balance_factor must be between 0 and 1.")
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_int_0, __pyx_v_order_size_taker_balance_factor, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_3)) {
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_order_size_taker_balance_factor, __pyx_int_1, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((!__pyx_t_4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":132
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")
 *         if not 0 <= order_size_taker_balance_factor <= 1:
 *             raise ValueError(f"order_size_taker_balance_factor must be between 0 and 1.")             # <<<<<<<<<<<<<<
 * 
 *         self._market_pairs = {
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 132, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":131
 *         if not 0 <= order_size_taker_volume_factor <= 1:
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")
 *         if not 0 <= order_size_taker_balance_factor <= 1:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"order_size_taker_balance_factor must be between 0 and 1.")
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":134
 *             raise ValueError(f"order_size_taker_balance_factor must be between 0 and 1.")
 * 
 *         self._market_pairs = {             # <<<<<<<<<<<<<<
 *             (market_pair.maker.market, market_pair.maker.trading_pair): market_pair
 *             for market_pair in market_pairs
 */
  { /* enter inner scope */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":136
 *         self._market_pairs = {
 *             (market_pair.maker.market, market_pair.maker.trading_pair): market_pair
 *             for market_pair in market_pairs             # <<<<<<<<<<<<<<
 *         }
 *         self._maker_markets = set([market_pair.maker.market for market_pair in market_pairs])
 */
    if (likely(PyList_CheckExact(__pyx_v_market_pairs)) || PyTuple_CheckExact(__pyx_v_market_pairs)) {
      __pyx_t_5 = __pyx_v_market_pairs; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_market_pairs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 136, __pyx_L8_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 136, __pyx_L8_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 136, __pyx_L8_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_5);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 136, __pyx_L8_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_market_pair, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":135
 * 
 *         self._market_pairs = {
 *             (market_pair.maker.market, market_pair.maker.trading_pair): market_pair             # <<<<<<<<<<<<<<
 *             for market_pair in market_pairs
 *         }
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 135, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_market); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 135, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 135, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 135, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 135, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_3, (PyObject*)__pyx_t_7, (PyObject*)__pyx_7genexpr__pyx_v_market_pair))) __PYX_ERR(0, 135, __pyx_L8_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":136
 *         self._market_pairs = {
 *             (market_pair.maker.market, market_pair.maker.trading_pair): market_pair
 *             for market_pair in market_pairs             # <<<<<<<<<<<<<<
 *         }
 *         self._maker_markets = set([market_pair.maker.market for market_pair in market_pairs])
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_pair); __pyx_7genexpr__pyx_v_market_pair = 0;
    goto __pyx_L11_exit_scope;
    __pyx_L8_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_pair); __pyx_7genexpr__pyx_v_market_pair = 0;
    goto __pyx_L1_error;
    __pyx_L11_exit_scope:;
  } /* exit inner scope */

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":134
 *             raise ValueError(f"order_size_taker_balance_factor must be between 0 and 1.")
 * 
 *         self._market_pairs = {             # <<<<<<<<<<<<<<
 *             (market_pair.maker.market, market_pair.maker.trading_pair): market_pair
 *             for market_pair in market_pairs
 */
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_market_pairs);
  __Pyx_DECREF(__pyx_v_self->_market_pairs);
  __pyx_v_self->_market_pairs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":138
 *             for market_pair in market_pairs
 *         }
 *         self._maker_markets = set([market_pair.maker.market for market_pair in market_pairs])             # <<<<<<<<<<<<<<
 *         self._taker_markets = set([market_pair.taker.market for market_pair in market_pairs])
 *         self._third_market = third_market
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L14_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_v_market_pairs)) || PyTuple_CheckExact(__pyx_v_market_pairs)) {
      __pyx_t_5 = __pyx_v_market_pairs; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_market_pairs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 138, __pyx_L14_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 138, __pyx_L14_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 138, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 138, __pyx_L14_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 138, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_5);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 138, __pyx_L14_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_market_pair, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 138, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_market); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 138, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 138, __pyx_L14_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_market_pair); __pyx_8genexpr1__pyx_v_market_pair = 0;
    goto __pyx_L17_exit_scope;
    __pyx_L14_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_market_pair); __pyx_8genexpr1__pyx_v_market_pair = 0;
    goto __pyx_L1_error;
    __pyx_L17_exit_scope:;
  } /* exit inner scope */
  __pyx_t_5 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_maker_markets);
  __Pyx_DECREF(__pyx_v_self->_maker_markets);
  __pyx_v_self->_maker_markets = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":139
 *         }
 *         self._maker_markets = set([market_pair.maker.market for market_pair in market_pairs])
 *         self._taker_markets = set([market_pair.taker.market for market_pair in market_pairs])             # <<<<<<<<<<<<<<
 *         self._third_market = third_market
 *         self._all_markets_ready = False
 */
  { /* enter inner scope */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L20_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (likely(PyList_CheckExact(__pyx_v_market_pairs)) || PyTuple_CheckExact(__pyx_v_market_pairs)) {
      __pyx_t_3 = __pyx_v_market_pairs; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_market_pairs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 139, __pyx_L20_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_9); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 139, __pyx_L20_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 139, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_9); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 139, __pyx_L20_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 139, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 139, __pyx_L20_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_market_pair, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 139, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_market); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 139, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 139, __pyx_L20_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_market_pair); __pyx_8genexpr2__pyx_v_market_pair = 0;
    goto __pyx_L23_exit_scope;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_market_pair); __pyx_8genexpr2__pyx_v_market_pair = 0;
    goto __pyx_L1_error;
    __pyx_L23_exit_scope:;
  } /* exit inner scope */
  __pyx_t_3 = PySet_New(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_taker_markets);
  __Pyx_DECREF(__pyx_v_self->_taker_markets);
  __pyx_v_self->_taker_markets = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":140
 *         self._maker_markets = set([market_pair.maker.market for market_pair in market_pairs])
 *         self._taker_markets = set([market_pair.taker.market for market_pair in market_pairs])
 *         self._third_market = third_market             # <<<<<<<<<<<<<<
 *         self._all_markets_ready = False
 *         self._min_profitability = min_profitability
 */
  __Pyx_INCREF(__pyx_v_third_market);
  __Pyx_GIVEREF(__pyx_v_third_market);
  __Pyx_GOTREF(__pyx_v_self->_third_market);
  __Pyx_DECREF(__pyx_v_self->_third_market);
  __pyx_v_self->_third_market = __pyx_v_third_market;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":141
 *         self._taker_markets = set([market_pair.taker.market for market_pair in market_pairs])
 *         self._third_market = third_market
 *         self._all_markets_ready = False             # <<<<<<<<<<<<<<
 *         self._min_profitability = min_profitability
 *         self._order_size_taker_volume_factor = order_size_taker_volume_factor
 */
  __pyx_v_self->_all_markets_ready = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":142
 *         self._third_market = third_market
 *         self._all_markets_ready = False
 *         self._min_profitability = min_profitability             # <<<<<<<<<<<<<<
 *         self._order_size_taker_volume_factor = order_size_taker_volume_factor
 *         self._order_size_taker_balance_factor = order_size_taker_balance_factor
 */
  __Pyx_INCREF(__pyx_v_min_profitability);
  __Pyx_GIVEREF(__pyx_v_min_profitability);
  __Pyx_GOTREF(__pyx_v_self->_min_profitability);
  __Pyx_DECREF(__pyx_v_self->_min_profitability);
  __pyx_v_self->_min_profitability = __pyx_v_min_profitability;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":143
 *         self._all_markets_ready = False
 *         self._min_profitability = min_profitability
 *         self._order_size_taker_volume_factor = order_size_taker_volume_factor             # <<<<<<<<<<<<<<
 *         self._order_size_taker_balance_factor = order_size_taker_balance_factor
 *         self._order_amount = order_amount
 */
  __Pyx_INCREF(__pyx_v_order_size_taker_volume_factor);
  __Pyx_GIVEREF(__pyx_v_order_size_taker_volume_factor);
  __Pyx_GOTREF(__pyx_v_self->_order_size_taker_volume_factor);
  __Pyx_DECREF(__pyx_v_self->_order_size_taker_volume_factor);
  __pyx_v_self->_order_size_taker_volume_factor = __pyx_v_order_size_taker_volume_factor;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":144
 *         self._min_profitability = min_profitability
 *         self._order_size_taker_volume_factor = order_size_taker_volume_factor
 *         self._order_size_taker_balance_factor = order_size_taker_balance_factor             # <<<<<<<<<<<<<<
 *         self._order_amount = order_amount
 *         self._order_size_portfolio_ratio_limit = order_size_portfolio_ratio_limit
 */
  __Pyx_INCREF(__pyx_v_order_size_taker_balance_factor);
  __Pyx_GIVEREF(__pyx_v_order_size_taker_balance_factor);
  __Pyx_GOTREF(__pyx_v_self->_order_size_taker_balance_factor);
  __Pyx_DECREF(__pyx_v_self->_order_size_taker_balance_factor);
  __pyx_v_self->_order_size_taker_balance_factor = __pyx_v_order_size_taker_balance_factor;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":145
 *         self._order_size_taker_volume_factor = order_size_taker_volume_factor
 *         self._order_size_taker_balance_factor = order_size_taker_balance_factor
 *         self._order_amount = order_amount             # <<<<<<<<<<<<<<
 *         self._order_size_portfolio_ratio_limit = order_size_portfolio_ratio_limit
 *         self._order_size_maker_balance_factor = order_size_maker_balance_factor
 */
  __Pyx_INCREF(__pyx_v_order_amount);
  __Pyx_GIVEREF(__pyx_v_order_amount);
  __Pyx_GOTREF(__pyx_v_self->_order_amount);
  __Pyx_DECREF(__pyx_v_self->_order_amount);
  __pyx_v_self->_order_amount = __pyx_v_order_amount;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":146
 *         self._order_size_taker_balance_factor = order_size_taker_balance_factor
 *         self._order_amount = order_amount
 *         self._order_size_portfolio_ratio_limit = order_size_portfolio_ratio_limit             # <<<<<<<<<<<<<<
 *         self._order_size_maker_balance_factor = order_size_maker_balance_factor
 *         self._top_depth_tolerance = top_depth_tolerance
 */
  __Pyx_INCREF(__pyx_v_order_size_portfolio_ratio_limit);
  __Pyx_GIVEREF(__pyx_v_order_size_portfolio_ratio_limit);
  __Pyx_GOTREF(__pyx_v_self->_order_size_portfolio_ratio_limit);
  __Pyx_DECREF(__pyx_v_self->_order_size_portfolio_ratio_limit);
  __pyx_v_self->_order_size_portfolio_ratio_limit = __pyx_v_order_size_portfolio_ratio_limit;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":147
 *         self._order_amount = order_amount
 *         self._order_size_portfolio_ratio_limit = order_size_portfolio_ratio_limit
 *         self._order_size_maker_balance_factor = order_size_maker_balance_factor             # <<<<<<<<<<<<<<
 *         self._top_depth_tolerance = top_depth_tolerance
 *         self._top_depth_tolerance_taker = top_depth_tolerance_taker
 */
  __Pyx_INCREF(__pyx_v_order_size_maker_balance_factor);
  __Pyx_GIVEREF(__pyx_v_order_size_maker_balance_factor);
  __Pyx_GOTREF(__pyx_v_self->_order_size_maker_balance_factor);
  __Pyx_DECREF(__pyx_v_self->_order_size_maker_balance_factor);
  __pyx_v_self->_order_size_maker_balance_factor = __pyx_v_order_size_maker_balance_factor;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":148
 *         self._order_size_portfolio_ratio_limit = order_size_portfolio_ratio_limit
 *         self._order_size_maker_balance_factor = order_size_maker_balance_factor
 *         self._top_depth_tolerance = top_depth_tolerance             # <<<<<<<<<<<<<<
 *         self._top_depth_tolerance_taker = top_depth_tolerance_taker
 *         self._cancel_order_threshold = cancel_order_threshold
 */
  __Pyx_INCREF(__pyx_v_top_depth_tolerance);
  __Pyx_GIVEREF(__pyx_v_top_depth_tolerance);
  __Pyx_GOTREF(__pyx_v_self->_top_depth_tolerance);
  __Pyx_DECREF(__pyx_v_self->_top_depth_tolerance);
  __pyx_v_self->_top_depth_tolerance = __pyx_v_top_depth_tolerance;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":149
 *         self._order_size_maker_balance_factor = order_size_maker_balance_factor
 *         self._top_depth_tolerance = top_depth_tolerance
 *         self._top_depth_tolerance_taker = top_depth_tolerance_taker             # <<<<<<<<<<<<<<
 *         self._cancel_order_threshold = cancel_order_threshold
 *         self._anti_hysteresis_timers = {}
 */
  __Pyx_INCREF(__pyx_v_top_depth_tolerance_taker);
  __Pyx_GIVEREF(__pyx_v_top_depth_tolerance_taker);
  __Pyx_GOTREF(__pyx_v_self->_top_depth_tolerance_taker);
  __Pyx_DECREF(__pyx_v_self->_top_depth_tolerance_taker);
  __pyx_v_self->_top_depth_tolerance_taker = __pyx_v_top_depth_tolerance_taker;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":150
 *         self._top_depth_tolerance = top_depth_tolerance
 *         self._top_depth_tolerance_taker = top_depth_tolerance_taker
 *         self._cancel_order_threshold = cancel_order_threshold             # <<<<<<<<<<<<<<
 *         self._anti_hysteresis_timers = {}
 *         self._order_fill_buy_events = {}
 */
  __Pyx_INCREF(__pyx_v_cancel_order_threshold);
  __Pyx_GIVEREF(__pyx_v_cancel_order_threshold);
  __Pyx_GOTREF(__pyx_v_self->_cancel_order_threshold);
  __Pyx_DECREF(__pyx_v_self->_cancel_order_threshold);
  __pyx_v_self->_cancel_order_threshold = __pyx_v_cancel_order_threshold;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":151
 *         self._top_depth_tolerance_taker = top_depth_tolerance_taker
 *         self._cancel_order_threshold = cancel_order_threshold
 *         self._anti_hysteresis_timers = {}             # <<<<<<<<<<<<<<
 *         self._order_fill_buy_events = {}
 *         self._order_fill_sell_events = {}
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_anti_hysteresis_timers);
  __Pyx_DECREF(__pyx_v_self->_anti_hysteresis_timers);
  __pyx_v_self->_anti_hysteresis_timers = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":152
 *         self._cancel_order_threshold = cancel_order_threshold
 *         self._anti_hysteresis_timers = {}
 *         self._order_fill_buy_events = {}             # <<<<<<<<<<<<<<
 *         self._order_fill_sell_events = {}
 *         self._suggested_price_samples = {}
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_order_fill_buy_events);
  __Pyx_DECREF(__pyx_v_self->_order_fill_buy_events);
  __pyx_v_self->_order_fill_buy_events = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":153
 *         self._anti_hysteresis_timers = {}
 *         self._order_fill_buy_events = {}
 *         self._order_fill_sell_events = {}             # <<<<<<<<<<<<<<
 *         self._suggested_price_samples = {}
 *         self._active_order_canceling = active_order_canceling
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_order_fill_sell_events);
  __Pyx_DECREF(__pyx_v_self->_order_fill_sell_events);
  __pyx_v_self->_order_fill_sell_events = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":154
 *         self._order_fill_buy_events = {}
 *         self._order_fill_sell_events = {}
 *         self._suggested_price_samples = {}             # <<<<<<<<<<<<<<
 *         self._active_order_canceling = active_order_canceling
 *         self._anti_hysteresis_duration = anti_hysteresis_duration
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_suggested_price_samples);
  __Pyx_DECREF(__pyx_v_self->_suggested_price_samples);
  __pyx_v_self->_suggested_price_samples = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":155
 *         self._order_fill_sell_events = {}
 *         self._suggested_price_samples = {}
 *         self._active_order_canceling = active_order_canceling             # <<<<<<<<<<<<<<
 *         self._anti_hysteresis_duration = anti_hysteresis_duration
 *         self._filled_order_delay = filled_order_delay
 */
  __pyx_v_self->_active_order_canceling = __pyx_v_active_order_canceling;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":156
 *         self._suggested_price_samples = {}
 *         self._active_order_canceling = active_order_canceling
 *         self._anti_hysteresis_duration = anti_hysteresis_duration             # <<<<<<<<<<<<<<
 *         self._filled_order_delay = filled_order_delay
 *         self._filled_order_delay_seconds = filled_order_delay_seconds
 */
  __pyx_v_self->_anti_hysteresis_duration = __pyx_v_anti_hysteresis_duration;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":157
 *         self._active_order_canceling = active_order_canceling
 *         self._anti_hysteresis_duration = anti_hysteresis_duration
 *         self._filled_order_delay = filled_order_delay             # <<<<<<<<<<<<<<
 *         self._filled_order_delay_seconds = filled_order_delay_seconds
 *         self._filled_order_delay_timer = 0
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_filled_order_delay); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_v_self->_filled_order_delay = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":158
 *         self._anti_hysteresis_duration = anti_hysteresis_duration
 *         self._filled_order_delay = filled_order_delay
 *         self._filled_order_delay_seconds = filled_order_delay_seconds             # <<<<<<<<<<<<<<
 *         self._filled_order_delay_timer = 0
 *         self._logging_options = <int64_t>logging_options
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_filled_order_delay_seconds); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_filled_order_delay_seconds);
  __Pyx_DECREF(__pyx_v_self->_filled_order_delay_seconds);
  __pyx_v_self->_filled_order_delay_seconds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":159
 *         self._filled_order_delay = filled_order_delay
 *         self._filled_order_delay_seconds = filled_order_delay_seconds
 *         self._filled_order_delay_timer = 0             # <<<<<<<<<<<<<<
 *         self._logging_options = <int64_t>logging_options
 *         self._last_timestamp = 0
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(__pyx_v_self->_filled_order_delay_timer);
  __Pyx_DECREF(__pyx_v_self->_filled_order_delay_timer);
  __pyx_v_self->_filled_order_delay_timer = __pyx_int_0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":160
 *         self._filled_order_delay_seconds = filled_order_delay_seconds
 *         self._filled_order_delay_timer = 0
 *         self._logging_options = <int64_t>logging_options             # <<<<<<<<<<<<<<
 *         self._last_timestamp = 0
 *         self._cancel_timer = 0
 */
  __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_v_logging_options); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_v_self->_logging_options = ((int64_t)__pyx_t_10);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":161
 *         self._filled_order_delay_timer = 0
 *         self._logging_options = <int64_t>logging_options
 *         self._last_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._cancel_timer = 0
 *         self._counter = counter
 */
  __pyx_v_self->_last_timestamp = 0.0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":162
 *         self._logging_options = <int64_t>logging_options
 *         self._last_timestamp = 0
 *         self._cancel_timer = 0             # <<<<<<<<<<<<<<
 *         self._counter = counter
 *         self._restore_timer = restore_timer
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(__pyx_v_self->_cancel_timer);
  __Pyx_DECREF(__pyx_v_self->_cancel_timer);
  __pyx_v_self->_cancel_timer = __pyx_int_0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":163
 *         self._last_timestamp = 0
 *         self._cancel_timer = 0
 *         self._counter = counter             # <<<<<<<<<<<<<<
 *         self._restore_timer = restore_timer
 *         self._limit_order_min_expiration = limit_order_min_expiration
 */
  __Pyx_INCREF(__pyx_v_counter);
  __Pyx_GIVEREF(__pyx_v_counter);
  __Pyx_GOTREF(__pyx_v_self->_counter);
  __Pyx_DECREF(__pyx_v_self->_counter);
  __pyx_v_self->_counter = __pyx_v_counter;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":164
 *         self._cancel_timer = 0
 *         self._counter = counter
 *         self._restore_timer = restore_timer             # <<<<<<<<<<<<<<
 *         self._limit_order_min_expiration = limit_order_min_expiration
 *         self._status_report_interval = status_report_interval
 */
  __Pyx_INCREF(__pyx_v_restore_timer);
  __Pyx_GIVEREF(__pyx_v_restore_timer);
  __Pyx_GOTREF(__pyx_v_self->_restore_timer);
  __Pyx_DECREF(__pyx_v_self->_restore_timer);
  __pyx_v_self->_restore_timer = __pyx_v_restore_timer;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":165
 *         self._counter = counter
 *         self._restore_timer = restore_timer
 *         self._limit_order_min_expiration = limit_order_min_expiration             # <<<<<<<<<<<<<<
 *         self._status_report_interval = status_report_interval
 *         self._market_pair_tracker = OrderIDMarketPairTracker()
 */
  __pyx_v_self->_limit_order_min_expiration = __pyx_v_limit_order_min_expiration;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":166
 *         self._restore_timer = restore_timer
 *         self._limit_order_min_expiration = limit_order_min_expiration
 *         self._status_report_interval = status_report_interval             # <<<<<<<<<<<<<<
 *         self._market_pair_tracker = OrderIDMarketPairTracker()
 *         self._adjust_orders_enabled = adjust_order_enabled
 */
  __pyx_v_self->_status_report_interval = __pyx_v_status_report_interval;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":167
 *         self._limit_order_min_expiration = limit_order_min_expiration
 *         self._status_report_interval = status_report_interval
 *         self._market_pair_tracker = OrderIDMarketPairTracker()             # <<<<<<<<<<<<<<
 *         self._adjust_orders_enabled = adjust_order_enabled
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_market_pair_tracker);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_market_pair_tracker));
  __pyx_v_self->_market_pair_tracker = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":168
 *         self._status_report_interval = status_report_interval
 *         self._market_pair_tracker = OrderIDMarketPairTracker()
 *         self._adjust_orders_enabled = adjust_order_enabled             # <<<<<<<<<<<<<<
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate
 *         self._taker_to_maker_base_conversion_rate = taker_to_maker_base_conversion_rate
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_adjust_order_enabled); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_v_self->_adjust_orders_enabled = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":169
 *         self._market_pair_tracker = OrderIDMarketPairTracker()
 *         self._adjust_orders_enabled = adjust_order_enabled
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate             # <<<<<<<<<<<<<<
 *         self._taker_to_maker_base_conversion_rate = taker_to_maker_base_conversion_rate
 *         self._taker_to_maker_quote_conversion_rate = taker_to_maker_quote_conversion_rate
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_use_oracle_conversion_rate); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_v_self->_use_oracle_conversion_rate = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":170
 *         self._adjust_orders_enabled = adjust_order_enabled
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate
 *         self._taker_to_maker_base_conversion_rate = taker_to_maker_base_conversion_rate             # <<<<<<<<<<<<<<
 *         self._taker_to_maker_quote_conversion_rate = taker_to_maker_quote_conversion_rate
 *         self._slippage_buffer = slippage_buffer
 */
  __Pyx_INCREF(__pyx_v_taker_to_maker_base_conversion_rate);
  __Pyx_GIVEREF(__pyx_v_taker_to_maker_base_conversion_rate);
  __Pyx_GOTREF(__pyx_v_self->_taker_to_maker_base_conversion_rate);
  __Pyx_DECREF(__pyx_v_self->_taker_to_maker_base_conversion_rate);
  __pyx_v_self->_taker_to_maker_base_conversion_rate = __pyx_v_taker_to_maker_base_conversion_rate;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":171
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate
 *         self._taker_to_maker_base_conversion_rate = taker_to_maker_base_conversion_rate
 *         self._taker_to_maker_quote_conversion_rate = taker_to_maker_quote_conversion_rate             # <<<<<<<<<<<<<<
 *         self._slippage_buffer = slippage_buffer
 *         self._min_order_amount = min_order_amount
 */
  __Pyx_INCREF(__pyx_v_taker_to_maker_quote_conversion_rate);
  __Pyx_GIVEREF(__pyx_v_taker_to_maker_quote_conversion_rate);
  __Pyx_GOTREF(__pyx_v_self->_taker_to_maker_quote_conversion_rate);
  __Pyx_DECREF(__pyx_v_self->_taker_to_maker_quote_conversion_rate);
  __pyx_v_self->_taker_to_maker_quote_conversion_rate = __pyx_v_taker_to_maker_quote_conversion_rate;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":172
 *         self._taker_to_maker_base_conversion_rate = taker_to_maker_base_conversion_rate
 *         self._taker_to_maker_quote_conversion_rate = taker_to_maker_quote_conversion_rate
 *         self._slippage_buffer = slippage_buffer             # <<<<<<<<<<<<<<
 *         self._min_order_amount = min_order_amount
 *         self._last_conv_rates_logged = 0
 */
  __Pyx_INCREF(__pyx_v_slippage_buffer);
  __Pyx_GIVEREF(__pyx_v_slippage_buffer);
  __Pyx_GOTREF(__pyx_v_self->_slippage_buffer);
  __Pyx_DECREF(__pyx_v_self->_slippage_buffer);
  __pyx_v_self->_slippage_buffer = __pyx_v_slippage_buffer;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":173
 *         self._taker_to_maker_quote_conversion_rate = taker_to_maker_quote_conversion_rate
 *         self._slippage_buffer = slippage_buffer
 *         self._min_order_amount = min_order_amount             # <<<<<<<<<<<<<<
 *         self._last_conv_rates_logged = 0
 *         self._hb_app_notification = hb_app_notification
 */
  __Pyx_INCREF(__pyx_v_min_order_amount);
  __Pyx_GIVEREF(__pyx_v_min_order_amount);
  __Pyx_GOTREF(__pyx_v_self->_min_order_amount);
  __Pyx_DECREF(__pyx_v_self->_min_order_amount);
  __pyx_v_self->_min_order_amount = __pyx_v_min_order_amount;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":174
 *         self._slippage_buffer = slippage_buffer
 *         self._min_order_amount = min_order_amount
 *         self._last_conv_rates_logged = 0             # <<<<<<<<<<<<<<
 *         self._hb_app_notification = hb_app_notification
 *         self._target_base_balance = target_base_balance
 */
  __pyx_v_self->_last_conv_rates_logged = 0.0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":175
 *         self._min_order_amount = min_order_amount
 *         self._last_conv_rates_logged = 0
 *         self._hb_app_notification = hb_app_notification             # <<<<<<<<<<<<<<
 *         self._target_base_balance = target_base_balance
 *         self._slippage_buffer_fix = slippage_buffer_fix
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_hb_app_notification); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_v_self->_hb_app_notification = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":176
 *         self._last_conv_rates_logged = 0
 *         self._hb_app_notification = hb_app_notification
 *         self._target_base_balance = target_base_balance             # <<<<<<<<<<<<<<
 *         self._slippage_buffer_fix = slippage_buffer_fix
 *         self._waiting_time = waiting_time
 */
  __Pyx_INCREF(__pyx_v_target_base_balance);
  __Pyx_GIVEREF(__pyx_v_target_base_balance);
  __Pyx_GOTREF(__pyx_v_self->_target_base_balance);
  __Pyx_DECREF(__pyx_v_self->_target_base_balance);
  __pyx_v_self->_target_base_balance = __pyx_v_target_base_balance;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":177
 *         self._hb_app_notification = hb_app_notification
 *         self._target_base_balance = target_base_balance
 *         self._slippage_buffer_fix = slippage_buffer_fix             # <<<<<<<<<<<<<<
 *         self._waiting_time = waiting_time
 *         self._triangular_arbitrage = triangular_arbitrage
 */
  __Pyx_INCREF(__pyx_v_slippage_buffer_fix);
  __Pyx_GIVEREF(__pyx_v_slippage_buffer_fix);
  __Pyx_GOTREF(__pyx_v_self->_slippage_buffer_fix);
  __Pyx_DECREF(__pyx_v_self->_slippage_buffer_fix);
  __pyx_v_self->_slippage_buffer_fix = __pyx_v_slippage_buffer_fix;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":178
 *         self._target_base_balance = target_base_balance
 *         self._slippage_buffer_fix = slippage_buffer_fix
 *         self._waiting_time = waiting_time             # <<<<<<<<<<<<<<
 *         self._triangular_arbitrage = triangular_arbitrage
 *         self._triangular_switch = triangular_switch
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_waiting_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_waiting_time);
  __Pyx_DECREF(__pyx_v_self->_waiting_time);
  __pyx_v_self->_waiting_time = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":179
 *         self._slippage_buffer_fix = slippage_buffer_fix
 *         self._waiting_time = waiting_time
 *         self._triangular_arbitrage = triangular_arbitrage             # <<<<<<<<<<<<<<
 *         self._triangular_switch = triangular_switch
 *         self._keep_target_balance = keep_target_balance
 */
  __Pyx_INCREF(__pyx_v_triangular_arbitrage);
  __Pyx_GIVEREF(__pyx_v_triangular_arbitrage);
  __Pyx_GOTREF(__pyx_v_self->_triangular_arbitrage);
  __Pyx_DECREF(__pyx_v_self->_triangular_arbitrage);
  __pyx_v_self->_triangular_arbitrage = __pyx_v_triangular_arbitrage;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":180
 *         self._waiting_time = waiting_time
 *         self._triangular_arbitrage = triangular_arbitrage
 *         self._triangular_switch = triangular_switch             # <<<<<<<<<<<<<<
 *         self._keep_target_balance = keep_target_balance
 *         self._fix_counter = fix_counter
 */
  __Pyx_INCREF(__pyx_v_triangular_switch);
  __Pyx_GIVEREF(__pyx_v_triangular_switch);
  __Pyx_GOTREF(__pyx_v_self->_triangular_switch);
  __Pyx_DECREF(__pyx_v_self->_triangular_switch);
  __pyx_v_self->_triangular_switch = __pyx_v_triangular_switch;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":181
 *         self._triangular_arbitrage = triangular_arbitrage
 *         self._triangular_switch = triangular_switch
 *         self._keep_target_balance = keep_target_balance             # <<<<<<<<<<<<<<
 *         self._fix_counter = fix_counter
 *         self._cancel_order_timer = cancel_order_timer
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_keep_target_balance); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_v_self->_keep_target_balance = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":182
 *         self._triangular_switch = triangular_switch
 *         self._keep_target_balance = keep_target_balance
 *         self._fix_counter = fix_counter             # <<<<<<<<<<<<<<
 *         self._cancel_order_timer = cancel_order_timer
 *         self._top_maker_cancel_timer = top_maker_cancel_timer
 */
  __Pyx_INCREF(__pyx_v_fix_counter);
  __Pyx_GIVEREF(__pyx_v_fix_counter);
  __Pyx_GOTREF(__pyx_v_self->_fix_counter);
  __Pyx_DECREF(__pyx_v_self->_fix_counter);
  __pyx_v_self->_fix_counter = __pyx_v_fix_counter;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":183
 *         self._keep_target_balance = keep_target_balance
 *         self._fix_counter = fix_counter
 *         self._cancel_order_timer = cancel_order_timer             # <<<<<<<<<<<<<<
 *         self._top_maker_cancel_timer = top_maker_cancel_timer
 *         self._top_maker_cancel_seconds = top_maker_cancel_seconds
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_cancel_order_timer); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L1_error)
  __pyx_v_self->_cancel_order_timer = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":184
 *         self._fix_counter = fix_counter
 *         self._cancel_order_timer = cancel_order_timer
 *         self._top_maker_cancel_timer = top_maker_cancel_timer             # <<<<<<<<<<<<<<
 *         self._top_maker_cancel_seconds = top_maker_cancel_seconds
 *         self._cancel_order_timer_seconds = cancel_order_timer_seconds
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_top_maker_cancel_timer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_top_maker_cancel_timer);
  __Pyx_DECREF(__pyx_v_self->_top_maker_cancel_timer);
  __pyx_v_self->_top_maker_cancel_timer = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":185
 *         self._cancel_order_timer = cancel_order_timer
 *         self._top_maker_cancel_timer = top_maker_cancel_timer
 *         self._top_maker_cancel_seconds = top_maker_cancel_seconds             # <<<<<<<<<<<<<<
 *         self._cancel_order_timer_seconds = cancel_order_timer_seconds
 *         self._maker_order_ids = []
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_top_maker_cancel_seconds); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_top_maker_cancel_seconds);
  __Pyx_DECREF(__pyx_v_self->_top_maker_cancel_seconds);
  __pyx_v_self->_top_maker_cancel_seconds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":186
 *         self._top_maker_cancel_timer = top_maker_cancel_timer
 *         self._top_maker_cancel_seconds = top_maker_cancel_seconds
 *         self._cancel_order_timer_seconds = cancel_order_timer_seconds             # <<<<<<<<<<<<<<
 *         self._maker_order_ids = []
 *         self._maker_order_update = False
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_cancel_order_timer_seconds); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_cancel_order_timer_seconds);
  __Pyx_DECREF(__pyx_v_self->_cancel_order_timer_seconds);
  __pyx_v_self->_cancel_order_timer_seconds = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":187
 *         self._top_maker_cancel_seconds = top_maker_cancel_seconds
 *         self._cancel_order_timer_seconds = cancel_order_timer_seconds
 *         self._maker_order_ids = []             # <<<<<<<<<<<<<<
 *         self._maker_order_update = False
 *         self._balance_fix_maker = balance_fix_maker
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_maker_order_ids);
  __Pyx_DECREF(__pyx_v_self->_maker_order_ids);
  __pyx_v_self->_maker_order_ids = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":188
 *         self._cancel_order_timer_seconds = cancel_order_timer_seconds
 *         self._maker_order_ids = []
 *         self._maker_order_update = False             # <<<<<<<<<<<<<<
 *         self._balance_fix_maker = balance_fix_maker
 *         all_markets = list(self._maker_markets | self._taker_markets)
 */
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_GOTREF(__pyx_v_self->_maker_order_update);
  __Pyx_DECREF(__pyx_v_self->_maker_order_update);
  __pyx_v_self->_maker_order_update = Py_False;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":189
 *         self._maker_order_ids = []
 *         self._maker_order_update = False
 *         self._balance_fix_maker = balance_fix_maker             # <<<<<<<<<<<<<<
 *         all_markets = list(self._maker_markets | self._taker_markets)
 * 
 */
  __Pyx_INCREF(__pyx_v_balance_fix_maker);
  __Pyx_GIVEREF(__pyx_v_balance_fix_maker);
  __Pyx_GOTREF(__pyx_v_self->_balance_fix_maker);
  __Pyx_DECREF(__pyx_v_self->_balance_fix_maker);
  __pyx_v_self->_balance_fix_maker = __pyx_v_balance_fix_maker;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":190
 *         self._maker_order_update = False
 *         self._balance_fix_maker = balance_fix_maker
 *         all_markets = list(self._maker_markets | self._taker_markets)             # <<<<<<<<<<<<<<
 * 
 *         self.c_add_markets(all_markets)
 */
  __pyx_t_3 = PyNumber_Or(__pyx_v_self->_maker_markets, __pyx_v_self->_taker_markets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_all_markets = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":192
 *         all_markets = list(self._maker_markets | self._taker_markets)
 * 
 *         self.c_add_markets(all_markets)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_add_markets(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_all_markets); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":63
 *         return s_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_pairs: List[CrossExchangeMarketPair],
 *                     third_market: [MarketTradingPairTuple],
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_all_markets);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_market_pair);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":195
 * 
 *     @property
 *     def order_amount(self):             # <<<<<<<<<<<<<<
 *         return self._order_amount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12order_amount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12order_amount_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12order_amount___get__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12order_amount___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":196
 *     @property
 *     def order_amount(self):
 *         return self._order_amount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_order_amount);
  __pyx_r = __pyx_v_self->_order_amount;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":195
 * 
 *     @property
 *     def order_amount(self):             # <<<<<<<<<<<<<<
 *         return self._order_amount
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":199
 * 
 *     @property
 *     def min_profitability(self):             # <<<<<<<<<<<<<<
 *         return self._min_profitability
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17min_profitability_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17min_profitability_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17min_profitability___get__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17min_profitability___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":200
 *     @property
 *     def min_profitability(self):
 *         return self._min_profitability             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_min_profitability);
  __pyx_r = __pyx_v_self->_min_profitability;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":199
 * 
 *     @property
 *     def min_profitability(self):             # <<<<<<<<<<<<<<
 *         return self._min_profitability
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":203
 * 
 *     @property
 *     def active_limit_orders_all(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23active_limit_orders_all_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23active_limit_orders_all_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23active_limit_orders_all___get__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23active_limit_orders_all___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_8genexpr3__pyx_v_ex = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":204
 *     @property
 *     def active_limit_orders_all(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_active_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 204, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 204, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 204, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 204, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 204, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 204, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 204, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 204, __pyx_L5_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 204, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_ex, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_order, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_8genexpr3__pyx_v_ex);
      __Pyx_GIVEREF(__pyx_8genexpr3__pyx_v_ex);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_8genexpr3__pyx_v_ex);
      __Pyx_INCREF(__pyx_8genexpr3__pyx_v_order);
      __Pyx_GIVEREF(__pyx_8genexpr3__pyx_v_order);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_8genexpr3__pyx_v_order);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 204, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_ex); __pyx_8genexpr3__pyx_v_ex = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_order); __pyx_8genexpr3__pyx_v_order = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_ex); __pyx_8genexpr3__pyx_v_ex = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_order); __pyx_8genexpr3__pyx_v_order = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":203
 * 
 *     @property
 *     def active_limit_orders_all(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.active_limit_orders_all.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_ex);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":207
 * 
 *     @property
 *     def active_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders
 *                 if order.client_order_id in self._maker_order_ids]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19active_limit_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19active_limit_orders_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19active_limit_orders___get__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19active_limit_orders___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_8genexpr4__pyx_v_ex = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":208
 *     @property
 *     def active_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders             # <<<<<<<<<<<<<<
 *                 if order.client_order_id in self._maker_order_ids]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_active_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 208, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 208, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 208, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 208, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 208, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 208, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 208, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 208, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 208, __pyx_L5_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 208, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_ex, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_order, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":209
 *     def active_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders
 *                 if order.client_order_id in self._maker_order_ids]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr4__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_self->_maker_order_ids, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 209, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = (__pyx_t_10 != 0);
      if (__pyx_t_11) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":208
 *     @property
 *     def active_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders             # <<<<<<<<<<<<<<
 *                 if order.client_order_id in self._maker_order_ids]
 * 
 */
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_8genexpr4__pyx_v_ex);
        __Pyx_GIVEREF(__pyx_8genexpr4__pyx_v_ex);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_8genexpr4__pyx_v_ex);
        __Pyx_INCREF(__pyx_8genexpr4__pyx_v_order);
        __Pyx_GIVEREF(__pyx_8genexpr4__pyx_v_order);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_8genexpr4__pyx_v_order);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 208, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":209
 *     def active_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders
 *                 if order.client_order_id in self._maker_order_ids]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":208
 *     @property
 *     def active_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders             # <<<<<<<<<<<<<<
 *                 if order.client_order_id in self._maker_order_ids]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_ex); __pyx_8genexpr4__pyx_v_ex = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_order); __pyx_8genexpr4__pyx_v_order = 0;
    goto __pyx_L11_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_ex); __pyx_8genexpr4__pyx_v_ex = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_order); __pyx_8genexpr4__pyx_v_order = 0;
    goto __pyx_L1_error;
    __pyx_L11_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":207
 * 
 *     @property
 *     def active_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return [(ex, order) for ex, order in self._sb_order_tracker.active_limit_orders
 *                 if order.client_order_id in self._maker_order_ids]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.active_limit_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_ex);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":212
 * 
 *     @property
 *     def cached_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return self._sb_order_tracker.shadow_limit_orders
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19cached_limit_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19cached_limit_orders_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19cached_limit_orders___get__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19cached_limit_orders___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":213
 *     @property
 *     def cached_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return self._sb_order_tracker.shadow_limit_orders             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_shadow_limit_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":212
 * 
 *     @property
 *     def cached_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return self._sb_order_tracker.shadow_limit_orders
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.cached_limit_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":216
 * 
 *     @property
 *     def active_bids(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return [(market, limit_order) for market, limit_order in self.active_limit_orders if limit_order.is_buy]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_bids_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_bids_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_bids___get__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_bids___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_8genexpr5__pyx_v_market = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_limit_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":217
 *     @property
 *     def active_bids(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return [(market, limit_order) for market, limit_order in self.active_limit_orders if limit_order.is_buy]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 217, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 217, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 217, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 217, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 217, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 217, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 217, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 217, __pyx_L5_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 217, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_market, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_limit_order, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr5__pyx_v_limit_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 217, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_10) {
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_8genexpr5__pyx_v_market);
        __Pyx_GIVEREF(__pyx_8genexpr5__pyx_v_market);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_8genexpr5__pyx_v_market);
        __Pyx_INCREF(__pyx_8genexpr5__pyx_v_limit_order);
        __Pyx_GIVEREF(__pyx_8genexpr5__pyx_v_limit_order);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_8genexpr5__pyx_v_limit_order);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 217, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_limit_order); __pyx_8genexpr5__pyx_v_limit_order = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_market); __pyx_8genexpr5__pyx_v_market = 0;
    goto __pyx_L11_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_limit_order); __pyx_8genexpr5__pyx_v_limit_order = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_market); __pyx_8genexpr5__pyx_v_market = 0;
    goto __pyx_L1_error;
    __pyx_L11_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":216
 * 
 *     @property
 *     def active_bids(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return [(market, limit_order) for market, limit_order in self.active_limit_orders if limit_order.is_buy]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.active_bids.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_market);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_limit_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":220
 * 
 *     @property
 *     def active_asks(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return [(market, limit_order) for market, limit_order in self.active_limit_orders if not limit_order.is_buy]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_asks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_asks_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_asks___get__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_asks___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_8genexpr6__pyx_v_market = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_limit_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":221
 *     @property
 *     def active_asks(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return [(market, limit_order) for market, limit_order in self.active_limit_orders if not limit_order.is_buy]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 221, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 221, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 221, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 221, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 221, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 221, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 221, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 221, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 221, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 221, __pyx_L5_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 221, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_market, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_limit_order, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr6__pyx_v_limit_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 221, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = ((!__pyx_t_10) != 0);
      if (__pyx_t_11) {
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_8genexpr6__pyx_v_market);
        __Pyx_GIVEREF(__pyx_8genexpr6__pyx_v_market);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_8genexpr6__pyx_v_market);
        __Pyx_INCREF(__pyx_8genexpr6__pyx_v_limit_order);
        __Pyx_GIVEREF(__pyx_8genexpr6__pyx_v_limit_order);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_8genexpr6__pyx_v_limit_order);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 221, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_limit_order); __pyx_8genexpr6__pyx_v_limit_order = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_market); __pyx_8genexpr6__pyx_v_market = 0;
    goto __pyx_L11_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_limit_order); __pyx_8genexpr6__pyx_v_limit_order = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_market); __pyx_8genexpr6__pyx_v_market = 0;
    goto __pyx_L1_error;
    __pyx_L11_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":220
 * 
 *     @property
 *     def active_asks(self) -> List[Tuple[ExchangeBase, LimitOrder]]:             # <<<<<<<<<<<<<<
 *         return [(market, limit_order) for market, limit_order in self.active_limit_orders if not limit_order.is_buy]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.active_asks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_market);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_limit_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":224
 * 
 *     @property
 *     def logging_options(self) -> int:             # <<<<<<<<<<<<<<
 *         return self._logging_options
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options___get__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options___get__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":225
 *     @property
 *     def logging_options(self) -> int:
 *         return self._logging_options             # <<<<<<<<<<<<<<
 * 
 *     @logging_options.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":224
 * 
 *     @property
 *     def logging_options(self) -> int:             # <<<<<<<<<<<<<<
 *         return self._logging_options
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.logging_options.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":228
 * 
 *     @logging_options.setter
 *     def logging_options(self, int64_t logging_options):             # <<<<<<<<<<<<<<
 *         self._logging_options = logging_options
 * 
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_logging_options); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_logging_options) {
  int64_t __pyx_v_logging_options;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_logging_options); {
    __pyx_v_logging_options = __Pyx_PyInt_As_int64_t(__pyx_arg_logging_options); if (unlikely((__pyx_v_logging_options == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.logging_options.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_2__set__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), ((int64_t)__pyx_v_logging_options));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_2__set__(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, int64_t __pyx_v_logging_options) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":229
 *     @logging_options.setter
 *     def logging_options(self, int64_t logging_options):
 *         self._logging_options = logging_options             # <<<<<<<<<<<<<<
 * 
 *     def get_taker_to_maker_conversion_rate(self) -> Tuple[str, Decimal, str, Decimal]:
 */
  __pyx_v_self->_logging_options = __pyx_v_logging_options;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":228
 * 
 *     @logging_options.setter
 *     def logging_options(self, int64_t logging_options):             # <<<<<<<<<<<<<<
 *         self._logging_options = logging_options
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":231
 *         self._logging_options = logging_options
 * 
 *     def get_taker_to_maker_conversion_rate(self) -> Tuple[str, Decimal, str, Decimal]:             # <<<<<<<<<<<<<<
 *         """
 *         Find conversion rates from taker market to maker market
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_5get_taker_to_maker_conversion_rate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_4get_taker_to_maker_conversion_rate[] = "\n        Find conversion rates from taker market to maker market\n        :return: A tuple of quote pair symbol, quote conversion rate source, quote conversion rate,\n        base pair symbol, base conversion rate source, base conversion rate\n        ";
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_5get_taker_to_maker_conversion_rate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_taker_to_maker_conversion_rate (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_4get_taker_to_maker_conversion_rate(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_4get_taker_to_maker_conversion_rate(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_quote_rate = NULL;
  PyObject *__pyx_v_market_pairs = NULL;
  PyObject *__pyx_v_quote_pair = NULL;
  PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_v_base_pair = NULL;
  PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_taker_to_maker_conversion_rate", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":237
 *         base pair symbol, base conversion rate source, base conversion rate
 *         """
 *         quote_rate = Decimal("1")             # <<<<<<<<<<<<<<
 *         market_pairs = list(self._market_pairs.values())[0]
 *         quote_pair = f"{market_pairs.taker.quote_asset}-{market_pairs.maker.quote_asset}"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_quote_rate = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":238
 *         """
 *         quote_rate = Decimal("1")
 *         market_pairs = list(self._market_pairs.values())[0]             # <<<<<<<<<<<<<<
 *         quote_pair = f"{market_pairs.taker.quote_asset}-{market_pairs.maker.quote_asset}"
 *         quote_rate_source = "fixed"
 */
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(0, 238, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Values(__pyx_v_self->_market_pairs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_market_pairs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":239
 *         quote_rate = Decimal("1")
 *         market_pairs = list(self._market_pairs.values())[0]
 *         quote_pair = f"{market_pairs.taker.quote_asset}-{market_pairs.maker.quote_asset}"             # <<<<<<<<<<<<<<
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pairs, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__18);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__18);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__18);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pairs, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_quote_pair = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":240
 *         market_pairs = list(self._market_pairs.values())[0]
 *         quote_pair = f"{market_pairs.taker.quote_asset}-{market_pairs.maker.quote_asset}"
 *         quote_rate_source = "fixed"             # <<<<<<<<<<<<<<
 *         if self._use_oracle_conversion_rate:
 *             if market_pairs.taker.quote_asset != market_pairs.maker.quote_asset:
 */
  __Pyx_INCREF(__pyx_n_u_fixed);
  __pyx_v_quote_rate_source = __pyx_n_u_fixed;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":241
 *         quote_pair = f"{market_pairs.taker.quote_asset}-{market_pairs.maker.quote_asset}"
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:             # <<<<<<<<<<<<<<
 *             if market_pairs.taker.quote_asset != market_pairs.maker.quote_asset:
 *                 quote_rate_source = RateOracle.source.name
 */
  __pyx_t_6 = (__pyx_v_self->_use_oracle_conversion_rate != 0);
  if (__pyx_t_6) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":242
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 *             if market_pairs.taker.quote_asset != market_pairs.maker.quote_asset:             # <<<<<<<<<<<<<<
 *                 quote_rate_source = RateOracle.source.name
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pairs, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pairs, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":243
 *         if self._use_oracle_conversion_rate:
 *             if market_pairs.taker.quote_asset != market_pairs.maker.quote_asset:
 *                 quote_rate_source = RateOracle.source.name             # <<<<<<<<<<<<<<
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)
 *         else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_source); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_quote_rate_source, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":244
 *             if market_pairs.taker.quote_asset != market_pairs.maker.quote_asset:
 *                 quote_rate_source = RateOracle.source.name
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)             # <<<<<<<<<<<<<<
 *         else:
 *             quote_rate = self._taker_to_maker_quote_conversion_rate
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_instance); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_v_quote_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_quote_pair);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_quote_rate, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":242
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 *             if market_pairs.taker.quote_asset != market_pairs.maker.quote_asset:             # <<<<<<<<<<<<<<
 *                 quote_rate_source = RateOracle.source.name
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":241
 *         quote_pair = f"{market_pairs.taker.quote_asset}-{market_pairs.maker.quote_asset}"
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:             # <<<<<<<<<<<<<<
 *             if market_pairs.taker.quote_asset != market_pairs.maker.quote_asset:
 *                 quote_rate_source = RateOracle.source.name
 */
    goto __pyx_L3;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":246
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)
 *         else:
 *             quote_rate = self._taker_to_maker_quote_conversion_rate             # <<<<<<<<<<<<<<
 *         base_rate = Decimal("1")
 *         base_pair = f"{market_pairs.taker.base_asset}-{market_pairs.maker.base_asset}"
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_self->_taker_to_maker_quote_conversion_rate;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_quote_rate, __pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":247
 *         else:
 *             quote_rate = self._taker_to_maker_quote_conversion_rate
 *         base_rate = Decimal("1")             # <<<<<<<<<<<<<<
 *         base_pair = f"{market_pairs.taker.base_asset}-{market_pairs.maker.base_asset}"
 *         base_rate_source = "fixed"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_base_rate = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":248
 *             quote_rate = self._taker_to_maker_quote_conversion_rate
 *         base_rate = Decimal("1")
 *         base_pair = f"{market_pairs.taker.base_asset}-{market_pairs.maker.base_asset}"             # <<<<<<<<<<<<<<
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pairs, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u__18);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__18);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u__18);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pairs, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_base_pair = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":249
 *         base_rate = Decimal("1")
 *         base_pair = f"{market_pairs.taker.base_asset}-{market_pairs.maker.base_asset}"
 *         base_rate_source = "fixed"             # <<<<<<<<<<<<<<
 *         if self._use_oracle_conversion_rate:
 *             if market_pairs.taker.base_asset != market_pairs.maker.base_asset:
 */
  __Pyx_INCREF(__pyx_n_u_fixed);
  __pyx_v_base_rate_source = __pyx_n_u_fixed;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":250
 *         base_pair = f"{market_pairs.taker.base_asset}-{market_pairs.maker.base_asset}"
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:             # <<<<<<<<<<<<<<
 *             if market_pairs.taker.base_asset != market_pairs.maker.base_asset:
 *                 base_rate_source = RateOracle.source.name
 */
  __pyx_t_6 = (__pyx_v_self->_use_oracle_conversion_rate != 0);
  if (__pyx_t_6) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":251
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 *             if market_pairs.taker.base_asset != market_pairs.maker.base_asset:             # <<<<<<<<<<<<<<
 *                 base_rate_source = RateOracle.source.name
 *                 base_rate = RateOracle.get_instance().rate(base_pair)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pairs, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pairs, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_6) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":252
 *         if self._use_oracle_conversion_rate:
 *             if market_pairs.taker.base_asset != market_pairs.maker.base_asset:
 *                 base_rate_source = RateOracle.source.name             # <<<<<<<<<<<<<<
 *                 base_rate = RateOracle.get_instance().rate(base_pair)
 *         else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_source); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_base_rate_source, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":253
 *             if market_pairs.taker.base_asset != market_pairs.maker.base_asset:
 *                 base_rate_source = RateOracle.source.name
 *                 base_rate = RateOracle.get_instance().rate(base_pair)             # <<<<<<<<<<<<<<
 *         else:
 *             base_rate = self._taker_to_maker_base_conversion_rate
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_instance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_base_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_base_pair);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 253, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_base_rate, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":251
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 *             if market_pairs.taker.base_asset != market_pairs.maker.base_asset:             # <<<<<<<<<<<<<<
 *                 base_rate_source = RateOracle.source.name
 *                 base_rate = RateOracle.get_instance().rate(base_pair)
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":250
 *         base_pair = f"{market_pairs.taker.base_asset}-{market_pairs.maker.base_asset}"
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:             # <<<<<<<<<<<<<<
 *             if market_pairs.taker.base_asset != market_pairs.maker.base_asset:
 *                 base_rate_source = RateOracle.source.name
 */
    goto __pyx_L5;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":255
 *                 base_rate = RateOracle.get_instance().rate(base_pair)
 *         else:
 *             base_rate = self._taker_to_maker_base_conversion_rate             # <<<<<<<<<<<<<<
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate
 * 
 */
  /*else*/ {
    __pyx_t_7 = __pyx_v_self->_taker_to_maker_base_conversion_rate;
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_DECREF_SET(__pyx_v_base_rate, __pyx_t_7);
    __pyx_t_7 = 0;
  }
  __pyx_L5:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":256
 *         else:
 *             base_rate = self._taker_to_maker_base_conversion_rate
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate             # <<<<<<<<<<<<<<
 * 
 *     def log_conversion_rates(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_quote_pair);
  __Pyx_GIVEREF(__pyx_v_quote_pair);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_quote_pair);
  __Pyx_INCREF(__pyx_v_quote_rate_source);
  __Pyx_GIVEREF(__pyx_v_quote_rate_source);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_quote_rate_source);
  __Pyx_INCREF(__pyx_v_quote_rate);
  __Pyx_GIVEREF(__pyx_v_quote_rate);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_quote_rate);
  __Pyx_INCREF(__pyx_v_base_pair);
  __Pyx_GIVEREF(__pyx_v_base_pair);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_v_base_pair);
  __Pyx_INCREF(__pyx_v_base_rate_source);
  __Pyx_GIVEREF(__pyx_v_base_rate_source);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_v_base_rate_source);
  __Pyx_INCREF(__pyx_v_base_rate);
  __Pyx_GIVEREF(__pyx_v_base_rate);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_v_base_rate);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":231
 *         self._logging_options = logging_options
 * 
 *     def get_taker_to_maker_conversion_rate(self) -> Tuple[str, Decimal, str, Decimal]:             # <<<<<<<<<<<<<<
 *         """
 *         Find conversion rates from taker market to maker market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_taker_to_maker_conversion_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_market_pairs);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":258
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate
 * 
 *     def log_conversion_rates(self):             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_7log_conversion_rates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_7log_conversion_rates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_conversion_rates (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_6log_conversion_rates(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_6log_conversion_rates(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_quote_pair = NULL;
  PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  PyObject *__pyx_v_base_pair = NULL;
  PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_UCS4 __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("log_conversion_rates", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":260
 *     def log_conversion_rates(self):
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 259, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 259, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 6) < 0) __PYX_ERR(0, 259, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 259, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":259
 * 
 *     def log_conversion_rates(self):
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *             self.get_taker_to_maker_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 */
  __pyx_v_quote_pair = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_base_pair = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_rate_source = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":261
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_quote_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_kp_u__18) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u__18);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_quote_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_u__18) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u__18);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":262
 *             self.get_taker_to_maker_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")             # <<<<<<<<<<<<<<
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = 0;
    __pyx_t_12 = 127;
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_quote_pair, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_12;
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u__19);
    __pyx_t_11 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__19);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_kp_u__19);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_quote_rate_source, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_12;
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_conversion_rate);
    __pyx_t_11 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_conversion_rate);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_kp_u_conversion_rate);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_quote_rate) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_quote_rate);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_12;
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_6, 5, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":261
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":263
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_kp_u__18) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u__18);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_kp_u__18) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u__18);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":264
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")             # <<<<<<<<<<<<<<
 * 
 *     def oracle_status_df(self):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = 0;
    __pyx_t_12 = 127;
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_base_pair, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_12;
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__19);
    __pyx_t_11 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__19);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u__19);
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_base_rate_source, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_12;
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_conversion_rate);
    __pyx_t_11 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_conversion_rate);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_kp_u_conversion_rate);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_base_rate) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_base_rate);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_12;
    __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":263
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":258
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate
 * 
 *     def log_conversion_rates(self):             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.log_conversion_rates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":266
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 *     def oracle_status_df(self):             # <<<<<<<<<<<<<<
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_9oracle_status_df(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_9oracle_status_df(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("oracle_status_df (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_8oracle_status_df(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_8oracle_status_df(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_columns = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_quote_pair = NULL;
  PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  PyObject *__pyx_v_base_pair = NULL;
  PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("oracle_status_df", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":267
 * 
 *     def oracle_status_df(self):
 *         columns = ["Source", "Pair", "Rate"]             # <<<<<<<<<<<<<<
 *         data = []
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_Source);
  __Pyx_GIVEREF(__pyx_n_u_Source);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_Source);
  __Pyx_INCREF(__pyx_n_u_Pair);
  __Pyx_GIVEREF(__pyx_n_u_Pair);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_Pair);
  __Pyx_INCREF(__pyx_n_u_Rate);
  __Pyx_GIVEREF(__pyx_n_u_Rate);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_u_Rate);
  __pyx_v_columns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":268
 *     def oracle_status_df(self):
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":270
 *         data = []
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             data.extend([
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 269, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 269, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 6) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 269, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":269
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *             self.get_taker_to_maker_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 */
  __pyx_v_quote_pair = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_base_pair = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_rate_source = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":271
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             data.extend([
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_quote_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_kp_u__18) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u__18);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_quote_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_u__18) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u__18);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":273
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             data.extend([
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],             # <<<<<<<<<<<<<<
 *             ])
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_quote_rate) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_quote_rate);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_quote_rate_source);
    __Pyx_GIVEREF(__pyx_v_quote_rate_source);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_v_quote_rate_source);
    __Pyx_INCREF(__pyx_v_quote_pair);
    __Pyx_GIVEREF(__pyx_v_quote_pair);
    PyList_SET_ITEM(__pyx_t_7, 1, __pyx_v_quote_pair);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":272
 *             self.get_taker_to_maker_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             data.extend([             # <<<<<<<<<<<<<<
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 *             ])
 */
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_data, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":271
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             data.extend([
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":275
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 *             ])
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             data.extend([
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_kp_u__18) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u__18);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_kp_u__18) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u__18);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_7, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_10) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":277
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 *             data.extend([
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],             # <<<<<<<<<<<<<<
 *             ])
 *         return pd.DataFrame(data=data, columns=columns)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_v_base_rate) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_base_rate);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_base_rate_source);
    __Pyx_GIVEREF(__pyx_v_base_rate_source);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_base_rate_source);
    __Pyx_INCREF(__pyx_v_base_pair);
    __Pyx_GIVEREF(__pyx_v_base_pair);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_base_pair);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":276
 *             ])
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 *             data.extend([             # <<<<<<<<<<<<<<
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],
 *             ])
 */
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":275
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 *             ])
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             data.extend([
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":279
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],
 *             ])
 *         return pd.DataFrame(data=data, columns=columns)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_data, __pyx_v_data) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_columns, __pyx_v_columns) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":266
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 *     def oracle_status_df(self):             # <<<<<<<<<<<<<<
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.oracle_status_df", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_columns);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":283
 * 
 * 
 *     def fix_counter_status_df(self):             # <<<<<<<<<<<<<<
 *           columns = ["Value"]
 *           data = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11fix_counter_status_df(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11fix_counter_status_df(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fix_counter_status_df (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_10fix_counter_status_df(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_10fix_counter_status_df(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_columns = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fix_counter_status_df", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":284
 * 
 *     def fix_counter_status_df(self):
 *           columns = ["Value"]             # <<<<<<<<<<<<<<
 *           data = []
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_Value);
  __Pyx_GIVEREF(__pyx_n_u_Value);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_Value);
  __pyx_v_columns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":285
 *     def fix_counter_status_df(self):
 *           columns = ["Value"]
 *           data = []             # <<<<<<<<<<<<<<
 * 
 *           data.extend([self._fix_counter])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":287
 *           data = []
 * 
 *           data.extend([self._fix_counter])             # <<<<<<<<<<<<<<
 * 
 *           return pd.DataFrame(data=data, columns=columns)
 */
  __pyx_t_2 = __Pyx_PyList_Append(__pyx_v_data, __pyx_v_self->_fix_counter); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 287, __pyx_L1_error)

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":289
 *           data.extend([self._fix_counter])
 * 
 *           return pd.DataFrame(data=data, columns=columns)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_data, __pyx_v_data) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_columns, __pyx_v_columns) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":283
 * 
 * 
 *     def fix_counter_status_df(self):             # <<<<<<<<<<<<<<
 *           columns = ["Value"]
 *           data = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.fix_counter_status_df", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_columns);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":292
 * 
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list lines = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_13format_status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_13format_status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("format_status (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12format_status(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12format_status(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_lines = 0;
  PyObject *__pyx_v_warning_lines = 0;
  PyObject *__pyx_v_tracked_maker_orders = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_typed_limit_order = 0;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_limit_order = NULL;
  PyObject *__pyx_v_market_pair = NULL;
  PyObject *__pyx_v_markets_df = NULL;
  PyObject *__pyx_v_oracle_df = NULL;
  PyObject *__pyx_v_fix_counter_df = NULL;
  PyObject *__pyx_v_assets_df = NULL;
  PyObject *__pyx_v_limit_orders = NULL;
  PyObject *__pyx_v_bid = NULL;
  PyObject *__pyx_v_ask = NULL;
  PyObject *__pyx_v_mid_price = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_v_df_lines = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr9__pyx_v_line = NULL;
  PyObject *__pyx_9genexpr10__pyx_v_line = NULL;
  PyObject *__pyx_9genexpr11__pyx_v_line = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("format_status", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":294
 *     def format_status(self) -> str:
 *         cdef:
 *             list lines = []             # <<<<<<<<<<<<<<
 *             list warning_lines = []
 *             dict tracked_maker_orders = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lines = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":295
 *         cdef:
 *             list lines = []
 *             list warning_lines = []             # <<<<<<<<<<<<<<
 *             dict tracked_maker_orders = {}
 *             LimitOrder typed_limit_order
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_warning_lines = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":296
 *             list lines = []
 *             list warning_lines = []
 *             dict tracked_maker_orders = {}             # <<<<<<<<<<<<<<
 *             LimitOrder typed_limit_order
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tracked_maker_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":301
 *         # Go through the currently open limit orders, and group them by market pair.
 *         # add if statement that shows the maker limit orders when maker fix order is not tru, show self.active_limit_orders_all when it is activ
 *         for _, limit_order in self.active_limit_orders_all:             # <<<<<<<<<<<<<<
 *             typed_limit_order = limit_order
 *             market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(typed_limit_order.client_order_id)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_limit_orders_all); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 301, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 301, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 301, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 301, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 301, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 301, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_limit_order, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":302
 *         # add if statement that shows the maker limit orders when maker fix order is not tru, show self.active_limit_orders_all when it is activ
 *         for _, limit_order in self.active_limit_orders_all:
 *             typed_limit_order = limit_order             # <<<<<<<<<<<<<<
 *             market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(typed_limit_order.client_order_id)
 *             if market_pair not in tracked_maker_orders:
 */
    if (!(likely(((__pyx_v_limit_order) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_limit_order, __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder))))) __PYX_ERR(0, 302, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_limit_order;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_typed_limit_order, ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":303
 *         for _, limit_order in self.active_limit_orders_all:
 *             typed_limit_order = limit_order
 *             market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(typed_limit_order.client_order_id)             # <<<<<<<<<<<<<<
 *             if market_pair not in tracked_maker_orders:
 *                 tracked_maker_orders[market_pair] = {typed_limit_order.client_order_id: typed_limit_order}
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_typed_limit_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 303, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_v_self->_market_pair_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->_market_pair_tracker, ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_market_pair, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":304
 *             typed_limit_order = limit_order
 *             market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(typed_limit_order.client_order_id)
 *             if market_pair not in tracked_maker_orders:             # <<<<<<<<<<<<<<
 *                 tracked_maker_orders[market_pair] = {typed_limit_order.client_order_id: typed_limit_order}
 *             else:
 */
    __pyx_t_9 = (__Pyx_PyDict_ContainsTF(__pyx_v_market_pair, __pyx_v_tracked_maker_orders, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":305
 *             market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(typed_limit_order.client_order_id)
 *             if market_pair not in tracked_maker_orders:
 *                 tracked_maker_orders[market_pair] = {typed_limit_order.client_order_id: typed_limit_order}             # <<<<<<<<<<<<<<
 *             else:
 *                 tracked_maker_orders[market_pair][typed_limit_order.client_order_id] = typed_limit_order
 */
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 305, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_typed_limit_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_6, __pyx_t_1, ((PyObject *)__pyx_v_typed_limit_order)) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(PyDict_SetItem(__pyx_v_tracked_maker_orders, __pyx_v_market_pair, __pyx_t_6) < 0)) __PYX_ERR(0, 305, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":304
 *             typed_limit_order = limit_order
 *             market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(typed_limit_order.client_order_id)
 *             if market_pair not in tracked_maker_orders:             # <<<<<<<<<<<<<<
 *                 tracked_maker_orders[market_pair] = {typed_limit_order.client_order_id: typed_limit_order}
 *             else:
 */
      goto __pyx_L7;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":307
 *                 tracked_maker_orders[market_pair] = {typed_limit_order.client_order_id: typed_limit_order}
 *             else:
 *                 tracked_maker_orders[market_pair][typed_limit_order.client_order_id] = typed_limit_order             # <<<<<<<<<<<<<<
 * 
 *         for market_pair in self._market_pairs.values():
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_tracked_maker_orders, __pyx_v_market_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_typed_limit_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_t_1, ((PyObject *)__pyx_v_typed_limit_order)) < 0)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":301
 *         # Go through the currently open limit orders, and group them by market pair.
 *         # add if statement that shows the maker limit orders when maker fix order is not tru, show self.active_limit_orders_all when it is activ
 *         for _, limit_order in self.active_limit_orders_all:             # <<<<<<<<<<<<<<
 *             typed_limit_order = limit_order
 *             market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(typed_limit_order.client_order_id)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":309
 *                 tracked_maker_orders[market_pair][typed_limit_order.client_order_id] = typed_limit_order
 * 
 *         for market_pair in self._market_pairs.values():             # <<<<<<<<<<<<<<
 *             warning_lines.extend(self.network_warning([market_pair.maker, market_pair.taker]))
 * 
 */
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(0, 309, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_self->_market_pairs, 1, __pyx_n_s_values, (&__pyx_t_11), (&__pyx_t_12)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_13 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_11, &__pyx_t_3, NULL, &__pyx_t_1, NULL, __pyx_t_12);
    if (unlikely(__pyx_t_13 == 0)) break;
    if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_market_pair, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":310
 * 
 *         for market_pair in self._market_pairs.values():
 *             warning_lines.extend(self.network_warning([market_pair.maker, market_pair.taker]))             # <<<<<<<<<<<<<<
 * 
 *             markets_df = self.market_status_data_frame([market_pair.maker, market_pair.taker])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_network_warning); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = PyList_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_14);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_warning_lines, __pyx_t_1); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":312
 *             warning_lines.extend(self.network_warning([market_pair.maker, market_pair.taker]))
 * 
 *             markets_df = self.market_status_data_frame([market_pair.maker, market_pair.taker])             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  Markets:"] +
 *                          ["    " + line for line in str(markets_df).split("\n")])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_status_data_frame); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_14);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __pyx_t_14 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_markets_df, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":313
 * 
 *             markets_df = self.market_status_data_frame([market_pair.maker, market_pair.taker])
 *             lines.extend(["", "  Markets:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(markets_df).split("\n")])
 * 
 */
    __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_u__20);
    __Pyx_GIVEREF(__pyx_kp_u__20);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__20);
    __Pyx_INCREF(__pyx_kp_u_Markets);
    __Pyx_GIVEREF(__pyx_kp_u_Markets);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_Markets);
    { /* enter inner scope */

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":314
 *             markets_df = self.market_status_data_frame([market_pair.maker, market_pair.taker])
 *             lines.extend(["", "  Markets:"] +
 *                          ["    " + line for line in str(markets_df).split("\n")])             # <<<<<<<<<<<<<<
 * 
 *             oracle_df = self.oracle_status_df()
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 314, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_markets_df); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 314, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = PyUnicode_Split(((PyObject*)__pyx_t_5), __pyx_kp_u__21, -1L); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __pyx_t_7; __Pyx_INCREF(__pyx_t_5); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_16); __Pyx_INCREF(__pyx_t_7); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 314, __pyx_L12_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_line, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_u__22, __pyx_8genexpr7__pyx_v_line); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 314, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line); __pyx_8genexpr7__pyx_v_line = 0;
      goto __pyx_L15_exit_scope;
      __pyx_L12_error:;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line); __pyx_8genexpr7__pyx_v_line = 0;
      goto __pyx_L1_error;
      __pyx_L15_exit_scope:;
    } /* exit inner scope */

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":313
 * 
 *             markets_df = self.market_status_data_frame([market_pair.maker, market_pair.taker])
 *             lines.extend(["", "  Markets:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(markets_df).split("\n")])
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_5); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":316
 *                          ["    " + line for line in str(markets_df).split("\n")])
 * 
 *             oracle_df = self.oracle_status_df()             # <<<<<<<<<<<<<<
 * 
 *             fix_counter_df = self.fix_counter_status_df()
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_oracle_status_df); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_oracle_df, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":318
 *             oracle_df = self.oracle_status_df()
 * 
 *             fix_counter_df = self.fix_counter_status_df()             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  Balance fix counter:"] +
 *                          ["    " + line for line in str(fix_counter_df).split("\n")])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fix_counter_status_df); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fix_counter_df, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":319
 * 
 *             fix_counter_df = self.fix_counter_status_df()
 *             lines.extend(["", "  Balance fix counter:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(fix_counter_df).split("\n")])
 * 
 */
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_kp_u__20);
    __Pyx_GIVEREF(__pyx_kp_u__20);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u__20);
    __Pyx_INCREF(__pyx_kp_u_Balance_fix_counter);
    __Pyx_GIVEREF(__pyx_kp_u_Balance_fix_counter);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_Balance_fix_counter);
    { /* enter inner scope */

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":320
 *             fix_counter_df = self.fix_counter_status_df()
 *             lines.extend(["", "  Balance fix counter:"] +
 *                          ["    " + line for line in str(fix_counter_df).split("\n")])             # <<<<<<<<<<<<<<
 * 
 *             if not oracle_df.empty:
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_fix_counter_df); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyUnicode_Split(((PyObject*)__pyx_t_1), __pyx_kp_u__21, -1L); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 320, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_t_7; __Pyx_INCREF(__pyx_t_1); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_16); __Pyx_INCREF(__pyx_t_7); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 320, __pyx_L18_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 320, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_line, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_u__22, __pyx_8genexpr8__pyx_v_line); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 320, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 320, __pyx_L18_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_line); __pyx_8genexpr8__pyx_v_line = 0;
      goto __pyx_L21_exit_scope;
      __pyx_L18_error:;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_line); __pyx_8genexpr8__pyx_v_line = 0;
      goto __pyx_L1_error;
      __pyx_L21_exit_scope:;
    } /* exit inner scope */

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":319
 * 
 *             fix_counter_df = self.fix_counter_status_df()
 *             lines.extend(["", "  Balance fix counter:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(fix_counter_df).split("\n")])
 * 
 */
    __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_1); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":322
 *                          ["    " + line for line in str(fix_counter_df).split("\n")])
 * 
 *             if not oracle_df.empty:             # <<<<<<<<<<<<<<
 *                 lines.extend(["", "  Rate conversion:"] +
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_oracle_df, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = ((!__pyx_t_10) != 0);
    if (__pyx_t_9) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":323
 * 
 *             if not oracle_df.empty:
 *                 lines.extend(["", "  Rate conversion:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 * 
 */
      __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u__20);
      __Pyx_GIVEREF(__pyx_kp_u__20);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__20);
      __Pyx_INCREF(__pyx_kp_u_Rate_conversion);
      __Pyx_GIVEREF(__pyx_kp_u_Rate_conversion);
      PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_Rate_conversion);
      { /* enter inner scope */

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":324
 *             if not oracle_df.empty:
 *                 lines.extend(["", "  Rate conversion:"] +
 *                              ["    " + line for line in str(oracle_df).split("\n")])             # <<<<<<<<<<<<<<
 * 
 *             assets_df = self.wallet_balance_data_frame([market_pair.maker, market_pair.taker])
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 324, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_oracle_df); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 324, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PyUnicode_Split(((PyObject*)__pyx_t_5), __pyx_kp_u__21, -1L); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 324, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __pyx_t_7; __Pyx_INCREF(__pyx_t_5); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_16); __Pyx_INCREF(__pyx_t_7); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 324, __pyx_L25_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 324, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
          __Pyx_XDECREF_SET(__pyx_8genexpr9__pyx_v_line, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_kp_u__22, __pyx_8genexpr9__pyx_v_line); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 324, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 324, __pyx_L25_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_line); __pyx_8genexpr9__pyx_v_line = 0;
        goto __pyx_L28_exit_scope;
        __pyx_L25_error:;
        __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_line); __pyx_8genexpr9__pyx_v_line = 0;
        goto __pyx_L1_error;
        __pyx_L28_exit_scope:;
      } /* exit inner scope */

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":323
 * 
 *             if not oracle_df.empty:
 *                 lines.extend(["", "  Rate conversion:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 * 
 */
      __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_5); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 323, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":322
 *                          ["    " + line for line in str(fix_counter_df).split("\n")])
 * 
 *             if not oracle_df.empty:             # <<<<<<<<<<<<<<
 *                 lines.extend(["", "  Rate conversion:"] +
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":326
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 * 
 *             assets_df = self.wallet_balance_data_frame([market_pair.maker, market_pair.taker])             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  Assets:"] +
 *                          ["    " + line for line in str(assets_df).split("\n")])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wallet_balance_data_frame); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = PyList_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_14);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_assets_df, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":327
 * 
 *             assets_df = self.wallet_balance_data_frame([market_pair.maker, market_pair.taker])
 *             lines.extend(["", "  Assets:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(assets_df).split("\n")])
 * 
 */
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_kp_u__20);
    __Pyx_GIVEREF(__pyx_kp_u__20);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u__20);
    __Pyx_INCREF(__pyx_kp_u_Assets);
    __Pyx_GIVEREF(__pyx_kp_u_Assets);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_Assets);
    { /* enter inner scope */

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":328
 *             assets_df = self.wallet_balance_data_frame([market_pair.maker, market_pair.taker])
 *             lines.extend(["", "  Assets:"] +
 *                          ["    " + line for line in str(assets_df).split("\n")])             # <<<<<<<<<<<<<<
 * 
 *             # See if there're any open orders.
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 328, __pyx_L31_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_14 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_assets_df); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 328, __pyx_L31_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_7 = PyUnicode_Split(((PyObject*)__pyx_t_14), __pyx_kp_u__21, -1L); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 328, __pyx_L31_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __pyx_t_7; __Pyx_INCREF(__pyx_t_14); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_14)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_16); __Pyx_INCREF(__pyx_t_7); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 328, __pyx_L31_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_14, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 328, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_XDECREF_SET(__pyx_9genexpr10__pyx_v_line, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_kp_u__22, __pyx_9genexpr10__pyx_v_line); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 328, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 328, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_line); __pyx_9genexpr10__pyx_v_line = 0;
      goto __pyx_L34_exit_scope;
      __pyx_L31_error:;
      __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_line); __pyx_9genexpr10__pyx_v_line = 0;
      goto __pyx_L1_error;
      __pyx_L34_exit_scope:;
    } /* exit inner scope */

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":327
 * 
 *             assets_df = self.wallet_balance_data_frame([market_pair.maker, market_pair.taker])
 *             lines.extend(["", "  Assets:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(assets_df).split("\n")])
 * 
 */
    __pyx_t_14 = PyNumber_Add(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_14); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":331
 * 
 *             # See if there're any open orders.
 *             if market_pair in tracked_maker_orders and len(tracked_maker_orders[market_pair]) > 0:             # <<<<<<<<<<<<<<
 *                 limit_orders = list(tracked_maker_orders[market_pair].values())
 *                 bid, ask = self.c_get_top_bid_ask(market_pair)
 */
    __pyx_t_10 = (__Pyx_PyDict_ContainsTF(__pyx_v_market_pair, __pyx_v_tracked_maker_orders, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 331, __pyx_L1_error)
    __pyx_t_17 = (__pyx_t_10 != 0);
    if (__pyx_t_17) {
    } else {
      __pyx_t_9 = __pyx_t_17;
      goto __pyx_L36_bool_binop_done;
    }
    __pyx_t_14 = __Pyx_PyDict_GetItem(__pyx_v_tracked_maker_orders, __pyx_v_market_pair); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_16 = PyObject_Length(__pyx_t_14); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_17 = ((__pyx_t_16 > 0) != 0);
    __pyx_t_9 = __pyx_t_17;
    __pyx_L36_bool_binop_done:;
    if (__pyx_t_9) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":332
 *             # See if there're any open orders.
 *             if market_pair in tracked_maker_orders and len(tracked_maker_orders[market_pair]) > 0:
 *                 limit_orders = list(tracked_maker_orders[market_pair].values())             # <<<<<<<<<<<<<<
 *                 bid, ask = self.c_get_top_bid_ask(market_pair)
 *                 mid_price = (bid + ask)/2
 */
      __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_tracked_maker_orders, __pyx_v_market_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_values); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_14 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PySequence_List(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF_SET(__pyx_v_limit_orders, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":333
 *             if market_pair in tracked_maker_orders and len(tracked_maker_orders[market_pair]) > 0:
 *                 limit_orders = list(tracked_maker_orders[market_pair].values())
 *                 bid, ask = self.c_get_top_bid_ask(market_pair)             # <<<<<<<<<<<<<<
 *                 mid_price = (bid + ask)/2
 *                 df = LimitOrder.to_pandas(limit_orders, mid_price)
 */
      __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_top_bid_ask(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (likely(__pyx_t_5 != Py_None)) {
        PyObject* sequence = __pyx_t_5;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 333, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_14 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 333, __pyx_L1_error)
      }
      __Pyx_XDECREF_SET(__pyx_v_bid, __pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ask, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":334
 *                 limit_orders = list(tracked_maker_orders[market_pair].values())
 *                 bid, ask = self.c_get_top_bid_ask(market_pair)
 *                 mid_price = (bid + ask)/2             # <<<<<<<<<<<<<<
 *                 df = LimitOrder.to_pandas(limit_orders, mid_price)
 *                 df_lines = str(df).split("\n")
 */
      __pyx_t_5 = PyNumber_Add(__pyx_v_bid, __pyx_v_ask); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_5, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_mid_price, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":335
 *                 bid, ask = self.c_get_top_bid_ask(market_pair)
 *                 mid_price = (bid + ask)/2
 *                 df = LimitOrder.to_pandas(limit_orders, mid_price)             # <<<<<<<<<<<<<<
 *                 df_lines = str(df).split("\n")
 *                 lines.extend(["", "  Active orders:"] +
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder), __pyx_n_s_to_pandas); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_v_limit_orders, __pyx_v_mid_price};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_v_limit_orders, __pyx_v_mid_price};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_14) {
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_14); __pyx_t_14 = NULL;
        }
        __Pyx_INCREF(__pyx_v_limit_orders);
        __Pyx_GIVEREF(__pyx_v_limit_orders);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_13, __pyx_v_limit_orders);
        __Pyx_INCREF(__pyx_v_mid_price);
        __Pyx_GIVEREF(__pyx_v_mid_price);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_13, __pyx_v_mid_price);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_df, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":336
 *                 mid_price = (bid + ask)/2
 *                 df = LimitOrder.to_pandas(limit_orders, mid_price)
 *                 df_lines = str(df).split("\n")             # <<<<<<<<<<<<<<
 *                 lines.extend(["", "  Active orders:"] +
 *                              ["    " + line for line in df_lines])
 */
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_df); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyUnicode_Split(((PyObject*)__pyx_t_6), __pyx_kp_u__21, -1L); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_df_lines, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":337
 *                 df = LimitOrder.to_pandas(limit_orders, mid_price)
 *                 df_lines = str(df).split("\n")
 *                 lines.extend(["", "  Active orders:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in df_lines])
 *             else:
 */
      __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_kp_u__20);
      __Pyx_GIVEREF(__pyx_kp_u__20);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u__20);
      __Pyx_INCREF(__pyx_kp_u_Active_orders);
      __Pyx_GIVEREF(__pyx_kp_u_Active_orders);
      PyList_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_Active_orders);
      { /* enter inner scope */

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":338
 *                 df_lines = str(df).split("\n")
 *                 lines.extend(["", "  Active orders:"] +
 *                              ["    " + line for line in df_lines])             # <<<<<<<<<<<<<<
 *             else:
 *                 lines.extend(["", "  No active maker orders."])
 */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 338, __pyx_L40_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (likely(PyList_CheckExact(__pyx_v_df_lines)) || PyTuple_CheckExact(__pyx_v_df_lines)) {
          __pyx_t_7 = __pyx_v_df_lines; __Pyx_INCREF(__pyx_t_7); __pyx_t_16 = 0;
          __pyx_t_4 = NULL;
        } else {
          __pyx_t_16 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_df_lines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 338, __pyx_L40_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L40_error)
        }
        for (;;) {
          if (likely(!__pyx_t_4)) {
            if (likely(PyList_CheckExact(__pyx_t_7))) {
              if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_16); __Pyx_INCREF(__pyx_t_14); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 338, __pyx_L40_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_7, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 338, __pyx_L40_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            } else {
              if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_16); __Pyx_INCREF(__pyx_t_14); __pyx_t_16++; if (unlikely(0 < 0)) __PYX_ERR(0, 338, __pyx_L40_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_7, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 338, __pyx_L40_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            }
          } else {
            __pyx_t_14 = __pyx_t_4(__pyx_t_7);
            if (unlikely(!__pyx_t_14)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 338, __pyx_L40_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_14);
          }
          __Pyx_XDECREF_SET(__pyx_9genexpr11__pyx_v_line, __pyx_t_14);
          __pyx_t_14 = 0;
          __pyx_t_14 = PyNumber_Add(__pyx_kp_u__22, __pyx_9genexpr11__pyx_v_line); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 338, __pyx_L40_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 338, __pyx_L40_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_line); __pyx_9genexpr11__pyx_v_line = 0;
        goto __pyx_L43_exit_scope;
        __pyx_L40_error:;
        __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_line); __pyx_9genexpr11__pyx_v_line = 0;
        goto __pyx_L1_error;
        __pyx_L43_exit_scope:;
      } /* exit inner scope */

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":337
 *                 df = LimitOrder.to_pandas(limit_orders, mid_price)
 *                 df_lines = str(df).split("\n")
 *                 lines.extend(["", "  Active orders:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in df_lines])
 *             else:
 */
      __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_7); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":331
 * 
 *             # See if there're any open orders.
 *             if market_pair in tracked_maker_orders and len(tracked_maker_orders[market_pair]) > 0:             # <<<<<<<<<<<<<<
 *                 limit_orders = list(tracked_maker_orders[market_pair].values())
 *                 bid, ask = self.c_get_top_bid_ask(market_pair)
 */
      goto __pyx_L35;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":340
 *                              ["    " + line for line in df_lines])
 *             else:
 *                 lines.extend(["", "  No active maker orders."])             # <<<<<<<<<<<<<<
 * 
 *             warning_lines.extend(self.balance_warning([market_pair.maker, market_pair.taker]))
 */
    /*else*/ {
      __pyx_t_15 = __Pyx_ListComp_Append(__pyx_v_lines, __pyx_kp_u__20); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 340, __pyx_L1_error)
      __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_lines, __pyx_kp_u_No_active_maker_orders); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 340, __pyx_L1_error)
      (void)((__pyx_t_15 | __pyx_t_18));
    }
    __pyx_L35:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":342
 *                 lines.extend(["", "  No active maker orders."])
 * 
 *             warning_lines.extend(self.balance_warning([market_pair.maker, market_pair.taker]))             # <<<<<<<<<<<<<<
 * 
 *         if len(warning_lines) > 0:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_balance_warning); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_14);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_14);
    __pyx_t_5 = 0;
    __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_14, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_18 = __Pyx_PyList_Extend(__pyx_v_warning_lines, __pyx_t_7); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":344
 *             warning_lines.extend(self.balance_warning([market_pair.maker, market_pair.taker]))
 * 
 *         if len(warning_lines) > 0:             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  *** WARNINGS ***"] + warning_lines)
 * 
 */
  __pyx_t_11 = PyList_GET_SIZE(__pyx_v_warning_lines); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_11 > 0) != 0);
  if (__pyx_t_9) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":345
 * 
 *         if len(warning_lines) > 0:
 *             lines.extend(["", "  *** WARNINGS ***"] + warning_lines)             # <<<<<<<<<<<<<<
 * 
 *         return "\n".join(lines)
 */
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_u__20);
    __Pyx_GIVEREF(__pyx_kp_u__20);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u__20);
    __Pyx_INCREF(__pyx_kp_u_WARNINGS);
    __Pyx_GIVEREF(__pyx_kp_u_WARNINGS);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_WARNINGS);
    __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_v_warning_lines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_18 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_7); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":344
 *             warning_lines.extend(self.balance_warning([market_pair.maker, market_pair.taker]))
 * 
 *         if len(warning_lines) > 0:             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  *** WARNINGS ***"] + warning_lines)
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":347
 *             lines.extend(["", "  *** WARNINGS ***"] + warning_lines)
 * 
 *         return "\n".join(lines)             # <<<<<<<<<<<<<<
 * 
 *     # The following exposed Python functions are meant for unit tests
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = PyUnicode_Join(__pyx_kp_u__21, __pyx_v_lines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":292
 * 
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list lines = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.format_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_warning_lines);
  __Pyx_XDECREF(__pyx_v_tracked_maker_orders);
  __Pyx_XDECREF((PyObject *)__pyx_v_typed_limit_order);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_limit_order);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_v_markets_df);
  __Pyx_XDECREF(__pyx_v_oracle_df);
  __Pyx_XDECREF(__pyx_v_fix_counter_df);
  __Pyx_XDECREF(__pyx_v_assets_df);
  __Pyx_XDECREF(__pyx_v_limit_orders);
  __Pyx_XDECREF(__pyx_v_bid);
  __Pyx_XDECREF(__pyx_v_ask);
  __Pyx_XDECREF(__pyx_v_mid_price);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_df_lines);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_line);
  __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_line);
  __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_line);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":352
 *     # ---------------------------------------------------------------
 * 
 *     def get_order_size_after_portfolio_ratio_limit(self, market_pair: CrossExchangeMarketPair) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15get_order_size_after_portfolio_ratio_limit(PyObject *__pyx_v_self, PyObject *__pyx_v_market_pair); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15get_order_size_after_portfolio_ratio_limit(PyObject *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_order_size_after_portfolio_ratio_limit (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_14get_order_size_after_portfolio_ratio_limit(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_market_pair));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_14get_order_size_after_portfolio_ratio_limit(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_order_size_after_portfolio_ratio_limit", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":353
 * 
 *     def get_order_size_after_portfolio_ratio_limit(self, market_pair: CrossExchangeMarketPair) -> Decimal:
 *         return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)             # <<<<<<<<<<<<<<
 * 
 *     def get_market_making_size(self, market_pair: CrossExchangeMarketPair, bint is_bid) -> Decimal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_order_size_after_portfolio_ratio_limit(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":352
 *     # ---------------------------------------------------------------
 * 
 *     def get_order_size_after_portfolio_ratio_limit(self, market_pair: CrossExchangeMarketPair) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_order_size_after_portfolio_ratio_limit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":355
 *         return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)
 * 
 *     def get_market_making_size(self, market_pair: CrossExchangeMarketPair, bint is_bid) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_market_making_size(market_pair, is_bid)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17get_market_making_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17get_market_making_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_market_pair = 0;
  int __pyx_v_is_bid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_market_making_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_is_bid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_market_making_size", 1, 2, 2, 1); __PYX_ERR(0, 355, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_market_making_size") < 0)) __PYX_ERR(0, 355, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_is_bid = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_is_bid == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_market_making_size", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 355, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_market_making_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_16get_market_making_size(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_is_bid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_16get_market_making_size(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_market_making_size", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":356
 * 
 *     def get_market_making_size(self, market_pair: CrossExchangeMarketPair, bint is_bid) -> Decimal:
 *         return self.c_get_market_making_size(market_pair, is_bid)             # <<<<<<<<<<<<<<
 * 
 *     def get_market_making_price(self, market_pair: CrossExchangeMarketPair, bint is_bid, size: Decimal) -> Decimal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_making_size(__pyx_v_self, __pyx_v_market_pair, __pyx_v_is_bid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":355
 *         return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)
 * 
 *     def get_market_making_size(self, market_pair: CrossExchangeMarketPair, bint is_bid) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_market_making_size(market_pair, is_bid)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_market_making_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":358
 *         return self.c_get_market_making_size(market_pair, is_bid)
 * 
 *     def get_market_making_price(self, market_pair: CrossExchangeMarketPair, bint is_bid, size: Decimal) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_market_making_price(market_pair, is_bid, size)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19get_market_making_price(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19get_market_making_price(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_market_pair = 0;
  int __pyx_v_is_bid;
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_market_making_price (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_is_bid,&__pyx_n_s_size,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_market_making_price", 1, 3, 3, 1); __PYX_ERR(0, 358, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_market_making_price", 1, 3, 3, 2); __PYX_ERR(0, 358, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_market_making_price") < 0)) __PYX_ERR(0, 358, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_is_bid = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_is_bid == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L3_error)
    __pyx_v_size = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_market_making_price", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 358, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_market_making_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_18get_market_making_price(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_is_bid, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_18get_market_making_price(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_market_making_price", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":359
 * 
 *     def get_market_making_price(self, market_pair: CrossExchangeMarketPair, bint is_bid, size: Decimal) -> Decimal:
 *         return self.c_get_market_making_price(market_pair, is_bid, size)             # <<<<<<<<<<<<<<
 * 
 *     def get_adjusted_limit_order_size(self, market_pair: CrossExchangeMarketPair) -> Tuple[Decimal, Decimal]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_making_price(__pyx_v_self, __pyx_v_market_pair, __pyx_v_is_bid, __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":358
 *         return self.c_get_market_making_size(market_pair, is_bid)
 * 
 *     def get_market_making_price(self, market_pair: CrossExchangeMarketPair, bint is_bid, size: Decimal) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_market_making_price(market_pair, is_bid, size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_market_making_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":361
 *         return self.c_get_market_making_price(market_pair, is_bid, size)
 * 
 *     def get_adjusted_limit_order_size(self, market_pair: CrossExchangeMarketPair) -> Tuple[Decimal, Decimal]:             # <<<<<<<<<<<<<<
 *         return self.c_get_adjusted_limit_order_size(market_pair)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_21get_adjusted_limit_order_size(PyObject *__pyx_v_self, PyObject *__pyx_v_market_pair); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_21get_adjusted_limit_order_size(PyObject *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_adjusted_limit_order_size (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_20get_adjusted_limit_order_size(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_market_pair));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_20get_adjusted_limit_order_size(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_adjusted_limit_order_size", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":362
 * 
 *     def get_adjusted_limit_order_size(self, market_pair: CrossExchangeMarketPair) -> Tuple[Decimal, Decimal]:
 *         return self.c_get_adjusted_limit_order_size(market_pair)             # <<<<<<<<<<<<<<
 * 
 *     def get_effective_hedging_price(self, market_pair: CrossExchangeMarketPair, bint is_bid, size: Decimal) -> Decimal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_adjusted_limit_order_size(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":361
 *         return self.c_get_market_making_price(market_pair, is_bid, size)
 * 
 *     def get_adjusted_limit_order_size(self, market_pair: CrossExchangeMarketPair) -> Tuple[Decimal, Decimal]:             # <<<<<<<<<<<<<<
 *         return self.c_get_adjusted_limit_order_size(market_pair)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_adjusted_limit_order_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":364
 *         return self.c_get_adjusted_limit_order_size(market_pair)
 * 
 *     def get_effective_hedging_price(self, market_pair: CrossExchangeMarketPair, bint is_bid, size: Decimal) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_calculate_effective_hedging_price(market_pair, is_bid, size)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23get_effective_hedging_price(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23get_effective_hedging_price(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_market_pair = 0;
  int __pyx_v_is_bid;
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_effective_hedging_price (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_is_bid,&__pyx_n_s_size,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_effective_hedging_price", 1, 3, 3, 1); __PYX_ERR(0, 364, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_effective_hedging_price", 1, 3, 3, 2); __PYX_ERR(0, 364, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_effective_hedging_price") < 0)) __PYX_ERR(0, 364, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_is_bid = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_is_bid == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L3_error)
    __pyx_v_size = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_effective_hedging_price", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 364, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_effective_hedging_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_22get_effective_hedging_price(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_is_bid, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_22get_effective_hedging_price(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_effective_hedging_price", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":365
 * 
 *     def get_effective_hedging_price(self, market_pair: CrossExchangeMarketPair, bint is_bid, size: Decimal) -> Decimal:
 *         return self.c_calculate_effective_hedging_price(market_pair, is_bid, size)             # <<<<<<<<<<<<<<
 * 
 *     def check_if_still_profitable(self, market_pair: CrossExchangeMarketPair,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, __pyx_v_is_bid, __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":364
 *         return self.c_get_adjusted_limit_order_size(market_pair)
 * 
 *     def get_effective_hedging_price(self, market_pair: CrossExchangeMarketPair, bint is_bid, size: Decimal) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_calculate_effective_hedging_price(market_pair, is_bid, size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.get_effective_hedging_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":367
 *         return self.c_calculate_effective_hedging_price(market_pair, is_bid, size)
 * 
 *     def check_if_still_profitable(self, market_pair: CrossExchangeMarketPair,             # <<<<<<<<<<<<<<
 *                                   LimitOrder active_order,
 *                                   current_hedging_price: Decimal) -> bool:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_25check_if_still_profitable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_25check_if_still_profitable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_market_pair = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order = 0;
  PyObject *__pyx_v_current_hedging_price = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_if_still_profitable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_active_order,&__pyx_n_s_current_hedging_price,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_active_order)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_if_still_profitable", 1, 3, 3, 1); __PYX_ERR(0, 367, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_current_hedging_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_if_still_profitable", 1, 3, 3, 2); __PYX_ERR(0, 367, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check_if_still_profitable") < 0)) __PYX_ERR(0, 367, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_active_order = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)values[1]);
    __pyx_v_current_hedging_price = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_if_still_profitable", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 367, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.check_if_still_profitable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_active_order), __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder, 1, "active_order", 0))) __PYX_ERR(0, 368, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_24check_if_still_profitable(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_active_order, __pyx_v_current_hedging_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_24check_if_still_profitable(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order, PyObject *__pyx_v_current_hedging_price) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_if_still_profitable", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":370
 *                                   LimitOrder active_order,
 *                                   current_hedging_price: Decimal) -> bool:
 *         return self.c_check_if_still_profitable(market_pair, active_order, current_hedging_price)             # <<<<<<<<<<<<<<
 * 
 *     def check_if_sufficient_balance(self, market_pair: CrossExchangeMarketPair,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_if_still_profitable(__pyx_v_self, __pyx_v_market_pair, __pyx_v_active_order, __pyx_v_current_hedging_price)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":367
 *         return self.c_calculate_effective_hedging_price(market_pair, is_bid, size)
 * 
 *     def check_if_still_profitable(self, market_pair: CrossExchangeMarketPair,             # <<<<<<<<<<<<<<
 *                                   LimitOrder active_order,
 *                                   current_hedging_price: Decimal) -> bool:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.check_if_still_profitable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":372
 *         return self.c_check_if_still_profitable(market_pair, active_order, current_hedging_price)
 * 
 *     def check_if_sufficient_balance(self, market_pair: CrossExchangeMarketPair,             # <<<<<<<<<<<<<<
 *                                     LimitOrder active_order) -> bool:
 *         return self.c_check_if_sufficient_balance(market_pair, active_order)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_27check_if_sufficient_balance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_27check_if_sufficient_balance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_market_pair = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_if_sufficient_balance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_active_order,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_active_order)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_if_sufficient_balance", 1, 2, 2, 1); __PYX_ERR(0, 372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check_if_sufficient_balance") < 0)) __PYX_ERR(0, 372, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_active_order = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_if_sufficient_balance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 372, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.check_if_sufficient_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_active_order), __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder, 1, "active_order", 0))) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_26check_if_sufficient_balance(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_active_order);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_26check_if_sufficient_balance(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_if_sufficient_balance", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":374
 *     def check_if_sufficient_balance(self, market_pair: CrossExchangeMarketPair,
 *                                     LimitOrder active_order) -> bool:
 *         return self.c_check_if_sufficient_balance(market_pair, active_order)             # <<<<<<<<<<<<<<
 * 
 *     # ---------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_if_sufficient_balance(__pyx_v_self, __pyx_v_market_pair, __pyx_v_active_order)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":372
 *         return self.c_check_if_still_profitable(market_pair, active_order, current_hedging_price)
 * 
 *     def check_if_sufficient_balance(self, market_pair: CrossExchangeMarketPair,             # <<<<<<<<<<<<<<
 *                                     LimitOrder active_order) -> bool:
 *         return self.c_check_if_sufficient_balance(market_pair, active_order)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.check_if_sufficient_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":378
 *     # ---------------------------------------------------------------
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         StrategyBase.c_start(self, clock, timestamp)
 *         self._last_timestamp = timestamp
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_start(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":379
 * 
 *     cdef c_start(self, Clock clock, double timestamp):
 *         StrategyBase.c_start(self, clock, timestamp)             # <<<<<<<<<<<<<<
 *         self._last_timestamp = timestamp
 *         self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->__pyx_base.c_start(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_clock, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":380
 *     cdef c_start(self, Clock clock, double timestamp):
 *         StrategyBase.c_start(self, clock, timestamp)
 *         self._last_timestamp = timestamp             # <<<<<<<<<<<<<<
 *         self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds
 * 
 */
  __pyx_v_self->_last_timestamp = __pyx_v_timestamp;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":381
 *         StrategyBase.c_start(self, clock, timestamp)
 *         self._last_timestamp = timestamp
 *         self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds             # <<<<<<<<<<<<<<
 * 
 *     cdef c_tick(self, double timestamp):
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_self->_cancel_order_timer_seconds); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_cancel_timer);
  __Pyx_DECREF(__pyx_v_self->_cancel_timer);
  __pyx_v_self->_cancel_timer = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":378
 *     # ---------------------------------------------------------------
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         StrategyBase.c_start(self, clock, timestamp)
 *         self._last_timestamp = timestamp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":383
 *         self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         """
 *         Clock tick entry point.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_tick(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, double __pyx_v_timestamp) {
  int64_t __pyx_v_current_tick;
  int64_t __pyx_v_last_tick;
  int __pyx_v_should_report_warnings;
  PyObject *__pyx_v_active_limit_orders = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_limit_order = 0;
  PyObject *__pyx_v_market_pair_to_active_orders = NULL;
  PyObject *__pyx_v_maker_market = NULL;
  PyObject *__pyx_v_market_pair = NULL;
  PyObject *__pyx_9genexpr12__pyx_v_market = NULL;
  PyObject *__pyx_9genexpr13__pyx_v_market = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_t_17;
  double __pyx_t_18;
  char const *__pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_tick", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":392
 *         :param timestamp: current tick timestamp
 *         """
 *         StrategyBase.c_tick(self, timestamp)             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":395
 * 
 *         cdef:
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)             # <<<<<<<<<<<<<<
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and
 */
  if (unlikely(__pyx_v_self->_status_report_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 395, __pyx_L1_error)
  }
  __pyx_v_current_tick = ((int64_t)floor(__pyx_v_timestamp / __pyx_v_self->_status_report_interval));

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":396
 *         cdef:
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)             # <<<<<<<<<<<<<<
 *             bint should_report_warnings = ((current_tick > last_tick) and
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 */
  if (unlikely(__pyx_v_self->_status_report_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 396, __pyx_L1_error)
  }
  __pyx_v_last_tick = ((int64_t)floor(__pyx_v_self->_last_timestamp / __pyx_v_self->_status_report_interval));

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":397
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and             # <<<<<<<<<<<<<<
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 *             list active_limit_orders = self.active_limit_orders
 */
  __pyx_t_3 = ((__pyx_v_current_tick > __pyx_v_last_tick) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":398
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))             # <<<<<<<<<<<<<<
 *             list active_limit_orders = self.active_limit_orders
 *             LimitOrder limit_order
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_STATUS_REPORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_And(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_v_should_report_warnings = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":399
 *             bint should_report_warnings = ((current_tick > last_tick) and
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 *             list active_limit_orders = self.active_limit_orders             # <<<<<<<<<<<<<<
 *             LimitOrder limit_order
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_limit_orders); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 399, __pyx_L1_error)
  __pyx_v_active_limit_orders = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":402
 *             LimitOrder limit_order
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             # Perform clock tick with the market pair tracker.
 *             self._market_pair_tracker.c_tick(timestamp)
 */
  /*try:*/ {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":404
 *         try:
 *             # Perform clock tick with the market pair tracker.
 *             self._market_pair_tracker.c_tick(timestamp)             # <<<<<<<<<<<<<<
 * 
 *             if not self._all_markets_ready:
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_v_self->_market_pair_tracker->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self->_market_pair_tracker), __pyx_v_timestamp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":406
 *             self._market_pair_tracker.c_tick(timestamp)
 * 
 *             if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 *                 if not self._all_markets_ready:
 */
    __pyx_t_2 = ((!(__pyx_v_self->_all_markets_ready != 0)) != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":407
 * 
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])             # <<<<<<<<<<<<<<
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 */
      { /* enter inner scope */
        __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_set_iterator(__pyx_v_self->__pyx_base._sb_markets, 1, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_4);
        __pyx_t_4 = __pyx_t_1;
        __pyx_t_1 = 0;
        while (1) {
          __pyx_t_9 = __Pyx_set_iter_next(__pyx_t_4, __pyx_t_7, &__pyx_t_6, &__pyx_t_1, __pyx_t_8);
          if (unlikely(__pyx_t_9 == 0)) break;
          if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 407, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_9genexpr12__pyx_v_market, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr12__pyx_v_market, __pyx_n_s_ready); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 407, __pyx_L11_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_market); __pyx_9genexpr12__pyx_v_market = 0;
        goto __pyx_L14_exit_scope;
        __pyx_L11_error:;
        __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_market); __pyx_9genexpr12__pyx_v_market = 0;
        goto __pyx_L6_error;
        __pyx_L14_exit_scope:;
      } /* exit inner scope */
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 407, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->_all_markets_ready = __pyx_t_2;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":408
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 *                 if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 */
      __pyx_t_2 = ((!(__pyx_v_self->_all_markets_ready != 0)) != 0);
      if (__pyx_t_2) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":410
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:             # <<<<<<<<<<<<<<
 *                         self.logger().warning(f"Markets are not ready. No market making trades are permitted.")
 *                     return
 */
        __pyx_t_2 = (__pyx_v_should_report_warnings != 0);
        if (__pyx_t_2) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":411
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 *                         self.logger().warning(f"Markets are not ready. No market making trades are permitted.")             # <<<<<<<<<<<<<<
 *                     return
 *                 else:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_5 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 411, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_u_Markets_are_not_ready_No_market) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_Markets_are_not_ready_No_market);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 411, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":410
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:             # <<<<<<<<<<<<<<
 *                         self.logger().warning(f"Markets are not ready. No market making trades are permitted.")
 *                     return
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":412
 *                     if should_report_warnings:
 *                         self.logger().warning(f"Markets are not ready. No market making trades are permitted.")
 *                     return             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Markets are ready, ok to proceed.
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        goto __pyx_L5_return;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":408
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 *                 if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":415
 *                 else:
 *                     # Markets are ready, ok to proceed.
 *                     if self.OPTION_LOG_STATUS_REPORT:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"Markets are ready. Trading started.")
 * 
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_STATUS_REPORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 415, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 415, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_2) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":416
 *                     # Markets are ready, ok to proceed.
 *                     if self.OPTION_LOG_STATUS_REPORT:
 *                         self.logger().info(f"Markets are ready. Trading started.")             # <<<<<<<<<<<<<<
 * 
 *             if should_report_warnings:
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_10 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 416, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_kp_u_Markets_are_ready_Trading_starte) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_Markets_are_ready_Trading_starte);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 416, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":415
 *                 else:
 *                     # Markets are ready, ok to proceed.
 *                     if self.OPTION_LOG_STATUS_REPORT:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"Markets are ready. Trading started.")
 * 
 */
        }
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":406
 *             self._market_pair_tracker.c_tick(timestamp)
 * 
 *             if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 *                 if not self._all_markets_ready:
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":418
 *                         self.logger().info(f"Markets are ready. Trading started.")
 * 
 *             if should_report_warnings:             # <<<<<<<<<<<<<<
 *                 # Check if all markets are still connected or not. If not, log a warning.
 *                 if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):
 */
    __pyx_t_2 = (__pyx_v_should_report_warnings != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":420
 *             if should_report_warnings:
 *                 # Check if all markets are still connected or not. If not, log a warning.
 *                 if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):             # <<<<<<<<<<<<<<
 *                     self.logger().warning(f"WARNING: Some markets are not connected or are down at the moment. Market "
 *                                           f"making may be dangerous when markets or networks are unstable.")
 */
      { /* enter inner scope */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = 0;
        __pyx_t_1 = __Pyx_set_iterator(__pyx_v_self->__pyx_base._sb_markets, 1, (&__pyx_t_6), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_5);
        __pyx_t_5 = __pyx_t_1;
        __pyx_t_1 = 0;
        while (1) {
          __pyx_t_9 = __Pyx_set_iter_next(__pyx_t_5, __pyx_t_6, &__pyx_t_7, &__pyx_t_1, __pyx_t_8);
          if (unlikely(__pyx_t_9 == 0)) break;
          if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 420, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_9genexpr13__pyx_v_market, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr13__pyx_v_market, __pyx_n_s_network_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 420, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 420, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_2 = (__pyx_t_1 == __pyx_t_11);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 420, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 420, __pyx_L22_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_market); __pyx_9genexpr13__pyx_v_market = 0;
        goto __pyx_L25_exit_scope;
        __pyx_L22_error:;
        __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_market); __pyx_9genexpr13__pyx_v_market = 0;
        goto __pyx_L6_error;
        __pyx_L25_exit_scope:;
      } /* exit inner scope */
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 420, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 420, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_3 = ((!__pyx_t_2) != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":421
 *                 # Check if all markets are still connected or not. If not, log a warning.
 *                 if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):
 *                     self.logger().warning(f"WARNING: Some markets are not connected or are down at the moment. Market "             # <<<<<<<<<<<<<<
 *                                           f"making may be dangerous when markets or networks are unstable.")
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 421, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warning); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 421, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_4, __pyx_kp_u_WARNING_Some_markets_are_not_con) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_kp_u_WARNING_Some_markets_are_not_con);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":420
 *             if should_report_warnings:
 *                 # Check if all markets are still connected or not. If not, log a warning.
 *                 if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):             # <<<<<<<<<<<<<<
 *                     self.logger().warning(f"WARNING: Some markets are not connected or are down at the moment. Market "
 *                                           f"making may be dangerous when markets or networks are unstable.")
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":418
 *                         self.logger().info(f"Markets are ready. Trading started.")
 * 
 *             if should_report_warnings:             # <<<<<<<<<<<<<<
 *                 # Check if all markets are still connected or not. If not, log a warning.
 *                 if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":425
 * 
 *             # Calculate a mapping from market pair to list of active limit orders on the market.
 *             market_pair_to_active_orders = defaultdict(list)             # <<<<<<<<<<<<<<
 * 
 *             for maker_market, limit_order in active_limit_orders:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 425, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_4, ((PyObject *)(&PyList_Type))) : __Pyx_PyObject_CallOneArg(__pyx_t_11, ((PyObject *)(&PyList_Type)));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 425, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_market_pair_to_active_orders = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":427
 *             market_pair_to_active_orders = defaultdict(list)
 * 
 *             for maker_market, limit_order in active_limit_orders:             # <<<<<<<<<<<<<<
 *                 market_pair = self._market_pairs.get((maker_market, limit_order.trading_pair))
 *                 if market_pair is None:
 */
    if (unlikely(__pyx_v_active_limit_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 427, __pyx_L6_error)
    }
    __pyx_t_5 = __pyx_v_active_limit_orders; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_11 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 427, __pyx_L6_error)
      #else
      __pyx_t_11 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 427, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
        PyObject* sequence = __pyx_t_11;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 427, __pyx_L6_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 427, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_4)) goto __pyx_L28_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_1 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_1)) goto __pyx_L28_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_10), 2) < 0) __PYX_ERR(0, 427, __pyx_L6_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L29_unpacking_done;
        __pyx_L28_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 427, __pyx_L6_error)
        __pyx_L29_unpacking_done:;
      }
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder))))) __PYX_ERR(0, 427, __pyx_L6_error)
      __Pyx_XDECREF_SET(__pyx_v_maker_market, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_limit_order, ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":428
 * 
 *             for maker_market, limit_order in active_limit_orders:
 *                 market_pair = self._market_pairs.get((maker_market, limit_order.trading_pair))             # <<<<<<<<<<<<<<
 *                 if market_pair is None:
 *                     self.log_with_clock(logging.WARNING,
 */
      if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 428, __pyx_L6_error)
      }
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 428, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_maker_market);
      __Pyx_GIVEREF(__pyx_v_maker_market);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_maker_market);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_market_pairs, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 428, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_market_pair, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":429
 *             for maker_market, limit_order in active_limit_orders:
 *                 market_pair = self._market_pairs.get((maker_market, limit_order.trading_pair))
 *                 if market_pair is None:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(logging.WARNING,
 *                                         f"The in-flight maker order in for the trading pair '{limit_order.trading_pair}' "
 */
      __pyx_t_3 = (__pyx_v_market_pair == Py_None);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":430
 *                 market_pair = self._market_pairs.get((maker_market, limit_order.trading_pair))
 *                 if market_pair is None:
 *                     self.log_with_clock(logging.WARNING,             # <<<<<<<<<<<<<<
 *                                         f"The in-flight maker order in for the trading pair '{limit_order.trading_pair}' "
 *                                         f"does not correspond to any whitelisted trading pairs. Skipping.")
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_WARNING); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 430, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":431
 *                 if market_pair is None:
 *                     self.log_with_clock(logging.WARNING,
 *                                         f"The in-flight maker order in for the trading pair '{limit_order.trading_pair}' "             # <<<<<<<<<<<<<<
 *                                         f"does not correspond to any whitelisted trading pairs. Skipping.")
 *                     continue
 */
        __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = 0;
        __pyx_t_13 = 127;
        __Pyx_INCREF(__pyx_kp_u_The_in_flight_maker_order_in_for);
        __pyx_t_7 += 51;
        __Pyx_GIVEREF(__pyx_kp_u_The_in_flight_maker_order_in_for);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_The_in_flight_maker_order_in_for);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 431, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_14, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 431, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_13;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_15);
        __pyx_t_15 = 0;
        __Pyx_INCREF(__pyx_kp_u_does_not_correspond_to_any_whit);
        __pyx_t_7 += 65;
        __Pyx_GIVEREF(__pyx_kp_u_does_not_correspond_to_any_whit);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_does_not_correspond_to_any_whit);
        __pyx_t_15 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_7, __pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 431, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_10, __pyx_t_15};
          __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 430, __pyx_L6_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_10, __pyx_t_15};
          __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 430, __pyx_L6_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else
        #endif
        {
          __pyx_t_14 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 430, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_8, __pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_8, __pyx_t_15);
          __pyx_t_10 = 0;
          __pyx_t_15 = 0;
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 430, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":433
 *                                         f"The in-flight maker order in for the trading pair '{limit_order.trading_pair}' "
 *                                         f"does not correspond to any whitelisted trading pairs. Skipping.")
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if not self._sb_order_tracker.c_has_in_flight_cancel(limit_order.client_order_id) and \
 */
        goto __pyx_L26_continue;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":429
 *             for maker_market, limit_order in active_limit_orders:
 *                 market_pair = self._market_pairs.get((maker_market, limit_order.trading_pair))
 *                 if market_pair is None:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(logging.WARNING,
 *                                         f"The in-flight maker order in for the trading pair '{limit_order.trading_pair}' "
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":435
 *                     continue
 * 
 *                 if not self._sb_order_tracker.c_has_in_flight_cancel(limit_order.client_order_id) and \             # <<<<<<<<<<<<<<
 *                         limit_order.client_order_id in self._maker_order_ids:
 *                     market_pair_to_active_orders[market_pair].append(limit_order)
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 435, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_11))||((__pyx_t_11) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_11)->tp_name), 0))) __PYX_ERR(0, 435, __pyx_L6_error)
      __pyx_t_3 = ((!(((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_has_in_flight_cancel(__pyx_v_self->__pyx_base._sb_order_tracker, ((PyObject*)__pyx_t_11)) != 0)) != 0);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L32_bool_binop_done;
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":436
 * 
 *                 if not self._sb_order_tracker.c_has_in_flight_cancel(limit_order.client_order_id) and \
 *                         limit_order.client_order_id in self._maker_order_ids:             # <<<<<<<<<<<<<<
 *                     market_pair_to_active_orders[market_pair].append(limit_order)
 * 
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 436, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_11, __pyx_v_self->_maker_order_ids, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 436, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_16 = (__pyx_t_3 != 0);
      __pyx_t_2 = __pyx_t_16;
      __pyx_L32_bool_binop_done:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":435
 *                     continue
 * 
 *                 if not self._sb_order_tracker.c_has_in_flight_cancel(limit_order.client_order_id) and \             # <<<<<<<<<<<<<<
 *                         limit_order.client_order_id in self._maker_order_ids:
 *                     market_pair_to_active_orders[market_pair].append(limit_order)
 */
      if (__pyx_t_2) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":437
 *                 if not self._sb_order_tracker.c_has_in_flight_cancel(limit_order.client_order_id) and \
 *                         limit_order.client_order_id in self._maker_order_ids:
 *                     market_pair_to_active_orders[market_pair].append(limit_order)             # <<<<<<<<<<<<<<
 * 
 *             # Process each market pair independently.
 */
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_market_pair_to_active_orders, __pyx_v_market_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 437, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_17 = __Pyx_PyObject_Append(__pyx_t_11, ((PyObject *)__pyx_v_limit_order)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 437, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":435
 *                     continue
 * 
 *                 if not self._sb_order_tracker.c_has_in_flight_cancel(limit_order.client_order_id) and \             # <<<<<<<<<<<<<<
 *                         limit_order.client_order_id in self._maker_order_ids:
 *                     market_pair_to_active_orders[market_pair].append(limit_order)
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":427
 *             market_pair_to_active_orders = defaultdict(list)
 * 
 *             for maker_market, limit_order in active_limit_orders:             # <<<<<<<<<<<<<<
 *                 market_pair = self._market_pairs.get((maker_market, limit_order.trading_pair))
 *                 if market_pair is None:
 */
      __pyx_L26_continue:;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":440
 * 
 *             # Process each market pair independently.
 *             for market_pair in self._market_pairs.values():             # <<<<<<<<<<<<<<
 *                 self.c_process_market_pair(market_pair, market_pair_to_active_orders[market_pair])
 *             # log conversion rates every 5 minutes
 */
    __pyx_t_6 = 0;
    if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 440, __pyx_L6_error)
    }
    __pyx_t_11 = __Pyx_dict_iterator(__pyx_v_self->_market_pairs, 1, __pyx_n_s_values, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 440, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_11;
    __pyx_t_11 = 0;
    while (1) {
      __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_5, __pyx_t_7, &__pyx_t_6, NULL, &__pyx_t_11, NULL, __pyx_t_8);
      if (unlikely(__pyx_t_9 == 0)) break;
      if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 440, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_market_pair, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":441
 *             # Process each market pair independently.
 *             for market_pair in self._market_pairs.values():
 *                 self.c_process_market_pair(market_pair, market_pair_to_active_orders[market_pair])             # <<<<<<<<<<<<<<
 *             # log conversion rates every 5 minutes
 *             if self._last_conv_rates_logged + (60. * 3) < self._current_timestamp:
 */
      __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_market_pair_to_active_orders, __pyx_v_market_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 441, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (!(likely(PyList_CheckExact(__pyx_t_11))||((__pyx_t_11) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_11)->tp_name), 0))) __PYX_ERR(0, 441, __pyx_L6_error)
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_market_pair(__pyx_v_self, __pyx_v_market_pair, ((PyObject*)__pyx_t_11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":443
 *                 self.c_process_market_pair(market_pair, market_pair_to_active_orders[market_pair])
 *             # log conversion rates every 5 minutes
 *             if self._last_conv_rates_logged + (60. * 3) < self._current_timestamp:             # <<<<<<<<<<<<<<
 *                 self.log_conversion_rates()
 *                 self._last_conv_rates_logged = self._current_timestamp
 */
    __pyx_t_2 = (((__pyx_v_self->_last_conv_rates_logged + (60. * 3.0)) < __pyx_v_self->__pyx_base.__pyx_base._current_timestamp) != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":444
 *             # log conversion rates every 5 minutes
 *             if self._last_conv_rates_logged + (60. * 3) < self._current_timestamp:
 *                 self.log_conversion_rates()             # <<<<<<<<<<<<<<
 *                 self._last_conv_rates_logged = self._current_timestamp
 *         finally:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_conversion_rates); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_5 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 444, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":445
 *             if self._last_conv_rates_logged + (60. * 3) < self._current_timestamp:
 *                 self.log_conversion_rates()
 *                 self._last_conv_rates_logged = self._current_timestamp             # <<<<<<<<<<<<<<
 *         finally:
 *             self._last_timestamp = timestamp
 */
      __pyx_t_18 = __pyx_v_self->__pyx_base.__pyx_base._current_timestamp;
      __pyx_v_self->_last_conv_rates_logged = __pyx_t_18;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":443
 *                 self.c_process_market_pair(market_pair, market_pair_to_active_orders[market_pair])
 *             # log conversion rates every 5 minutes
 *             if self._last_conv_rates_logged + (60. * 3) < self._current_timestamp:             # <<<<<<<<<<<<<<
 *                 self.log_conversion_rates()
 *                 self._last_conv_rates_logged = self._current_timestamp
 */
    }
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":447
 *                 self._last_conv_rates_logged = self._current_timestamp
 *         finally:
 *             self._last_timestamp = timestamp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_23, &__pyx_t_24, &__pyx_t_25);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __Pyx_XGOTREF(__pyx_t_24);
      __Pyx_XGOTREF(__pyx_t_25);
      __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
      {
        __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_23);
        __Pyx_XGIVEREF(__pyx_t_24);
        __Pyx_XGIVEREF(__pyx_t_25);
        __Pyx_ExceptionReset(__pyx_t_23, __pyx_t_24, __pyx_t_25);
      }
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ErrRestore(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
      __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_19;
      goto __pyx_L1_error;
    }
    __pyx_L5_return: {
      __pyx_t_25 = __pyx_r;
      __pyx_r = 0;
      __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      __pyx_r = __pyx_t_25;
      __pyx_t_25 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":383
 *         self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         """
 *         Clock tick entry point.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_tick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_active_limit_orders);
  __Pyx_XDECREF((PyObject *)__pyx_v_limit_order);
  __Pyx_XDECREF(__pyx_v_market_pair_to_active_orders);
  __Pyx_XDECREF(__pyx_v_maker_market);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_market);
  __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_market);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":454
 * 
 * 
 *     def has_active_taker_order(self, object market_pair):             # <<<<<<<<<<<<<<
 *         cdef dict market_orders = self._sb_order_tracker.c_get_market_orders()
 *         if len(market_orders.get(market_pair, {})) > 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_29has_active_taker_order(PyObject *__pyx_v_self, PyObject *__pyx_v_market_pair); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_29has_active_taker_order(PyObject *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_active_taker_order (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_28has_active_taker_order(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_market_pair));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_28has_active_taker_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_v_market_orders = 0;
  PyObject *__pyx_v_limit_orders = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_active_taker_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":455
 * 
 *     def has_active_taker_order(self, object market_pair):
 *         cdef dict market_orders = self._sb_order_tracker.c_get_market_orders()             # <<<<<<<<<<<<<<
 *         if len(market_orders.get(market_pair, {})) > 0:
 *             return True
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_orders(__pyx_v_self->__pyx_base._sb_order_tracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":456
 *     def has_active_taker_order(self, object market_pair):
 *         cdef dict market_orders = self._sb_order_tracker.c_get_market_orders()
 *         if len(market_orders.get(market_pair, {})) > 0:             # <<<<<<<<<<<<<<
 *             return True
 *         cdef dict limit_orders = self._sb_order_tracker.c_get_limit_orders()
 */
  if (unlikely(__pyx_v_market_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 456, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_market_orders, __pyx_v_market_pair, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((__pyx_t_3 > 0) != 0);
  if (__pyx_t_4) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":457
 *         cdef dict market_orders = self._sb_order_tracker.c_get_market_orders()
 *         if len(market_orders.get(market_pair, {})) > 0:
 *             return True             # <<<<<<<<<<<<<<
 *         cdef dict limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *         limit_orders = limit_orders.get(market_pair, {})
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":456
 *     def has_active_taker_order(self, object market_pair):
 *         cdef dict market_orders = self._sb_order_tracker.c_get_market_orders()
 *         if len(market_orders.get(market_pair, {})) > 0:             # <<<<<<<<<<<<<<
 *             return True
 *         cdef dict limit_orders = self._sb_order_tracker.c_get_limit_orders()
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":458
 *         if len(market_orders.get(market_pair, {})) > 0:
 *             return True
 *         cdef dict limit_orders = self._sb_order_tracker.c_get_limit_orders()             # <<<<<<<<<<<<<<
 *         limit_orders = limit_orders.get(market_pair, {})
 *         if len(limit_orders) > 0:
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_orders(__pyx_v_self->__pyx_base._sb_order_tracker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_limit_orders = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":459
 *             return True
 *         cdef dict limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *         limit_orders = limit_orders.get(market_pair, {})             # <<<<<<<<<<<<<<
 *         if len(limit_orders) > 0:
 *             if len(set(limit_orders.keys()).intersection(set(self._maker_order_ids))) > 0:
 */
  if (unlikely(__pyx_v_limit_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 459, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_limit_orders, __pyx_v_market_pair, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_limit_orders, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":460
 *         cdef dict limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *         limit_orders = limit_orders.get(market_pair, {})
 *         if len(limit_orders) > 0:             # <<<<<<<<<<<<<<
 *             if len(set(limit_orders.keys()).intersection(set(self._maker_order_ids))) > 0:
 *                 return True
 */
  if (unlikely(__pyx_v_limit_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 460, __pyx_L1_error)
  }
  __pyx_t_3 = PyDict_Size(__pyx_v_limit_orders); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 0) != 0);
  if (__pyx_t_4) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":461
 *         limit_orders = limit_orders.get(market_pair, {})
 *         if len(limit_orders) > 0:
 *             if len(set(limit_orders.keys()).intersection(set(self._maker_order_ids))) > 0:             # <<<<<<<<<<<<<<
 *                 return True
 *         return False
 */
    if (unlikely(__pyx_v_limit_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
      __PYX_ERR(0, 461, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_intersection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySet_New(__pyx_v_self->_maker_order_ids); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = ((__pyx_t_3 > 0) != 0);
    if (__pyx_t_4) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":462
 *         if len(limit_orders) > 0:
 *             if len(set(limit_orders.keys()).intersection(set(self._maker_order_ids))) > 0:
 *                 return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":461
 *         limit_orders = limit_orders.get(market_pair, {})
 *         if len(limit_orders) > 0:
 *             if len(set(limit_orders.keys()).intersection(set(self._maker_order_ids))) > 0:             # <<<<<<<<<<<<<<
 *                 return True
 *         return False
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":460
 *         cdef dict limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *         limit_orders = limit_orders.get(market_pair, {})
 *         if len(limit_orders) > 0:             # <<<<<<<<<<<<<<
 *             if len(set(limit_orders.keys()).intersection(set(self._maker_order_ids))) > 0:
 *                 return True
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":463
 *             if len(set(limit_orders.keys()).intersection(set(self._maker_order_ids))) > 0:
 *                 return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":454
 * 
 * 
 *     def has_active_taker_order(self, object market_pair):             # <<<<<<<<<<<<<<
 *         cdef dict market_orders = self._sb_order_tracker.c_get_market_orders()
 *         if len(market_orders.get(market_pair, {})) > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.has_active_taker_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market_orders);
  __Pyx_XDECREF(__pyx_v_limit_orders);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":466
 * 
 * 
 *     cdef c_balance_fix_check(self, market_pair):             # <<<<<<<<<<<<<<
 *       cdef:
 *         ExchangeBase maker_market = market_pair.maker.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_balance_fix_check(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_total_base_balance = 0;
  PyObject *__pyx_v_pref_base_min_actual = 0;
  PyObject *__pyx_v_order_size_base = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_balance_fix_check", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":468
 *     cdef c_balance_fix_check(self, market_pair):
 *       cdef:
 *         ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *         ExchangeBase taker_market = market_pair.taker.market
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 468, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":469
 *       cdef:
 *         ExchangeBase maker_market = market_pair.maker.market
 *         ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *         object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 469, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":470
 *         ExchangeBase maker_market = market_pair.maker.market
 *         ExchangeBase taker_market = market_pair.taker.market
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 *         object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *         object order_size_base = abs(pref_base_min_actual)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 470, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 470, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_total_base_balance = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":471
 *         ExchangeBase taker_market = market_pair.taker.market
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *         object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)             # <<<<<<<<<<<<<<
 *         object order_size_base = abs(pref_base_min_actual)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_target_base_balance, __pyx_v_total_base_balance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pref_base_min_actual = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":472
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *         object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *         object order_size_base = abs(pref_base_min_actual)             # <<<<<<<<<<<<<<
 * 
 *       if order_size_base > self._min_order_amount and self._counter == 0:
 */
  __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_v_pref_base_min_actual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_order_size_base = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":474
 *         object order_size_base = abs(pref_base_min_actual)
 * 
 *       if order_size_base > self._min_order_amount and self._counter == 0:             # <<<<<<<<<<<<<<
 *           self._counter = self._counter + 1
 *           self.logger().info(f"Total Balance: {total_base_balance} pref_min_acutal {pref_base_min_actual} order size base: {order_size_base}")
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_order_size_base, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_self->_counter, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":475
 * 
 *       if order_size_base > self._min_order_amount and self._counter == 0:
 *           self._counter = self._counter + 1             # <<<<<<<<<<<<<<
 *           self.logger().info(f"Total Balance: {total_base_balance} pref_min_acutal {pref_base_min_actual} order size base: {order_size_base}")
 *           self._restore_timer = self._current_timestamp + self._waiting_time
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_self->_counter, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_counter);
    __Pyx_DECREF(__pyx_v_self->_counter);
    __pyx_v_self->_counter = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":476
 *       if order_size_base > self._min_order_amount and self._counter == 0:
 *           self._counter = self._counter + 1
 *           self.logger().info(f"Total Balance: {total_base_balance} pref_min_acutal {pref_base_min_actual} order size base: {order_size_base}")             # <<<<<<<<<<<<<<
 *           self._restore_timer = self._current_timestamp + self._waiting_time
 *           return True
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u_Total_Balance);
    __pyx_t_7 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_Total_Balance);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Total_Balance);
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_total_base_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u_pref_min_acutal);
    __pyx_t_7 += 17;
    __Pyx_GIVEREF(__pyx_kp_u_pref_min_acutal);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_pref_min_acutal);
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_pref_base_min_actual, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u_order_size_base);
    __pyx_t_7 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_order_size_base);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_order_size_base);
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_2, 6, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":477
 *           self._counter = self._counter + 1
 *           self.logger().info(f"Total Balance: {total_base_balance} pref_min_acutal {pref_base_min_actual} order size base: {order_size_base}")
 *           self._restore_timer = self._current_timestamp + self._waiting_time             # <<<<<<<<<<<<<<
 *           return True
 * 
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_v_self->_waiting_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_restore_timer);
    __Pyx_DECREF(__pyx_v_self->_restore_timer);
    __pyx_v_self->_restore_timer = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":478
 *           self.logger().info(f"Total Balance: {total_base_balance} pref_min_acutal {pref_base_min_actual} order size base: {order_size_base}")
 *           self._restore_timer = self._current_timestamp + self._waiting_time
 *           return True             # <<<<<<<<<<<<<<
 * 
 *       elif order_size_base > self._min_order_amount:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":474
 *         object order_size_base = abs(pref_base_min_actual)
 * 
 *       if order_size_base > self._min_order_amount and self._counter == 0:             # <<<<<<<<<<<<<<
 *           self._counter = self._counter + 1
 *           self.logger().info(f"Total Balance: {total_base_balance} pref_min_acutal {pref_base_min_actual} order size base: {order_size_base}")
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":480
 *           return True
 * 
 *       elif order_size_base > self._min_order_amount:             # <<<<<<<<<<<<<<
 *           return True
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_order_size_base, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":481
 * 
 *       elif order_size_base > self._min_order_amount:
 *           return True             # <<<<<<<<<<<<<<
 * 
 *       else:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":480
 *           return True
 * 
 *       elif order_size_base > self._min_order_amount:             # <<<<<<<<<<<<<<
 *           return True
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":484
 * 
 *       else:
 *           self._counter = 0             # <<<<<<<<<<<<<<
 *           self._maker_order_update = False
 *           return False
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    __Pyx_GOTREF(__pyx_v_self->_counter);
    __Pyx_DECREF(__pyx_v_self->_counter);
    __pyx_v_self->_counter = __pyx_int_0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":485
 *       else:
 *           self._counter = 0
 *           self._maker_order_update = False             # <<<<<<<<<<<<<<
 *           return False
 * 
 */
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    __Pyx_GOTREF(__pyx_v_self->_maker_order_update);
    __Pyx_DECREF(__pyx_v_self->_maker_order_update);
    __pyx_v_self->_maker_order_update = Py_False;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":486
 *           self._counter = 0
 *           self._maker_order_update = False
 *           return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":466
 * 
 * 
 *     cdef c_balance_fix_check(self, market_pair):             # <<<<<<<<<<<<<<
 *       cdef:
 *         ExchangeBase maker_market = market_pair.maker.market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_balance_fix_check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_total_base_balance);
  __Pyx_XDECREF(__pyx_v_pref_base_min_actual);
  __Pyx_XDECREF(__pyx_v_order_size_base);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":489
 * 
 * 
 *     cdef c_check_available_balance(self, is_buy: bool, market_pair):             # <<<<<<<<<<<<<<
 *       cdef:
 *           ExchangeBase maker_market = market_pair.maker.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_available_balance(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_taker_trading_pair = 0;
  PyObject *__pyx_v_maker_trading_pair = 0;
  PyObject *__pyx_v_mid_price_taker = 0;
  PyObject *__pyx_v_mid_price_maker = 0;
  CYTHON_UNUSED PyObject *__pyx_v_mid_price = 0;
  PyObject *__pyx_v_mid_price_taker_buy_price = 0;
  PyObject *__pyx_v_mid_price_maker_buy_price = 0;
  CYTHON_UNUSED PyObject *__pyx_v_mid_price_taker_sell_price = 0;
  CYTHON_UNUSED PyObject *__pyx_v_mid_price_maker_sell_price = 0;
  PyObject *__pyx_v_maker_available_balance_base = 0;
  PyObject *__pyx_v_taker_available_balance_base = 0;
  PyObject *__pyx_v_maker_available_balance_quote = 0;
  PyObject *__pyx_v_taker_available_balance_quote = 0;
  PyObject *__pyx_v_total_base_balance = 0;
  PyObject *__pyx_v_pref_base_min_actual = 0;
  PyObject *__pyx_v_order_size_base = 0;
  PyObject *__pyx_v_maker_order_size_in_quote = 0;
  CYTHON_UNUSED PyObject *__pyx_v_taker_order_size_in_quote = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_check_available_balance", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":491
 *     cdef c_check_available_balance(self, is_buy: bool, market_pair):
 *       cdef:
 *           ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *           ExchangeBase taker_market = market_pair.taker.market
 *           object taker_trading_pair = market_pair.taker.trading_pair
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 491, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":492
 *       cdef:
 *           ExchangeBase maker_market = market_pair.maker.market
 *           ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *           object taker_trading_pair = market_pair.taker.trading_pair
 *           object maker_trading_pair = market_pair.maker.trading_pair
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 492, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":493
 *           ExchangeBase maker_market = market_pair.maker.market
 *           ExchangeBase taker_market = market_pair.taker.market
 *           object taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 *           object maker_trading_pair = market_pair.maker.trading_pair
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_taker_trading_pair = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":494
 *           ExchangeBase taker_market = market_pair.taker.market
 *           object taker_trading_pair = market_pair.taker.trading_pair
 *           object maker_trading_pair = market_pair.maker.trading_pair             # <<<<<<<<<<<<<<
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_maker_trading_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":495
 *           object taker_trading_pair = market_pair.taker.trading_pair
 *           object maker_trading_pair = market_pair.maker.trading_pair
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)             # <<<<<<<<<<<<<<
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_taker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_taker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":496
 *           object maker_trading_pair = market_pair.maker.trading_pair
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)             # <<<<<<<<<<<<<<
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_maker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_maker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":497
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)             # <<<<<<<<<<<<<<
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_maker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_maker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":498
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_taker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker_buy_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":499
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_maker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker_buy_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":500
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *           object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_taker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker_sell_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":501
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *           object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 *           object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_maker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker_sell_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":502
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *           object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 *           object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)
 *           object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 502, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_maker_available_balance_base = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":503
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *           object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 *           object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)             # <<<<<<<<<<<<<<
 *           object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 *           object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 503, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_taker_available_balance_base = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":504
 *           object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 *           object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)
 *           object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)             # <<<<<<<<<<<<<<
 *           object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 504, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_maker_available_balance_quote = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":505
 *           object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)
 *           object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 *           object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)             # <<<<<<<<<<<<<<
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 505, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_taker_available_balance_quote = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":506
 *           object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 *           object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *           object order_size_base = abs(pref_base_min_actual)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_total_base_balance = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":507
 *           object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)             # <<<<<<<<<<<<<<
 *           object order_size_base = abs(pref_base_min_actual)
 *           object maker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_target_base_balance, __pyx_v_total_base_balance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pref_base_min_actual = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":508
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *           object order_size_base = abs(pref_base_min_actual)             # <<<<<<<<<<<<<<
 *           object maker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)
 *           object taker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)
 */
  __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_v_pref_base_min_actual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_order_size_base = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":509
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *           object order_size_base = abs(pref_base_min_actual)
 *           object maker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)             # <<<<<<<<<<<<<<
 *           object taker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)
 *           # actual balance lower than wanted, thus need to buy
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_order_size_base, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_maker_order_size_in_quote = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":510
 *           object order_size_base = abs(pref_base_min_actual)
 *           object maker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)
 *           object taker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)             # <<<<<<<<<<<<<<
 *           # actual balance lower than wanted, thus need to buy
 *       if is_buy:
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_order_size_base, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_taker_order_size_in_quote = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":512
 *           object taker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)
 *           # actual balance lower than wanted, thus need to buy
 *       if is_buy:             # <<<<<<<<<<<<<<
 *           #  check balance to check weather you can buy the asset
 *         if self._balance_fix_maker: #in this case prioritze maker orders
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 512, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":514
 *       if is_buy:
 *           #  check balance to check weather you can buy the asset
 *         if self._balance_fix_maker: #in this case prioritze maker orders             # <<<<<<<<<<<<<<
 *             if (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough
 *                 self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->_balance_fix_maker); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 514, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":515
 *           #  check balance to check weather you can buy the asset
 *         if self._balance_fix_maker: #in this case prioritze maker orders
 *             if (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")
 *                 return "buy_maker"  # not enough balance to buy
 */
      __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 515, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":516
 *         if self._balance_fix_maker: #in this case prioritze maker orders
 *             if (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough
 *                 self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")             # <<<<<<<<<<<<<<
 *                 return "buy_maker"  # not enough balance to buy
 * 
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Maker_enough_quote_balance);
        __pyx_t_6 += 27;
        __Pyx_GIVEREF(__pyx_kp_u_Maker_enough_quote_balance);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Maker_enough_quote_balance);
        __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_to_buy);
        __pyx_t_6 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_to_buy);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_to_buy);
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_will_place_a_maker_buy_order);
        __pyx_t_6 += 30;
        __Pyx_GIVEREF(__pyx_kp_u_will_place_a_maker_buy_order);
        PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_will_place_a_maker_buy_order);
        __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 516, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":517
 *             if (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough
 *                 self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")
 *                 return "buy_maker"  # not enough balance to buy             # <<<<<<<<<<<<<<
 * 
 *             elif (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_n_u_buy_maker);
        __pyx_r = __pyx_n_u_buy_maker;
        goto __pyx_L0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":515
 *           #  check balance to check weather you can buy the asset
 *         if self._balance_fix_maker: #in this case prioritze maker orders
 *             if (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")
 *                 return "buy_maker"  # not enough balance to buy
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":519
 *                 return "buy_maker"  # not enough balance to buy
 * 
 *             elif (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Taker enough quote balance {taker_available_balance_quote / mid_price_taker_buy_price} to buy {order_size_base}, will place a taker buy order")
 *                 return "buy_taker"
 */
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":520
 * 
 *             elif (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough
 *                 self.logger().info(f"Taker enough quote balance {taker_available_balance_quote / mid_price_taker_buy_price} to buy {order_size_base}, will place a taker buy order")             # <<<<<<<<<<<<<<
 *                 return "buy_taker"
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Taker_enough_quote_balance);
        __pyx_t_6 += 27;
        __Pyx_GIVEREF(__pyx_kp_u_Taker_enough_quote_balance);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Taker_enough_quote_balance);
        __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_to_buy);
        __pyx_t_6 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_to_buy);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_to_buy);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_will_place_a_taker_buy_order);
        __pyx_t_6 += 30;
        __Pyx_GIVEREF(__pyx_kp_u_will_place_a_taker_buy_order);
        PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_will_place_a_taker_buy_order);
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":521
 *             elif (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough
 *                 self.logger().info(f"Taker enough quote balance {taker_available_balance_quote / mid_price_taker_buy_price} to buy {order_size_base}, will place a taker buy order")
 *                 return "buy_taker"             # <<<<<<<<<<<<<<
 * 
 *             else: #the maker nor the taker has enough balance, but both do
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_n_u_buy_taker);
        __pyx_r = __pyx_n_u_buy_taker;
        goto __pyx_L0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":519
 *                 return "buy_maker"  # not enough balance to buy
 * 
 *             elif (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Taker enough quote balance {taker_available_balance_quote / mid_price_taker_buy_price} to buy {order_size_base}, will place a taker buy order")
 *                 return "buy_taker"
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":524
 * 
 *             else: #the maker nor the taker has enough balance, but both do
 *                 if (taker_available_balance_quote/mid_price_taker_buy_price) + (maker_available_balance_quote / mid_price_maker_buy_price)  > order_size_base:             # <<<<<<<<<<<<<<
 *                     return "buy_maker_taker"
 *                     self.logger().info(f"Enough quote balane on both exchanges only Taker: {(taker_available_balance_quote/mid_price_taker_buy_price)}, Maker: {maker_available_balance_quote / mid_price_maker_buy_price}, Total: {taker_available_balance_quote/mid_price_taker_buy_price + (maker_available_balance_quote / mid_price_maker_buy_price)}, to buy {order_size_base}, will place maker and taker buy")
 */
      /*else*/ {
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 524, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 524, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 524, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":525
 *             else: #the maker nor the taker has enough balance, but both do
 *                 if (taker_available_balance_quote/mid_price_taker_buy_price) + (maker_available_balance_quote / mid_price_maker_buy_price)  > order_size_base:
 *                     return "buy_maker_taker"             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"Enough quote balane on both exchanges only Taker: {(taker_available_balance_quote/mid_price_taker_buy_price)}, Maker: {maker_available_balance_quote / mid_price_maker_buy_price}, Total: {taker_available_balance_quote/mid_price_taker_buy_price + (maker_available_balance_quote / mid_price_maker_buy_price)}, to buy {order_size_base}, will place maker and taker buy")
 *                 else:
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_n_u_buy_maker_taker);
          __pyx_r = __pyx_n_u_buy_maker_taker;
          goto __pyx_L0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":524
 * 
 *             else: #the maker nor the taker has enough balance, but both do
 *                 if (taker_available_balance_quote/mid_price_taker_buy_price) + (maker_available_balance_quote / mid_price_maker_buy_price)  > order_size_base:             # <<<<<<<<<<<<<<
 *                     return "buy_maker_taker"
 *                     self.logger().info(f"Enough quote balane on both exchanges only Taker: {(taker_available_balance_quote/mid_price_taker_buy_price)}, Maker: {maker_available_balance_quote / mid_price_maker_buy_price}, Total: {taker_available_balance_quote/mid_price_taker_buy_price + (maker_available_balance_quote / mid_price_maker_buy_price)}, to buy {order_size_base}, will place maker and taker buy")
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":528
 *                     self.logger().info(f"Enough quote balane on both exchanges only Taker: {(taker_available_balance_quote/mid_price_taker_buy_price)}, Maker: {maker_available_balance_quote / mid_price_maker_buy_price}, Total: {taker_available_balance_quote/mid_price_taker_buy_price + (maker_available_balance_quote / mid_price_maker_buy_price)}, to buy {order_size_base}, will place maker and taker buy")
 *                 else:
 *                     self.logger().info(f"Not enough quote balance to buy Order size: {order_size_base}. Maker Quote balance: {maker_available_balance_quote}, Taker Quote balance:{taker_available_balance_quote} Order size in quote: {maker_order_size_in_quote}")             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
        /*else*/ {
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_6 = 0;
          __pyx_t_7 = 127;
          __Pyx_INCREF(__pyx_kp_u_Not_enough_quote_balance_to_buy);
          __pyx_t_6 += 44;
          __Pyx_GIVEREF(__pyx_kp_u_Not_enough_quote_balance_to_buy);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Not_enough_quote_balance_to_buy);
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_INCREF(__pyx_kp_u_Maker_Quote_balance);
          __pyx_t_6 += 23;
          __Pyx_GIVEREF(__pyx_kp_u_Maker_Quote_balance);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Maker_Quote_balance);
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_available_balance_quote, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_INCREF(__pyx_kp_u_Taker_Quote_balance);
          __pyx_t_6 += 22;
          __Pyx_GIVEREF(__pyx_kp_u_Taker_Quote_balance);
          PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_Taker_Quote_balance);
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_available_balance_quote, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_2);
          __pyx_t_2 = 0;
          __Pyx_INCREF(__pyx_kp_u_Order_size_in_quote);
          __pyx_t_6 += 22;
          __Pyx_GIVEREF(__pyx_kp_u_Order_size_in_quote);
          PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_Order_size_in_quote);
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_order_size_in_quote, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_2);
          __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_4, 8, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":529
 *                 else:
 *                     self.logger().info(f"Not enough quote balance to buy Order size: {order_size_base}. Maker Quote balance: {maker_available_balance_quote}, Taker Quote balance:{taker_available_balance_quote} Order size in quote: {maker_order_size_in_quote}")
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *         else: #if we do not want to use the maker as the fixing balance
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L0;
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":514
 *       if is_buy:
 *           #  check balance to check weather you can buy the asset
 *         if self._balance_fix_maker: #in this case prioritze maker orders             # <<<<<<<<<<<<<<
 *             if (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough
 *                 self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":532
 * 
 *         else: #if we do not want to use the maker as the fixing balance
 *           if (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Taker enough quote balance {taker_available_balance_quote / mid_price_taker_buy_price} to buy {order_size_base}, will place a taker buy order")
 *               return "buy_taker"
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":533
 *         else: #if we do not want to use the maker as the fixing balance
 *           if (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough
 *               self.logger().info(f"Taker enough quote balance {taker_available_balance_quote / mid_price_taker_buy_price} to buy {order_size_base}, will place a taker buy order")             # <<<<<<<<<<<<<<
 *               return "buy_taker"
 * 
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Taker_enough_quote_balance);
        __pyx_t_6 += 27;
        __Pyx_GIVEREF(__pyx_kp_u_Taker_enough_quote_balance);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Taker_enough_quote_balance);
        __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_to_buy);
        __pyx_t_6 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_to_buy);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_to_buy);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_will_place_a_taker_buy_order);
        __pyx_t_6 += 30;
        __Pyx_GIVEREF(__pyx_kp_u_will_place_a_taker_buy_order);
        PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u_will_place_a_taker_buy_order);
        __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_8, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":534
 *           if (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough
 *               self.logger().info(f"Taker enough quote balance {taker_available_balance_quote / mid_price_taker_buy_price} to buy {order_size_base}, will place a taker buy order")
 *               return "buy_taker"             # <<<<<<<<<<<<<<
 * 
 *           elif (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_n_u_buy_taker);
        __pyx_r = __pyx_n_u_buy_taker;
        goto __pyx_L0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":532
 * 
 *         else: #if we do not want to use the maker as the fixing balance
 *           if (taker_available_balance_quote/mid_price_taker_buy_price) > order_size_base:  # check if availabale balance is enough             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Taker enough quote balance {taker_available_balance_quote / mid_price_taker_buy_price} to buy {order_size_base}, will place a taker buy order")
 *               return "buy_taker"
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":536
 *               return "buy_taker"
 * 
 *           elif (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")
 *               return "buy_maker"  # not enough balance to buy
 */
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 536, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 536, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":537
 * 
 *           elif (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough
 *               self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")             # <<<<<<<<<<<<<<
 *               return "buy_maker"  # not enough balance to buy
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Maker_enough_quote_balance);
        __pyx_t_6 += 27;
        __Pyx_GIVEREF(__pyx_kp_u_Maker_enough_quote_balance);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Maker_enough_quote_balance);
        __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_to_buy);
        __pyx_t_6 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_to_buy);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_to_buy);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_will_place_a_maker_buy_order);
        __pyx_t_6 += 30;
        __Pyx_GIVEREF(__pyx_kp_u_will_place_a_maker_buy_order);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_will_place_a_maker_buy_order);
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":538
 *           elif (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough
 *               self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")
 *               return "buy_maker"  # not enough balance to buy             # <<<<<<<<<<<<<<
 * 
 *           else:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_n_u_buy_maker);
        __pyx_r = __pyx_n_u_buy_maker;
        goto __pyx_L0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":536
 *               return "buy_taker"
 * 
 *           elif (maker_available_balance_quote / mid_price_maker_buy_price) > order_size_base :  # check if availabale balance is enough             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Maker enough quote balance {maker_available_balance_quote / mid_price_maker_buy_price} to buy {order_size_base}, will place a maker buy order")
 *               return "buy_maker"  # not enough balance to buy
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":541
 * 
 *           else:
 *                 if (taker_available_balance_quote/mid_price_taker_buy_price) + (maker_available_balance_quote / mid_price_maker_buy_price)  > order_size_base:             # <<<<<<<<<<<<<<
 *                     return "buy_maker_taker"
 *                     self.logger().info(f"Enough quote balane on both exchanges only Taker: {(taker_available_balance_quote/mid_price_taker_buy_price)}, Maker: {maker_available_balance_quote / mid_price_maker_buy_price}, Total: {taker_available_balance_quote/mid_price_taker_buy_price + (maker_available_balance_quote / mid_price_maker_buy_price)}, to buy {order_size_base}, will place maker and taker buy")
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 541, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":542
 *           else:
 *                 if (taker_available_balance_quote/mid_price_taker_buy_price) + (maker_available_balance_quote / mid_price_maker_buy_price)  > order_size_base:
 *                     return "buy_maker_taker"             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"Enough quote balane on both exchanges only Taker: {(taker_available_balance_quote/mid_price_taker_buy_price)}, Maker: {maker_available_balance_quote / mid_price_maker_buy_price}, Total: {taker_available_balance_quote/mid_price_taker_buy_price + (maker_available_balance_quote / mid_price_maker_buy_price)}, to buy {order_size_base}, will place maker and taker buy")
 *                 else:
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_n_u_buy_maker_taker);
          __pyx_r = __pyx_n_u_buy_maker_taker;
          goto __pyx_L0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":541
 * 
 *           else:
 *                 if (taker_available_balance_quote/mid_price_taker_buy_price) + (maker_available_balance_quote / mid_price_maker_buy_price)  > order_size_base:             # <<<<<<<<<<<<<<
 *                     return "buy_maker_taker"
 *                     self.logger().info(f"Enough quote balane on both exchanges only Taker: {(taker_available_balance_quote/mid_price_taker_buy_price)}, Maker: {maker_available_balance_quote / mid_price_maker_buy_price}, Total: {taker_available_balance_quote/mid_price_taker_buy_price + (maker_available_balance_quote / mid_price_maker_buy_price)}, to buy {order_size_base}, will place maker and taker buy")
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":545
 *                     self.logger().info(f"Enough quote balane on both exchanges only Taker: {(taker_available_balance_quote/mid_price_taker_buy_price)}, Maker: {maker_available_balance_quote / mid_price_maker_buy_price}, Total: {taker_available_balance_quote/mid_price_taker_buy_price + (maker_available_balance_quote / mid_price_maker_buy_price)}, to buy {order_size_base}, will place maker and taker buy")
 *                 else:
 *                     self.logger().info(f"Not enough quote balance to buy Order size: {order_size_base}. Maker Quote balance: {maker_available_balance_quote}, Taker Quote balance:{taker_available_balance_quote} Order size in quote: {maker_order_size_in_quote}")             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
        /*else*/ {
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_6 = 0;
          __pyx_t_7 = 127;
          __Pyx_INCREF(__pyx_kp_u_Not_enough_quote_balance_to_buy);
          __pyx_t_6 += 44;
          __Pyx_GIVEREF(__pyx_kp_u_Not_enough_quote_balance_to_buy);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Not_enough_quote_balance_to_buy);
          __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
          __pyx_t_1 = 0;
          __Pyx_INCREF(__pyx_kp_u_Maker_Quote_balance);
          __pyx_t_6 += 23;
          __Pyx_GIVEREF(__pyx_kp_u_Maker_Quote_balance);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Maker_Quote_balance);
          __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_available_balance_quote, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_1);
          __pyx_t_1 = 0;
          __Pyx_INCREF(__pyx_kp_u_Taker_Quote_balance);
          __pyx_t_6 += 22;
          __Pyx_GIVEREF(__pyx_kp_u_Taker_Quote_balance);
          PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_Taker_Quote_balance);
          __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_available_balance_quote, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_1);
          __pyx_t_1 = 0;
          __Pyx_INCREF(__pyx_kp_u_Order_size_in_quote);
          __pyx_t_6 += 22;
          __Pyx_GIVEREF(__pyx_kp_u_Order_size_in_quote);
          PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_Order_size_in_quote);
          __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_order_size_in_quote, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_4, 8, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 545, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":546
 *                 else:
 *                     self.logger().info(f"Not enough quote balance to buy Order size: {order_size_base}. Maker Quote balance: {maker_available_balance_quote}, Taker Quote balance:{taker_available_balance_quote} Order size in quote: {maker_order_size_in_quote}")
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *       else: # if is sell
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L0;
      }
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":512
 *           object taker_order_size_in_quote = (order_size_base * mid_price_taker_buy_price)
 *           # actual balance lower than wanted, thus need to buy
 *       if is_buy:             # <<<<<<<<<<<<<<
 *           #  check balance to check weather you can buy the asset
 *         if self._balance_fix_maker: #in this case prioritze maker orders
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":549
 * 
 *       else: # if is sell
 *         if self._balance_fix_maker:             # <<<<<<<<<<<<<<
 *           # check balance to chech weather you can sell the asset
 *           if maker_available_balance_base > order_size_base:
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->_balance_fix_maker); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 549, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":551
 *         if self._balance_fix_maker:
 *           # check balance to chech weather you can sell the asset
 *           if maker_available_balance_base > order_size_base:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 *             return "sell_maker"
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_maker_available_balance_base, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 551, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":552
 *           # check balance to chech weather you can sell the asset
 *           if maker_available_balance_base > order_size_base:
 *             self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")             # <<<<<<<<<<<<<<
 *             return "sell_maker"
 *           elif taker_available_balance_base > order_size_base:
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Maker_enough_base_balance);
        __pyx_t_6 += 26;
        __Pyx_GIVEREF(__pyx_kp_u_Maker_enough_base_balance);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Maker_enough_base_balance);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_available_balance_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_to_sell);
        __pyx_t_6 += 10;
        __Pyx_GIVEREF(__pyx_kp_u_to_sell);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_to_sell);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_will_place_a_Maker_sell_order);
        __pyx_t_6 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_will_place_a_Maker_sell_order);
        PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_will_place_a_Maker_sell_order);
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":553
 *           if maker_available_balance_base > order_size_base:
 *             self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 *             return "sell_maker"             # <<<<<<<<<<<<<<
 *           elif taker_available_balance_base > order_size_base:
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_n_u_sell_maker);
        __pyx_r = __pyx_n_u_sell_maker;
        goto __pyx_L0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":551
 *         if self._balance_fix_maker:
 *           # check balance to chech weather you can sell the asset
 *           if maker_available_balance_base > order_size_base:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 *             return "sell_maker"
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":554
 *             self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 *             return "sell_maker"
 *           elif taker_available_balance_base > order_size_base:             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 *               return "sell_taker"
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_taker_available_balance_base, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 554, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":555
 *             return "sell_maker"
 *           elif taker_available_balance_base > order_size_base:
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")             # <<<<<<<<<<<<<<
 *               return "sell_taker"
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Taker_enough_base_balance);
        __pyx_t_6 += 26;
        __Pyx_GIVEREF(__pyx_kp_u_Taker_enough_base_balance);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Taker_enough_base_balance);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_available_balance_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_to_sell_2);
        __pyx_t_6 += 9;
        __Pyx_GIVEREF(__pyx_kp_u_to_sell_2);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_to_sell_2);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_will_place_a_taker_sell_order);
        __pyx_t_6 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_will_place_a_taker_sell_order);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_will_place_a_taker_sell_order);
        __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":556
 *           elif taker_available_balance_base > order_size_base:
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 *               return "sell_taker"             # <<<<<<<<<<<<<<
 * 
 *           else:  # not enough balance to place it on one available exchange
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_n_u_sell_taker);
        __pyx_r = __pyx_n_u_sell_taker;
        goto __pyx_L0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":554
 *             self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 *             return "sell_maker"
 *           elif taker_available_balance_base > order_size_base:             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 *               return "sell_taker"
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":559
 * 
 *           else:  # not enough balance to place it on one available exchange
 *               if (maker_available_balance_base + taker_available_balance_base) > order_size_base:             # <<<<<<<<<<<<<<
 *                   return "sell_maker_taker"
 *                   self.logger().info(f"Enough base balane on both exchanges only, Maker: {maker_available_balance_base}, Taker:{taker_available_balance_base}, Total: {(maker_available_balance_base + taker_available_balance_base)}, to sell {order_size_base}, will place taker and maker sell")
 */
      /*else*/ {
        __pyx_t_3 = PyNumber_Add(__pyx_v_maker_available_balance_base, __pyx_v_taker_available_balance_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":560
 *           else:  # not enough balance to place it on one available exchange
 *               if (maker_available_balance_base + taker_available_balance_base) > order_size_base:
 *                   return "sell_maker_taker"             # <<<<<<<<<<<<<<
 *                   self.logger().info(f"Enough base balane on both exchanges only, Maker: {maker_available_balance_base}, Taker:{taker_available_balance_base}, Total: {(maker_available_balance_base + taker_available_balance_base)}, to sell {order_size_base}, will place taker and maker sell")
 *               else:
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_n_u_sell_maker_taker);
          __pyx_r = __pyx_n_u_sell_maker_taker;
          goto __pyx_L0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":559
 * 
 *           else:  # not enough balance to place it on one available exchange
 *               if (maker_available_balance_base + taker_available_balance_base) > order_size_base:             # <<<<<<<<<<<<<<
 *                   return "sell_maker_taker"
 *                   self.logger().info(f"Enough base balane on both exchanges only, Maker: {maker_available_balance_base}, Taker:{taker_available_balance_base}, Total: {(maker_available_balance_base + taker_available_balance_base)}, to sell {order_size_base}, will place taker and maker sell")
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":563
 *                   self.logger().info(f"Enough base balane on both exchanges only, Maker: {maker_available_balance_base}, Taker:{taker_available_balance_base}, Total: {(maker_available_balance_base + taker_available_balance_base)}, to sell {order_size_base}, will place taker and maker sell")
 *               else:
 *                   self.logger().info(f"Not enough base balance to sell. order size: {order_size_base}")             # <<<<<<<<<<<<<<
 *                   return False
 *         else:
 */
        /*else*/ {
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Not_enough_base_balance_to_sell, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":564
 *               else:
 *                   self.logger().info(f"Not enough base balance to sell. order size: {order_size_base}")
 *                   return False             # <<<<<<<<<<<<<<
 *         else:
 * 
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_False);
          __pyx_r = Py_False;
          goto __pyx_L0;
        }
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":549
 * 
 *       else: # if is sell
 *         if self._balance_fix_maker:             # <<<<<<<<<<<<<<
 *           # check balance to chech weather you can sell the asset
 *           if maker_available_balance_base > order_size_base:
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":567
 *         else:
 * 
 *           if taker_available_balance_base > order_size_base:             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 *               return "sell_taker"
 */
    /*else*/ {
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_taker_available_balance_base, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 567, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":568
 * 
 *           if taker_available_balance_base > order_size_base:
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")             # <<<<<<<<<<<<<<
 *               return "sell_taker"
 *           elif maker_available_balance_base > order_size_base:
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Taker_enough_base_balance);
        __pyx_t_6 += 26;
        __Pyx_GIVEREF(__pyx_kp_u_Taker_enough_base_balance);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Taker_enough_base_balance);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_available_balance_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_to_sell_2);
        __pyx_t_6 += 9;
        __Pyx_GIVEREF(__pyx_kp_u_to_sell_2);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_to_sell_2);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_will_place_a_taker_sell_order);
        __pyx_t_6 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_will_place_a_taker_sell_order);
        PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_will_place_a_taker_sell_order);
        __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":569
 *           if taker_available_balance_base > order_size_base:
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 *               return "sell_taker"             # <<<<<<<<<<<<<<
 *           elif maker_available_balance_base > order_size_base:
 *               self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_n_u_sell_taker);
        __pyx_r = __pyx_n_u_sell_taker;
        goto __pyx_L0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":567
 *         else:
 * 
 *           if taker_available_balance_base > order_size_base:             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 *               return "sell_taker"
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":570
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 *               return "sell_taker"
 *           elif maker_available_balance_base > order_size_base:             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 *               return "sell_maker"
 */
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_maker_available_balance_base, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":571
 *               return "sell_taker"
 *           elif maker_available_balance_base > order_size_base:
 *               self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")             # <<<<<<<<<<<<<<
 *               return "sell_maker"
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Maker_enough_base_balance);
        __pyx_t_6 += 26;
        __Pyx_GIVEREF(__pyx_kp_u_Maker_enough_base_balance);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Maker_enough_base_balance);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_available_balance_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_to_sell);
        __pyx_t_6 += 10;
        __Pyx_GIVEREF(__pyx_kp_u_to_sell);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_to_sell);
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_will_place_a_Maker_sell_order);
        __pyx_t_6 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_will_place_a_Maker_sell_order);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_will_place_a_Maker_sell_order);
        __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":572
 *           elif maker_available_balance_base > order_size_base:
 *               self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 *               return "sell_maker"             # <<<<<<<<<<<<<<
 * 
 *           else:  # not enough balance to place it on one available exchange
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_n_u_sell_maker);
        __pyx_r = __pyx_n_u_sell_maker;
        goto __pyx_L0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":570
 *               self.logger().info(f"Taker enough base balance {taker_available_balance_base} to sell {order_size_base}, will place a taker sell order")
 *               return "sell_taker"
 *           elif maker_available_balance_base > order_size_base:             # <<<<<<<<<<<<<<
 *               self.logger().info(f"Maker enough base balance {maker_available_balance_base}, to sell {order_size_base}, will place a Maker sell order")
 *               return "sell_maker"
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":575
 * 
 *           else:  # not enough balance to place it on one available exchange
 *               if (maker_available_balance_base + taker_available_balance_base) > order_size_base:             # <<<<<<<<<<<<<<
 *                   return "sell_maker_taker"
 *                   self.logger().info(f"Enough base balane on both exchanges only, Maker: {maker_available_balance_base}, Taker:{taker_available_balance_base}, Total: {(maker_available_balance_base + taker_available_balance_base)}, to sell {order_size_base}, will place taker and maker sell")
 */
      /*else*/ {
        __pyx_t_4 = PyNumber_Add(__pyx_v_maker_available_balance_base, __pyx_v_taker_available_balance_base); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_v_order_size_base, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":576
 *           else:  # not enough balance to place it on one available exchange
 *               if (maker_available_balance_base + taker_available_balance_base) > order_size_base:
 *                   return "sell_maker_taker"             # <<<<<<<<<<<<<<
 *                   self.logger().info(f"Enough base balane on both exchanges only, Maker: {maker_available_balance_base}, Taker:{taker_available_balance_base}, Total: {(maker_available_balance_base + taker_available_balance_base)}, to sell {order_size_base}, will place taker and maker sell")
 *               else:
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_n_u_sell_maker_taker);
          __pyx_r = __pyx_n_u_sell_maker_taker;
          goto __pyx_L0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":575
 * 
 *           else:  # not enough balance to place it on one available exchange
 *               if (maker_available_balance_base + taker_available_balance_base) > order_size_base:             # <<<<<<<<<<<<<<
 *                   return "sell_maker_taker"
 *                   self.logger().info(f"Enough base balane on both exchanges only, Maker: {maker_available_balance_base}, Taker:{taker_available_balance_base}, Total: {(maker_available_balance_base + taker_available_balance_base)}, to sell {order_size_base}, will place taker and maker sell")
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":579
 *                   self.logger().info(f"Enough base balane on both exchanges only, Maker: {maker_available_balance_base}, Taker:{taker_available_balance_base}, Total: {(maker_available_balance_base + taker_available_balance_base)}, to sell {order_size_base}, will place taker and maker sell")
 *               else:
 *                   self.logger().info(f"Not enough base balance to sell. order size: {order_size_base}")             # <<<<<<<<<<<<<<
 *                   return False
 * 
 */
        /*else*/ {
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Not_enough_base_balance_to_sell, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":580
 *               else:
 *                   self.logger().info(f"Not enough base balance to sell. order size: {order_size_base}")
 *                   return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_False);
          __pyx_r = Py_False;
          goto __pyx_L0;
        }
      }
    }
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":489
 * 
 * 
 *     cdef c_check_available_balance(self, is_buy: bool, market_pair):             # <<<<<<<<<<<<<<
 *       cdef:
 *           ExchangeBase maker_market = market_pair.maker.market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_available_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_v_mid_price_taker);
  __Pyx_XDECREF(__pyx_v_mid_price_maker);
  __Pyx_XDECREF(__pyx_v_mid_price);
  __Pyx_XDECREF(__pyx_v_mid_price_taker_buy_price);
  __Pyx_XDECREF(__pyx_v_mid_price_maker_buy_price);
  __Pyx_XDECREF(__pyx_v_mid_price_taker_sell_price);
  __Pyx_XDECREF(__pyx_v_mid_price_maker_sell_price);
  __Pyx_XDECREF(__pyx_v_maker_available_balance_base);
  __Pyx_XDECREF(__pyx_v_taker_available_balance_base);
  __Pyx_XDECREF(__pyx_v_maker_available_balance_quote);
  __Pyx_XDECREF(__pyx_v_taker_available_balance_quote);
  __Pyx_XDECREF(__pyx_v_total_base_balance);
  __Pyx_XDECREF(__pyx_v_pref_base_min_actual);
  __Pyx_XDECREF(__pyx_v_order_size_base);
  __Pyx_XDECREF(__pyx_v_maker_order_size_in_quote);
  __Pyx_XDECREF(__pyx_v_taker_order_size_in_quote);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":586
 * 
 * 
 *     cdef c_place_fixing_order(self, is_maker: bool, is_buy: bool, market_pair):             # <<<<<<<<<<<<<<
 *       cdef:
 *           ExchangeBase maker_market = market_pair.maker.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_fixing_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_is_maker, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_taker_trading_pair = 0;
  PyObject *__pyx_v_maker_trading_pair = 0;
  PyObject *__pyx_v_mid_price_taker = 0;
  PyObject *__pyx_v_mid_price_maker = 0;
  CYTHON_UNUSED PyObject *__pyx_v_mid_price = 0;
  PyObject *__pyx_v_mid_price_taker_buy_price = 0;
  PyObject *__pyx_v_mid_price_maker_buy_price = 0;
  PyObject *__pyx_v_mid_price_taker_sell_price = 0;
  PyObject *__pyx_v_mid_price_maker_sell_price = 0;
  PyObject *__pyx_v_total_base_balance = 0;
  PyObject *__pyx_v_pref_base_min_actual = 0;
  PyObject *__pyx_v_order_size_base = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_place_fixing_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":588
 *     cdef c_place_fixing_order(self, is_maker: bool, is_buy: bool, market_pair):
 *       cdef:
 *           ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *           ExchangeBase taker_market = market_pair.taker.market
 *           object taker_trading_pair = market_pair.taker.trading_pair
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 588, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":589
 *       cdef:
 *           ExchangeBase maker_market = market_pair.maker.market
 *           ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *           object taker_trading_pair = market_pair.taker.trading_pair
 *           object maker_trading_pair = market_pair.maker.trading_pair
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 589, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":590
 *           ExchangeBase maker_market = market_pair.maker.market
 *           ExchangeBase taker_market = market_pair.taker.market
 *           object taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 *           object maker_trading_pair = market_pair.maker.trading_pair
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_taker_trading_pair = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":591
 *           ExchangeBase taker_market = market_pair.taker.market
 *           object taker_trading_pair = market_pair.taker.trading_pair
 *           object maker_trading_pair = market_pair.maker.trading_pair             # <<<<<<<<<<<<<<
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_maker_trading_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":592
 *           object taker_trading_pair = market_pair.taker.trading_pair
 *           object maker_trading_pair = market_pair.maker.trading_pair
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)             # <<<<<<<<<<<<<<
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_taker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_taker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":593
 *           object maker_trading_pair = market_pair.maker.trading_pair
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)             # <<<<<<<<<<<<<<
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_maker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_maker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":594
 *           object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)             # <<<<<<<<<<<<<<
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_maker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_maker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":595
 *           object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_taker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker_buy_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":596
 *           object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_maker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker_buy_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":597
 *           object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_taker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker_sell_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":598
 *           object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_maker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker_sell_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":599
 *           object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *           object order_size_base = abs(pref_base_min_actual)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 599, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 599, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_total_base_balance = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":600
 *           object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)             # <<<<<<<<<<<<<<
 *           object order_size_base = abs(pref_base_min_actual)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_target_base_balance, __pyx_v_total_base_balance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pref_base_min_actual = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":601
 *           object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *           object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *           object order_size_base = abs(pref_base_min_actual)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_v_pref_base_min_actual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_order_size_base = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":605
 * 
 * 
 *       if is_buy and is_maker:             # <<<<<<<<<<<<<<
 *           self.logger().info("Going to place a maker buy order to fix balance")
 *           self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_buy_price))
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 605, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_is_maker); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_t_5 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":606
 * 
 *       if is_buy and is_maker:
 *           self.logger().info("Going to place a maker buy order to fix balance")             # <<<<<<<<<<<<<<
 *           self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_buy_price))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_kp_u_Going_to_place_a_maker_buy_order) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_Going_to_place_a_maker_buy_order);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":607
 *       if is_buy and is_maker:
 *           self.logger().info("Going to place a maker buy order to fix balance")
 *           self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_buy_price))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v_mid_price_maker_buy_price) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_mid_price_maker_buy_price);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_3, 0, __pyx_v_order_size_base, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":605
 * 
 * 
 *       if is_buy and is_maker:             # <<<<<<<<<<<<<<
 *           self.logger().info("Going to place a maker buy order to fix balance")
 *           self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_buy_price))
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":610
 * 
 * 
 *       if is_buy and not is_maker:             # <<<<<<<<<<<<<<
 *           self.logger().info("Going to place a taker buy order to fix balance")
 *           self.c_place_order(market_pair, True, market_pair.taker, False, order_size_base, Decimal(mid_price_taker_buy_price))
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 610, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_is_maker); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_t_7 = ((!__pyx_t_6) != 0);
  __pyx_t_5 = __pyx_t_7;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":611
 * 
 *       if is_buy and not is_maker:
 *           self.logger().info("Going to place a taker buy order to fix balance")             # <<<<<<<<<<<<<<
 *           self.c_place_order(market_pair, True, market_pair.taker, False, order_size_base, Decimal(mid_price_taker_buy_price))
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_kp_u_Going_to_place_a_taker_buy_order) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_Going_to_place_a_taker_buy_order);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":612
 *       if is_buy and not is_maker:
 *           self.logger().info("Going to place a taker buy order to fix balance")
 *           self.c_place_order(market_pair, True, market_pair.taker, False, order_size_base, Decimal(mid_price_taker_buy_price))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_mid_price_taker_buy_price) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_mid_price_taker_buy_price);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_2, 0, __pyx_v_order_size_base, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":610
 * 
 * 
 *       if is_buy and not is_maker:             # <<<<<<<<<<<<<<
 *           self.logger().info("Going to place a taker buy order to fix balance")
 *           self.c_place_order(market_pair, True, market_pair.taker, False, order_size_base, Decimal(mid_price_taker_buy_price))
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":616
 * 
 * 
 *       if not is_buy and is_maker:             # <<<<<<<<<<<<<<
 *           self.logger().info("Going to place a maker sell order to fix balance")
 *           self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_sell_price))
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_t_6 = ((!__pyx_t_7) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_is_maker); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_t_5 = __pyx_t_6;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":617
 * 
 *       if not is_buy and is_maker:
 *           self.logger().info("Going to place a maker sell order to fix balance")             # <<<<<<<<<<<<<<
 *           self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_sell_price))
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_Going_to_place_a_maker_sell_orde) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_Going_to_place_a_maker_sell_orde);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":618
 *       if not is_buy and is_maker:
 *           self.logger().info("Going to place a maker sell order to fix balance")
 *           self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_sell_price))             # <<<<<<<<<<<<<<
 * 
 *       if not is_buy and not is_maker:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_mid_price_maker_sell_price) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_mid_price_maker_sell_price);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_1, 0, __pyx_v_order_size_base, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":616
 * 
 * 
 *       if not is_buy and is_maker:             # <<<<<<<<<<<<<<
 *           self.logger().info("Going to place a maker sell order to fix balance")
 *           self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_sell_price))
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":620
 *           self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_sell_price))
 * 
 *       if not is_buy and not is_maker:             # <<<<<<<<<<<<<<
 *           self.logger().info("Going to place a taker sell order to fix balance ")
 *           self.c_place_order(market_pair, False, market_pair.taker, False, order_size_base, Decimal(mid_price_taker_sell_price))
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_t_7 = ((!__pyx_t_6) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_is_maker); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_t_6 = ((!__pyx_t_7) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":621
 * 
 *       if not is_buy and not is_maker:
 *           self.logger().info("Going to place a taker sell order to fix balance ")             # <<<<<<<<<<<<<<
 *           self.c_place_order(market_pair, False, market_pair.taker, False, order_size_base, Decimal(mid_price_taker_sell_price))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_kp_u_Going_to_place_a_taker_sell_orde) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_Going_to_place_a_taker_sell_orde);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":622
 *       if not is_buy and not is_maker:
 *           self.logger().info("Going to place a taker sell order to fix balance ")
 *           self.c_place_order(market_pair, False, market_pair.taker, False, order_size_base, Decimal(mid_price_taker_sell_price))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v_mid_price_taker_sell_price) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_mid_price_taker_sell_price);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_3, 0, __pyx_v_order_size_base, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":620
 *           self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(mid_price_maker_sell_price))
 * 
 *       if not is_buy and not is_maker:             # <<<<<<<<<<<<<<
 *           self.logger().info("Going to place a taker sell order to fix balance ")
 *           self.c_place_order(market_pair, False, market_pair.taker, False, order_size_base, Decimal(mid_price_taker_sell_price))
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":586
 * 
 * 
 *     cdef c_place_fixing_order(self, is_maker: bool, is_buy: bool, market_pair):             # <<<<<<<<<<<<<<
 *       cdef:
 *           ExchangeBase maker_market = market_pair.maker.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_place_fixing_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_v_mid_price_taker);
  __Pyx_XDECREF(__pyx_v_mid_price_maker);
  __Pyx_XDECREF(__pyx_v_mid_price);
  __Pyx_XDECREF(__pyx_v_mid_price_taker_buy_price);
  __Pyx_XDECREF(__pyx_v_mid_price_maker_buy_price);
  __Pyx_XDECREF(__pyx_v_mid_price_taker_sell_price);
  __Pyx_XDECREF(__pyx_v_mid_price_maker_sell_price);
  __Pyx_XDECREF(__pyx_v_total_base_balance);
  __Pyx_XDECREF(__pyx_v_pref_base_min_actual);
  __Pyx_XDECREF(__pyx_v_order_size_base);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":625
 * 
 * 
 *     cdef c_cancel_all_maker_limit_orders(self, market_pair):             # <<<<<<<<<<<<<<
 *             market_tuple = market_pair.maker
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_all_maker_limit_orders(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_v_market_tuple = NULL;
  PyObject *__pyx_v_limit_orders = NULL;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_cancel_all_maker_limit_orders", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":626
 * 
 *     cdef c_cancel_all_maker_limit_orders(self, market_pair):
 *             market_tuple = market_pair.maker             # <<<<<<<<<<<<<<
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *             limit_orders = limit_orders.get(market_tuple, {})
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_tuple = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":627
 *     cdef c_cancel_all_maker_limit_orders(self, market_pair):
 *             market_tuple = market_pair.maker
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()             # <<<<<<<<<<<<<<
 *             limit_orders = limit_orders.get(market_tuple, {})
 *             for order in limit_orders:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_orders(__pyx_v_self->__pyx_base._sb_order_tracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_limit_orders = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":628
 *             market_tuple = market_pair.maker
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *             limit_orders = limit_orders.get(market_tuple, {})             # <<<<<<<<<<<<<<
 *             for order in limit_orders:
 *               self.c_cancel_order(market_tuple, order)
 */
  if (unlikely(__pyx_v_limit_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 628, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_limit_orders, __pyx_v_market_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_limit_orders, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":629
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *             limit_orders = limit_orders.get(market_tuple, {})
 *             for order in limit_orders:             # <<<<<<<<<<<<<<
 *               self.c_cancel_order(market_tuple, order)
 *               self.c_stop_tracking_limit_order(market_tuple, order)
 */
  if (likely(PyList_CheckExact(__pyx_v_limit_orders)) || PyTuple_CheckExact(__pyx_v_limit_orders)) {
    __pyx_t_2 = __pyx_v_limit_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 629, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 629, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 629, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":630
 *             limit_orders = limit_orders.get(market_tuple, {})
 *             for order in limit_orders:
 *               self.c_cancel_order(market_tuple, order)             # <<<<<<<<<<<<<<
 *               self.c_stop_tracking_limit_order(market_tuple, order)
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_order))||((__pyx_v_order) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_order)->tp_name), 0))) __PYX_ERR(0, 630, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_tuple, ((PyObject*)__pyx_v_order)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":631
 *             for order in limit_orders:
 *               self.c_cancel_order(market_tuple, order)
 *               self.c_stop_tracking_limit_order(market_tuple, order)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_order))||((__pyx_v_order) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_order)->tp_name), 0))) __PYX_ERR(0, 631, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_stop_tracking_limit_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_tuple, ((PyObject*)__pyx_v_order)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":629
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *             limit_orders = limit_orders.get(market_tuple, {})
 *             for order in limit_orders:             # <<<<<<<<<<<<<<
 *               self.c_cancel_order(market_tuple, order)
 *               self.c_stop_tracking_limit_order(market_tuple, order)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":625
 * 
 * 
 *     cdef c_cancel_all_maker_limit_orders(self, market_pair):             # <<<<<<<<<<<<<<
 *             market_tuple = market_pair.maker
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_cancel_all_maker_limit_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market_tuple);
  __Pyx_XDECREF(__pyx_v_limit_orders);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":634
 * 
 * 
 *     cdef c_cancel_all_taker_limit_orders(self, market_pair):             # <<<<<<<<<<<<<<
 *             market_tuple = market_pair.taker
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_all_taker_limit_orders(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_v_market_tuple = NULL;
  PyObject *__pyx_v_limit_orders = NULL;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_cancel_all_taker_limit_orders", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":635
 * 
 *     cdef c_cancel_all_taker_limit_orders(self, market_pair):
 *             market_tuple = market_pair.taker             # <<<<<<<<<<<<<<
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *             limit_orders = limit_orders.get(market_tuple, {})
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_tuple = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":636
 *     cdef c_cancel_all_taker_limit_orders(self, market_pair):
 *             market_tuple = market_pair.taker
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()             # <<<<<<<<<<<<<<
 *             limit_orders = limit_orders.get(market_tuple, {})
 *             for order in limit_orders:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_orders(__pyx_v_self->__pyx_base._sb_order_tracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_limit_orders = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":637
 *             market_tuple = market_pair.taker
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *             limit_orders = limit_orders.get(market_tuple, {})             # <<<<<<<<<<<<<<
 *             for order in limit_orders:
 *               self.c_cancel_order(market_tuple, order)
 */
  if (unlikely(__pyx_v_limit_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 637, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_limit_orders, __pyx_v_market_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_limit_orders, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":638
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *             limit_orders = limit_orders.get(market_tuple, {})
 *             for order in limit_orders:             # <<<<<<<<<<<<<<
 *               self.c_cancel_order(market_tuple, order)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_limit_orders)) || PyTuple_CheckExact(__pyx_v_limit_orders)) {
    __pyx_t_2 = __pyx_v_limit_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 638, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 638, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":639
 *             limit_orders = limit_orders.get(market_tuple, {})
 *             for order in limit_orders:
 *               self.c_cancel_order(market_tuple, order)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_order))||((__pyx_v_order) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_order)->tp_name), 0))) __PYX_ERR(0, 639, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_tuple, ((PyObject*)__pyx_v_order)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":638
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 *             limit_orders = limit_orders.get(market_tuple, {})
 *             for order in limit_orders:             # <<<<<<<<<<<<<<
 *               self.c_cancel_order(market_tuple, order)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":634
 * 
 * 
 *     cdef c_cancel_all_taker_limit_orders(self, market_pair):             # <<<<<<<<<<<<<<
 *             market_tuple = market_pair.taker
 *             limit_orders = self._sb_order_tracker.c_get_limit_orders()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_cancel_all_taker_limit_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market_tuple);
  __Pyx_XDECREF(__pyx_v_limit_orders);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":644
 * 
 * 
 *     cdef c_balance_fix_fix(self, market_pair):             # <<<<<<<<<<<<<<
 *           cdef:
 *               ExchangeBase maker_market = market_pair.maker.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_balance_fix_fix(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_taker_trading_pair = 0;
  PyObject *__pyx_v_maker_trading_pair = 0;
  PyObject *__pyx_v_mid_price_taker = 0;
  PyObject *__pyx_v_mid_price_maker = 0;
  CYTHON_UNUSED PyObject *__pyx_v_mid_price = 0;
  PyObject *__pyx_v_mid_price_taker_buy_price = 0;
  PyObject *__pyx_v_mid_price_maker_buy_price = 0;
  PyObject *__pyx_v_mid_price_taker_sell_price = 0;
  PyObject *__pyx_v_mid_price_maker_sell_price = 0;
  PyObject *__pyx_v_total_base_balance = 0;
  PyObject *__pyx_v_pref_base_min_actual = 0;
  PyObject *__pyx_v_maker_available_balance_base = 0;
  PyObject *__pyx_v_taker_available_balance_base = 0;
  PyObject *__pyx_v_maker_available_balance_quote = 0;
  PyObject *__pyx_v_taker_available_balance_quote = 0;
  PyObject *__pyx_v_order_size_base = 0;
  PyObject *__pyx_v_maker_order_size_in_quote = 0;
  PyObject *__pyx_v_taker_order_size_in_quote = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_balance_fix_fix", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":646
 *     cdef c_balance_fix_fix(self, market_pair):
 *           cdef:
 *               ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *               ExchangeBase taker_market = market_pair.taker.market
 *               object taker_trading_pair = market_pair.taker.trading_pair
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":647
 *           cdef:
 *               ExchangeBase maker_market = market_pair.maker.market
 *               ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *               object taker_trading_pair = market_pair.taker.trading_pair
 *               object maker_trading_pair = market_pair.maker.trading_pair
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 647, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":648
 *               ExchangeBase maker_market = market_pair.maker.market
 *               ExchangeBase taker_market = market_pair.taker.market
 *               object taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 *               object maker_trading_pair = market_pair.maker.trading_pair
 *               object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_taker_trading_pair = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":649
 *               ExchangeBase taker_market = market_pair.taker.market
 *               object taker_trading_pair = market_pair.taker.trading_pair
 *               object maker_trading_pair = market_pair.maker.trading_pair             # <<<<<<<<<<<<<<
 *               object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *               object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_maker_trading_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":650
 *               object taker_trading_pair = market_pair.taker.trading_pair
 *               object maker_trading_pair = market_pair.maker.trading_pair
 *               object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)             # <<<<<<<<<<<<<<
 *               object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *               object mid_price = maker_market.get_mid_price(maker_trading_pair)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_taker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_taker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":651
 *               object maker_trading_pair = market_pair.maker.trading_pair
 *               object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *               object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)             # <<<<<<<<<<<<<<
 *               object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *               object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_maker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_maker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":652
 *               object mid_price_taker = taker_market.get_mid_price(taker_trading_pair)
 *               object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *               object mid_price = maker_market.get_mid_price(maker_trading_pair)             # <<<<<<<<<<<<<<
 *               object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *               object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_maker_market), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_maker_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":653
 *               object mid_price_maker = maker_market.get_mid_price(maker_trading_pair)
 *               object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *               object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *               object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *               object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_taker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker_buy_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":654
 *               object mid_price = maker_market.get_mid_price(maker_trading_pair)
 *               object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *               object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *               object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *               object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_maker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker_buy_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":655
 *               object mid_price_taker_buy_price = mid_price_taker * (Decimal("1") + self._slippage_buffer_fix)
 *               object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *               object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *               object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *               object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_taker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_taker_sell_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":656
 *               object mid_price_maker_buy_price = mid_price_maker * (Decimal("1") + self._slippage_buffer_fix)
 *               object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *               object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)             # <<<<<<<<<<<<<<
 *               object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *               object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_mid_price_maker, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_mid_price_maker_sell_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":657
 *               object mid_price_taker_sell_price = mid_price_taker * (Decimal("1") - self._slippage_buffer_fix)
 *               object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *               object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 *               object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *               object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 657, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 657, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_total_base_balance = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":658
 *               object mid_price_maker_sell_price = mid_price_maker * (Decimal("1") - self._slippage_buffer_fix)
 *               object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *               object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)             # <<<<<<<<<<<<<<
 *               object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 *               object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_target_base_balance, __pyx_v_total_base_balance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pref_base_min_actual = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":659
 *               object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *               object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *               object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 *               object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)
 *               object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 659, __pyx_L1_error)
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_maker_available_balance_base = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":660
 *               object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *               object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 *               object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)             # <<<<<<<<<<<<<<
 *               object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 *               object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_taker_available_balance_base = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":661
 *               object maker_available_balance_base = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 *               object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)
 *               object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)             # <<<<<<<<<<<<<<
 *               object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)
 *               object order_size_base = abs(pref_base_min_actual)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 661, __pyx_L1_error)
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_maker_available_balance_quote = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":662
 *               object taker_available_balance_base = taker_market.c_get_available_balance(market_pair.taker.base_asset)
 *               object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 *               object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)             # <<<<<<<<<<<<<<
 *               object order_size_base = abs(pref_base_min_actual)
 *               object maker_order_size_in_quote = (order_size_base / mid_price_maker_buy_price)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 662, __pyx_L1_error)
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_taker_available_balance_quote = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":663
 *               object maker_available_balance_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 *               object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)
 *               object order_size_base = abs(pref_base_min_actual)             # <<<<<<<<<<<<<<
 *               object maker_order_size_in_quote = (order_size_base / mid_price_maker_buy_price)
 *               object taker_order_size_in_quote = (order_size_base / mid_price_taker_buy_price)
 */
  __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_v_pref_base_min_actual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_order_size_base = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":664
 *               object taker_available_balance_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset)
 *               object order_size_base = abs(pref_base_min_actual)
 *               object maker_order_size_in_quote = (order_size_base / mid_price_maker_buy_price)             # <<<<<<<<<<<<<<
 *               object taker_order_size_in_quote = (order_size_base / mid_price_taker_buy_price)
 * 
 */
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_order_size_base, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_maker_order_size_in_quote = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":665
 *               object order_size_base = abs(pref_base_min_actual)
 *               object maker_order_size_in_quote = (order_size_base / mid_price_maker_buy_price)
 *               object taker_order_size_in_quote = (order_size_base / mid_price_taker_buy_price)             # <<<<<<<<<<<<<<
 * 
 *           if self._keep_target_balance:
 */
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_order_size_base, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_taker_order_size_in_quote = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":667
 *               object taker_order_size_in_quote = (order_size_base / mid_price_taker_buy_price)
 * 
 *           if self._keep_target_balance:             # <<<<<<<<<<<<<<
 * 
 *                 if self._current_timestamp > self._restore_timer and self.c_balance_fix_check(market_pair) and not self._maker_order_update:
 */
  __pyx_t_5 = (__pyx_v_self->_keep_target_balance != 0);
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":669
 *           if self._keep_target_balance:
 * 
 *                 if self._current_timestamp > self._restore_timer and self.c_balance_fix_check(market_pair) and not self._maker_order_update:             # <<<<<<<<<<<<<<
 * 
 *                         self.c_cancel_all_taker_limit_orders(market_pair)
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_self->_restore_timer, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_balance_fix_check(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_self->_maker_order_update); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
    __pyx_t_7 = ((!__pyx_t_6) != 0);
    __pyx_t_5 = __pyx_t_7;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_5) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":671
 *                 if self._current_timestamp > self._restore_timer and self.c_balance_fix_check(market_pair) and not self._maker_order_update:
 * 
 *                         self.c_cancel_all_taker_limit_orders(market_pair)             # <<<<<<<<<<<<<<
 *                         self.c_cancel_all_maker_limit_orders(market_pair)
 *                         self.log_with_clock(
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_all_taker_limit_orders(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":672
 * 
 *                         self.c_cancel_all_taker_limit_orders(market_pair)
 *                         self.c_cancel_all_maker_limit_orders(market_pair)             # <<<<<<<<<<<<<<
 *                         self.log_with_clock(
 *                             logging.INFO,
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_all_maker_limit_orders(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":673
 *                         self.c_cancel_all_taker_limit_orders(market_pair)
 *                         self.c_cancel_all_maker_limit_orders(market_pair)
 *                         self.log_with_clock(             # <<<<<<<<<<<<<<
 *                             logging.INFO,
 *                             f"(Just canceled all orders to restore balance")
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":674
 *                         self.c_cancel_all_maker_limit_orders(market_pair)
 *                         self.log_with_clock(
 *                             logging.INFO,             # <<<<<<<<<<<<<<
 *                             f"(Just canceled all orders to restore balance")
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_INFO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, __pyx_kp_u_Just_canceled_all_orders_to_res};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, __pyx_kp_u_Just_canceled_all_orders_to_res};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 673, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_4);
        __Pyx_INCREF(__pyx_kp_u_Just_canceled_all_orders_to_res);
        __Pyx_GIVEREF(__pyx_kp_u_Just_canceled_all_orders_to_res);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_kp_u_Just_canceled_all_orders_to_res);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":677
 *                             f"(Just canceled all orders to restore balance")
 * 
 *                         self._fix_counter = self._fix_counter +1             # <<<<<<<<<<<<<<
 *                         self.log_with_clock(
 *                             logging.INFO,
 */
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_self->_fix_counter, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_v_self->_fix_counter);
      __Pyx_DECREF(__pyx_v_self->_fix_counter);
      __pyx_v_self->_fix_counter = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":678
 * 
 *                         self._fix_counter = self._fix_counter +1
 *                         self.log_with_clock(             # <<<<<<<<<<<<<<
 *                             logging.INFO,
 *                             f"(fix_counter is now at: {self._fix_counter} balance fixes")
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":679
 *                         self._fix_counter = self._fix_counter +1
 *                         self.log_with_clock(
 *                             logging.INFO,             # <<<<<<<<<<<<<<
 *                             f"(fix_counter is now at: {self._fix_counter} balance fixes")
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_logging); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 679, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_INFO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":680
 *                         self.log_with_clock(
 *                             logging.INFO,
 *                             f"(fix_counter is now at: {self._fix_counter} balance fixes")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_fix_counter_is_now_at);
      __pyx_t_10 += 24;
      __Pyx_GIVEREF(__pyx_kp_u_fix_counter_is_now_at);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_fix_counter_is_now_at);
      __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_fix_counter, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u_balance_fixes);
      __pyx_t_10 += 14;
      __Pyx_GIVEREF(__pyx_kp_u_balance_fixes);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_balance_fixes);
      __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_9, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_4, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_4, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_8, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_8, __pyx_t_1);
        __pyx_t_4 = 0;
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":683
 * 
 * 
 *                         if pref_base_min_actual > 0 and order_size_base > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                             # second time checking if there is a difference, if there is, place buy order
 *                             # here you would want to cancell all orders on the exchanges
 */
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_pref_base_min_actual, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 683, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_7) {
      } else {
        __pyx_t_5 = __pyx_t_7;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_order_size_base, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 683, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __pyx_t_7;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":686
 *                             # second time checking if there is a difference, if there is, place buy order
 *                             # here you would want to cancell all orders on the exchanges
 *                             self.logger().info(f"Timer passed {self._waiting_time} seconds, current value of Timer: {self._counter} Order_size base: {order_size_base} Base Balance: {total_base_balance}, Target Balance: {self._target_base_balance}, Diff: {pref_base_min_actual}")             # <<<<<<<<<<<<<<
 *                             # available balance with a buy order on maker side
 *                             if self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker":
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = 0;
        __pyx_t_11 = 127;
        __Pyx_INCREF(__pyx_kp_u_Timer_passed);
        __pyx_t_10 += 13;
        __Pyx_GIVEREF(__pyx_kp_u_Timer_passed);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Timer_passed);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_waiting_time, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_seconds_current_value_of_Timer);
        __pyx_t_10 += 34;
        __Pyx_GIVEREF(__pyx_kp_u_seconds_current_value_of_Timer);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_seconds_current_value_of_Timer);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_counter, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Order_size_base);
        __pyx_t_10 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_Order_size_base);
        PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_Order_size_base);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Base_Balance);
        __pyx_t_10 += 15;
        __Pyx_GIVEREF(__pyx_kp_u_Base_Balance);
        PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u_Base_Balance);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_total_base_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Target_Balance);
        __pyx_t_10 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_Target_Balance);
        PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_kp_u_Target_Balance);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_target_base_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_3, 9, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Diff);
        __pyx_t_10 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_Diff);
        PyTuple_SET_ITEM(__pyx_t_3, 10, __pyx_kp_u_Diff);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_pref_base_min_actual, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_3, 11, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_3, 12, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_1);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":688
 *                             self.logger().info(f"Timer passed {self._waiting_time} seconds, current value of Timer: {self._counter} Order_size base: {order_size_base} Base Balance: {total_base_balance}, Target Balance: {self._target_base_balance}, Diff: {pref_base_min_actual}")
 *                             # available balance with a buy order on maker side
 *                             if self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker":             # <<<<<<<<<<<<<<
 *                               if self._balance_fix_maker:
 *                                 self._maker_order_update = True
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_available_balance(__pyx_v_self, Py_True, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_buy_maker, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 688, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":689
 *                             # available balance with a buy order on maker side
 *                             if self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker":
 *                               if self._balance_fix_maker:             # <<<<<<<<<<<<<<
 *                                 self._maker_order_update = True
 *                               else:
 */
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->_balance_fix_maker); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 689, __pyx_L1_error)
          if (__pyx_t_5) {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":690
 *                             if self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker":
 *                               if self._balance_fix_maker:
 *                                 self._maker_order_update = True             # <<<<<<<<<<<<<<
 *                               else:
 *                                 self.c_place_fixing_order(is_maker = True, is_buy = True, market_pair = market_pair)  # place maker buy order
 */
            __Pyx_INCREF(Py_True);
            __Pyx_GIVEREF(Py_True);
            __Pyx_GOTREF(__pyx_v_self->_maker_order_update);
            __Pyx_DECREF(__pyx_v_self->_maker_order_update);
            __pyx_v_self->_maker_order_update = Py_True;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":689
 *                             # available balance with a buy order on maker side
 *                             if self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker":
 *                               if self._balance_fix_maker:             # <<<<<<<<<<<<<<
 *                                 self._maker_order_update = True
 *                               else:
 */
            goto __pyx_L12;
          }

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":692
 *                                 self._maker_order_update = True
 *                               else:
 *                                 self.c_place_fixing_order(is_maker = True, is_buy = True, market_pair = market_pair)  # place maker buy order             # <<<<<<<<<<<<<<
 *                                 self._counter = 0
 * 
 */
          /*else*/ {
            __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_fixing_order(__pyx_v_self, Py_True, Py_True, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":693
 *                               else:
 *                                 self.c_place_fixing_order(is_maker = True, is_buy = True, market_pair = market_pair)  # place maker buy order
 *                                 self._counter = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __Pyx_INCREF(__pyx_int_0);
            __Pyx_GIVEREF(__pyx_int_0);
            __Pyx_GOTREF(__pyx_v_self->_counter);
            __Pyx_DECREF(__pyx_v_self->_counter);
            __pyx_v_self->_counter = __pyx_int_0;
          }
          __pyx_L12:;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":688
 *                             self.logger().info(f"Timer passed {self._waiting_time} seconds, current value of Timer: {self._counter} Order_size base: {order_size_base} Base Balance: {total_base_balance}, Target Balance: {self._target_base_balance}, Diff: {pref_base_min_actual}")
 *                             # available balance with a buy order on maker side
 *                             if self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker":             # <<<<<<<<<<<<<<
 *                               if self._balance_fix_maker:
 *                                 self._maker_order_update = True
 */
          goto __pyx_L11;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":697
 * 
 *                             # available balance with a buy order on taker side
 *                             elif self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_taker":             # <<<<<<<<<<<<<<
 *                                  self.c_place_fixing_order(is_maker = False, is_buy = True, market_pair = market_pair)  # place taker buy order
 * 
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_available_balance(__pyx_v_self, Py_True, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_buy_taker, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 697, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":698
 *                             # available balance with a buy order on taker side
 *                             elif self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_taker":
 *                                  self.c_place_fixing_order(is_maker = False, is_buy = True, market_pair = market_pair)  # place taker buy order             # <<<<<<<<<<<<<<
 * 
 *                             elif self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker_taker":
 */
          __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_fixing_order(__pyx_v_self, Py_False, Py_True, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 698, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":697
 * 
 *                             # available balance with a buy order on taker side
 *                             elif self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_taker":             # <<<<<<<<<<<<<<
 *                                  self.c_place_fixing_order(is_maker = False, is_buy = True, market_pair = market_pair)  # place taker buy order
 * 
 */
          goto __pyx_L11;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":700
 *                                  self.c_place_fixing_order(is_maker = False, is_buy = True, market_pair = market_pair)  # place taker buy order
 * 
 *                             elif self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker_taker":             # <<<<<<<<<<<<<<
 *                                         # buy as much as possible on the taker exchange
 *                                         self.c_place_order(market_pair, True, market_pair.taker, False, min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price)), maker_order_size_in_quote), Decimal(mid_price_taker_buy_price))
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_available_balance(__pyx_v_self, Py_True, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 700, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_buy_maker_taker, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 700, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":702
 *                             elif self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker_taker":
 *                                         # buy as much as possible on the taker exchange
 *                                         self.c_place_order(market_pair, True, market_pair.taker, False, min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price)), maker_order_size_in_quote), Decimal(mid_price_taker_buy_price))             # <<<<<<<<<<<<<<
 *                                         self.logger().info(f"Place buy order on taker and maker - Taker buy order is placed with most available balance or at max size of the order to restore balance {min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price)), maker_order_size_in_quote)}")
 * 
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 702, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_INCREF(__pyx_v_maker_order_size_in_quote);
          __pyx_t_12 = __pyx_v_maker_order_size_in_quote;
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 702, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 702, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_4 = PyObject_RichCompare(__pyx_t_12, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 702, __pyx_L1_error)
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 702, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_5) {
            __Pyx_INCREF(__pyx_t_12);
            __pyx_t_3 = __pyx_t_12;
          } else {
            __Pyx_INCREF(__pyx_t_1);
            __pyx_t_3 = __pyx_t_1;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __pyx_t_3;
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_mid_price_taker_buy_price) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_mid_price_taker_buy_price);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 702, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_2, 0, __pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":703
 *                                         # buy as much as possible on the taker exchange
 *                                         self.c_place_order(market_pair, True, market_pair.taker, False, min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price)), maker_order_size_in_quote), Decimal(mid_price_taker_buy_price))
 *                                         self.logger().info(f"Place buy order on taker and maker - Taker buy order is placed with most available balance or at max size of the order to restore balance {min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price)), maker_order_size_in_quote)}")             # <<<<<<<<<<<<<<
 * 
 *                                         # if there is enough remaining on the maker exchange, also place an order on the maker exchange with the remainging volume
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_INCREF(__pyx_v_maker_order_size_in_quote);
          __pyx_t_3 = __pyx_v_maker_order_size_in_quote;
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_13 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_2 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_13, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_9 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 703, __pyx_L1_error)
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_5) {
            __Pyx_INCREF(__pyx_t_3);
            __pyx_t_4 = __pyx_t_3;
          } else {
            __Pyx_INCREF(__pyx_t_2);
            __pyx_t_4 = __pyx_t_2;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Place_buy_order_on_taker_and_mak, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_4);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":706
 * 
 *                                         # if there is enough remaining on the maker exchange, also place an order on the maker exchange with the remainging volume
 *                                         if maker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price > maker_available_balance_quote / mid_price_maker_buy_price * (Decimal("1"))):             # <<<<<<<<<<<<<<
 *                                             self.c_place_order(market_pair, True, market_pair.maker, False, min(Decimal((taker_order_size_in_quote - min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price))))),maker_order_size_in_quote), Decimal(mid_price_maker_buy_price))
 *                                             self.logger().info(f"Place buy order on taker and maker - The remaining amount of buy order is placed on the maker exchange {Decimal((taker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price)))}")
 */
          __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_1);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyNumber_Multiply(__pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyNumber_Subtract(__pyx_v_maker_order_size_in_quote, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 706, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_5) {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":707
 *                                         # if there is enough remaining on the maker exchange, also place an order on the maker exchange with the remainging volume
 *                                         if maker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price > maker_available_balance_quote / mid_price_maker_buy_price * (Decimal("1"))):
 *                                             self.c_place_order(market_pair, True, market_pair.maker, False, min(Decimal((taker_order_size_in_quote - min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price))))),maker_order_size_in_quote), Decimal(mid_price_maker_buy_price))             # <<<<<<<<<<<<<<
 *                                             self.logger().info(f"Place buy order on taker and maker - The remaining amount of buy order is placed on the maker exchange {Decimal((taker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price)))}")
 * 
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_INCREF(__pyx_v_maker_order_size_in_quote);
            __pyx_t_4 = __pyx_v_maker_order_size_in_quote;
            __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_13 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_14 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
              __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
              if (likely(__pyx_t_14)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                __Pyx_INCREF(__pyx_t_14);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_9, function);
              }
            }
            __pyx_t_2 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_14, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_13);
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = PyNumber_Subtract(__pyx_v_taker_order_size_in_quote, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
              }
            }
            __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_2);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 707, __pyx_L1_error)
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (__pyx_t_5) {
              __Pyx_INCREF(__pyx_t_4);
              __pyx_t_12 = __pyx_t_4;
            } else {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_12 = __pyx_t_1;
            }
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __pyx_t_12;
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_2 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_12 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_mid_price_maker_buy_price) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_mid_price_maker_buy_price);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_3, 0, __pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":708
 *                                         if maker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price > maker_available_balance_quote / mid_price_maker_buy_price * (Decimal("1"))):
 *                                             self.c_place_order(market_pair, True, market_pair.maker, False, min(Decimal((taker_order_size_in_quote - min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price))))),maker_order_size_in_quote), Decimal(mid_price_maker_buy_price))
 *                                             self.logger().info(f"Place buy order on taker and maker - The remaining amount of buy order is placed on the maker exchange {Decimal((taker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price)))}")             # <<<<<<<<<<<<<<
 * 
 *                             elif not self.c_check_available_balance(is_buy = True, market_pair = market_pair):   # if there is not enough on the maker exchange, just buy whatever you can buy
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_12 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_9 = PyNumber_Subtract(__pyx_v_taker_order_size_in_quote, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_12 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_12, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Place_buy_order_on_taker_and_mak_2, __pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":706
 * 
 *                                         # if there is enough remaining on the maker exchange, also place an order on the maker exchange with the remainging volume
 *                                         if maker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price > maker_available_balance_quote / mid_price_maker_buy_price * (Decimal("1"))):             # <<<<<<<<<<<<<<
 *                                             self.c_place_order(market_pair, True, market_pair.maker, False, min(Decimal((taker_order_size_in_quote - min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price))))),maker_order_size_in_quote), Decimal(mid_price_maker_buy_price))
 *                                             self.logger().info(f"Place buy order on taker and maker - The remaining amount of buy order is placed on the maker exchange {Decimal((taker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price)))}")
 */
          }

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":700
 *                                  self.c_place_fixing_order(is_maker = False, is_buy = True, market_pair = market_pair)  # place taker buy order
 * 
 *                             elif self.c_check_available_balance(is_buy = True, market_pair = market_pair) == "buy_maker_taker":             # <<<<<<<<<<<<<<
 *                                         # buy as much as possible on the taker exchange
 *                                         self.c_place_order(market_pair, True, market_pair.taker, False, min(Decimal((taker_available_balance_quote / mid_price_taker_buy_price)), maker_order_size_in_quote), Decimal(mid_price_taker_buy_price))
 */
          goto __pyx_L11;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":710
 *                                             self.logger().info(f"Place buy order on taker and maker - The remaining amount of buy order is placed on the maker exchange {Decimal((taker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price)))}")
 * 
 *                             elif not self.c_check_available_balance(is_buy = True, market_pair = market_pair):   # if there is not enough on the maker exchange, just buy whatever you can buy             # <<<<<<<<<<<<<<
 *                                           if Decimal(taker_available_balance_quote / mid_price_taker_buy_price) > self._min_order_amount:
 *                                               self.c_place_order(market_pair, True, market_pair.taker, False, min(order_size_base, (Decimal(taker_available_balance_quote / mid_price_taker_buy_price))),Decimal(mid_price_taker_buy_price))
 */
        __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_available_balance(__pyx_v_self, Py_True, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 710, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 710, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = ((!__pyx_t_5) != 0);
        if (__pyx_t_7) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":711
 * 
 *                             elif not self.c_check_available_balance(is_buy = True, market_pair = market_pair):   # if there is not enough on the maker exchange, just buy whatever you can buy
 *                                           if Decimal(taker_available_balance_quote / mid_price_taker_buy_price) > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                                               self.c_place_order(market_pair, True, market_pair.taker, False, min(order_size_base, (Decimal(taker_available_balance_quote / mid_price_taker_buy_price))),Decimal(mid_price_taker_buy_price))
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much taker buy available is placed as last option, Taker available:{Decimal(taker_available_balance_quote / mid_price_taker_buy_price)}")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 711, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 711, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 711, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 711, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_7) {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":712
 *                             elif not self.c_check_available_balance(is_buy = True, market_pair = market_pair):   # if there is not enough on the maker exchange, just buy whatever you can buy
 *                                           if Decimal(taker_available_balance_quote / mid_price_taker_buy_price) > self._min_order_amount:
 *                                               self.c_place_order(market_pair, True, market_pair.taker, False, min(order_size_base, (Decimal(taker_available_balance_quote / mid_price_taker_buy_price))),Decimal(mid_price_taker_buy_price))             # <<<<<<<<<<<<<<
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much taker buy available is placed as last option, Taker available:{Decimal(taker_available_balance_quote / mid_price_taker_buy_price)}")
 * 
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 712, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 712, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 712, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
              }
            }
            __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_3);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_INCREF(__pyx_v_order_size_base);
            __pyx_t_12 = __pyx_v_order_size_base;
            __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_t_12, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 712, __pyx_L1_error)
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 712, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (__pyx_t_7) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = __pyx_t_1;
            } else {
              __Pyx_INCREF(__pyx_t_12);
              __pyx_t_3 = __pyx_t_12;
            }
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __pyx_t_3;
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 712, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
              }
            }
            __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_9, __pyx_v_mid_price_taker_buy_price) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_mid_price_taker_buy_price);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 712, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_4, 0, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 712, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":713
 *                                           if Decimal(taker_available_balance_quote / mid_price_taker_buy_price) > self._min_order_amount:
 *                                               self.c_place_order(market_pair, True, market_pair.taker, False, min(order_size_base, (Decimal(taker_available_balance_quote / mid_price_taker_buy_price))),Decimal(mid_price_taker_buy_price))
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much taker buy available is placed as last option, Taker available:{Decimal(taker_available_balance_quote / mid_price_taker_buy_price)}")             # <<<<<<<<<<<<<<
 * 
 *                                           elif Decimal(maker_available_balance_quote / mid_price_maker_buy_price) > self._min_order_amount:
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_v_taker_available_balance_quote, __pyx_v_mid_price_taker_buy_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_2 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Place_buy_order_on_taker_and_mak_3, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_12 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 713, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":711
 * 
 *                             elif not self.c_check_available_balance(is_buy = True, market_pair = market_pair):   # if there is not enough on the maker exchange, just buy whatever you can buy
 *                                           if Decimal(taker_available_balance_quote / mid_price_taker_buy_price) > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                                               self.c_place_order(market_pair, True, market_pair.taker, False, min(order_size_base, (Decimal(taker_available_balance_quote / mid_price_taker_buy_price))),Decimal(mid_price_taker_buy_price))
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much taker buy available is placed as last option, Taker available:{Decimal(taker_available_balance_quote / mid_price_taker_buy_price)}")
 */
            goto __pyx_L14;
          }

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":715
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much taker buy available is placed as last option, Taker available:{Decimal(taker_available_balance_quote / mid_price_taker_buy_price)}")
 * 
 *                                           elif Decimal(maker_available_balance_quote / mid_price_maker_buy_price) > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                                               self.c_place_order(market_pair, True, market_pair.maker, False, min(order_size_base, (Decimal(maker_available_balance_quote / mid_price_maker_buy_price))),Decimal(mid_price_maker_buy_price))
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much maker buy available is placed as last option, Maker available:{Decimal(maker_available_balance_quote / mid_price_maker_buy_price)}")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_12 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 715, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyObject_RichCompare(__pyx_t_12, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 715, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_7) {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":716
 * 
 *                                           elif Decimal(maker_available_balance_quote / mid_price_maker_buy_price) > self._min_order_amount:
 *                                               self.c_place_order(market_pair, True, market_pair.maker, False, min(order_size_base, (Decimal(maker_available_balance_quote / mid_price_maker_buy_price))),Decimal(mid_price_maker_buy_price))             # <<<<<<<<<<<<<<
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much maker buy available is placed as last option, Maker available:{Decimal(maker_available_balance_quote / mid_price_maker_buy_price)}")
 * 
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 716, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_12 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 716, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_v_order_size_base);
            __pyx_t_3 = __pyx_v_order_size_base;
            __pyx_t_9 = PyObject_RichCompare(__pyx_t_12, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 716, __pyx_L1_error)
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 716, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (__pyx_t_7) {
              __Pyx_INCREF(__pyx_t_12);
              __pyx_t_4 = __pyx_t_12;
            } else {
              __Pyx_INCREF(__pyx_t_3);
              __pyx_t_4 = __pyx_t_3;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = __pyx_t_4;
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_v_mid_price_maker_buy_price) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_mid_price_maker_buy_price);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 716, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_1, 0, __pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":717
 *                                           elif Decimal(maker_available_balance_quote / mid_price_maker_buy_price) > self._min_order_amount:
 *                                               self.c_place_order(market_pair, True, market_pair.maker, False, min(order_size_base, (Decimal(maker_available_balance_quote / mid_price_maker_buy_price))),Decimal(mid_price_maker_buy_price))
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much maker buy available is placed as last option, Maker available:{Decimal(maker_available_balance_quote / mid_price_maker_buy_price)}")             # <<<<<<<<<<<<<<
 * 
 *                                           else:
 */
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
              }
            }
            __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_v_maker_available_balance_quote, __pyx_v_mid_price_maker_buy_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_2 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Place_buy_order_on_taker_and_mak_4, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
              }
            }
            __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_4);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":715
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much taker buy available is placed as last option, Taker available:{Decimal(taker_available_balance_quote / mid_price_taker_buy_price)}")
 * 
 *                                           elif Decimal(maker_available_balance_quote / mid_price_maker_buy_price) > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                                               self.c_place_order(market_pair, True, market_pair.maker, False, min(order_size_base, (Decimal(maker_available_balance_quote / mid_price_maker_buy_price))),Decimal(mid_price_maker_buy_price))
 *                                               self.logger().info(f"Place buy order on taker and maker - An order with as much maker buy available is placed as last option, Maker available:{Decimal(maker_available_balance_quote / mid_price_maker_buy_price)}")
 */
            goto __pyx_L14;
          }

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":720
 * 
 *                                           else:
 *                                               pass             # <<<<<<<<<<<<<<
 *                             self._counter = 0
 * 
 */
          /*else*/ {
          }
          __pyx_L14:;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":710
 *                                             self.logger().info(f"Place buy order on taker and maker - The remaining amount of buy order is placed on the maker exchange {Decimal((taker_order_size_in_quote - (taker_available_balance_quote / mid_price_taker_buy_price)))}")
 * 
 *                             elif not self.c_check_available_balance(is_buy = True, market_pair = market_pair):   # if there is not enough on the maker exchange, just buy whatever you can buy             # <<<<<<<<<<<<<<
 *                                           if Decimal(taker_available_balance_quote / mid_price_taker_buy_price) > self._min_order_amount:
 *                                               self.c_place_order(market_pair, True, market_pair.taker, False, min(order_size_base, (Decimal(taker_available_balance_quote / mid_price_taker_buy_price))),Decimal(mid_price_taker_buy_price))
 */
        }
        __pyx_L11:;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":721
 *                                           else:
 *                                               pass
 *                             self._counter = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        __Pyx_GOTREF(__pyx_v_self->_counter);
        __Pyx_DECREF(__pyx_v_self->_counter);
        __pyx_v_self->_counter = __pyx_int_0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":683
 * 
 * 
 *                         if pref_base_min_actual > 0 and order_size_base > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                             # second time checking if there is a difference, if there is, place buy order
 *                             # here you would want to cancell all orders on the exchanges
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":725
 * 
 * 
 *                         if pref_base_min_actual < 0 and order_size_base > self._min_order_amount:  # after checking again if there is a difference in balance             # <<<<<<<<<<<<<<
 *                                   self.logger().info(f"Timer passed {self._waiting_time} seconds, current value of Timer: {self._counter} Order_size base: {order_size_base} Total Base Balance: {total_base_balance}, Target Balance: {self._target_base_balance}, Diff: {pref_base_min_actual}")
 *                                   # available balance with a sell order on taker side
 */
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_pref_base_min_actual, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_7 = __pyx_t_5;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_order_size_base, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __pyx_t_5;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_7) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":726
 * 
 *                         if pref_base_min_actual < 0 and order_size_base > self._min_order_amount:  # after checking again if there is a difference in balance
 *                                   self.logger().info(f"Timer passed {self._waiting_time} seconds, current value of Timer: {self._counter} Order_size base: {order_size_base} Total Base Balance: {total_base_balance}, Target Balance: {self._target_base_balance}, Diff: {pref_base_min_actual}")             # <<<<<<<<<<<<<<
 *                                   # available balance with a sell order on taker side
 *                                   if self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_taker":
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_12 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyTuple_New(12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = 0;
        __pyx_t_11 = 127;
        __Pyx_INCREF(__pyx_kp_u_Timer_passed);
        __pyx_t_10 += 13;
        __Pyx_GIVEREF(__pyx_kp_u_Timer_passed);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_Timer_passed);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_waiting_time, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_seconds_current_value_of_Timer);
        __pyx_t_10 += 34;
        __Pyx_GIVEREF(__pyx_kp_u_seconds_current_value_of_Timer);
        PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_seconds_current_value_of_Timer);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_counter, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Order_size_base);
        __pyx_t_10 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_Order_size_base);
        PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_kp_u_Order_size_base);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_order_size_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 5, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Total_Base_Balance);
        __pyx_t_10 += 21;
        __Pyx_GIVEREF(__pyx_kp_u_Total_Base_Balance);
        PyTuple_SET_ITEM(__pyx_t_12, 6, __pyx_kp_u_Total_Base_Balance);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_total_base_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 7, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Target_Balance);
        __pyx_t_10 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_Target_Balance);
        PyTuple_SET_ITEM(__pyx_t_12, 8, __pyx_kp_u_Target_Balance);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_target_base_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 9, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Diff);
        __pyx_t_10 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_Diff);
        PyTuple_SET_ITEM(__pyx_t_12, 10, __pyx_kp_u_Diff);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_pref_base_min_actual, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
        __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 11, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_12, 12, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_3 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_12, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":728
 *                                   self.logger().info(f"Timer passed {self._waiting_time} seconds, current value of Timer: {self._counter} Order_size base: {order_size_base} Total Base Balance: {total_base_balance}, Target Balance: {self._target_base_balance}, Diff: {pref_base_min_actual}")
 *                                   # available balance with a sell order on taker side
 *                                   if self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_taker":             # <<<<<<<<<<<<<<
 *                                       self.c_place_fixing_order(is_maker = False, is_buy = False, market_pair = market_pair)  # place taker sell order
 * 
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_available_balance(__pyx_v_self, Py_False, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_sell_taker, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_7) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":729
 *                                   # available balance with a sell order on taker side
 *                                   if self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_taker":
 *                                       self.c_place_fixing_order(is_maker = False, is_buy = False, market_pair = market_pair)  # place taker sell order             # <<<<<<<<<<<<<<
 * 
 *                                   # available balance with a sell order on maker side
 */
          __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_fixing_order(__pyx_v_self, Py_False, Py_False, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":728
 *                                   self.logger().info(f"Timer passed {self._waiting_time} seconds, current value of Timer: {self._counter} Order_size base: {order_size_base} Total Base Balance: {total_base_balance}, Target Balance: {self._target_base_balance}, Diff: {pref_base_min_actual}")
 *                                   # available balance with a sell order on taker side
 *                                   if self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_taker":             # <<<<<<<<<<<<<<
 *                                       self.c_place_fixing_order(is_maker = False, is_buy = False, market_pair = market_pair)  # place taker sell order
 * 
 */
          goto __pyx_L18;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":732
 * 
 *                                   # available balance with a sell order on maker side
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker":             # <<<<<<<<<<<<<<
 *                                     if self._balance_fix_maker:
 *                                       self._maker_order_update = True
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_available_balance(__pyx_v_self, Py_False, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_sell_maker, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 732, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_7) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":733
 *                                   # available balance with a sell order on maker side
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker":
 *                                     if self._balance_fix_maker:             # <<<<<<<<<<<<<<
 *                                       self._maker_order_update = True
 *                                     else:
 */
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_self->_balance_fix_maker); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 733, __pyx_L1_error)
          if (__pyx_t_7) {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":734
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker":
 *                                     if self._balance_fix_maker:
 *                                       self._maker_order_update = True             # <<<<<<<<<<<<<<
 *                                     else:
 *                                       self.c_place_fixing_order(is_maker = True, is_buy = False, market_pair = market_pair)  # place maker sell order
 */
            __Pyx_INCREF(Py_True);
            __Pyx_GIVEREF(Py_True);
            __Pyx_GOTREF(__pyx_v_self->_maker_order_update);
            __Pyx_DECREF(__pyx_v_self->_maker_order_update);
            __pyx_v_self->_maker_order_update = Py_True;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":733
 *                                   # available balance with a sell order on maker side
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker":
 *                                     if self._balance_fix_maker:             # <<<<<<<<<<<<<<
 *                                       self._maker_order_update = True
 *                                     else:
 */
            goto __pyx_L19;
          }

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":736
 *                                       self._maker_order_update = True
 *                                     else:
 *                                       self.c_place_fixing_order(is_maker = True, is_buy = False, market_pair = market_pair)  # place maker sell order             # <<<<<<<<<<<<<<
 * 
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker_taker":
 */
          /*else*/ {
            __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_fixing_order(__pyx_v_self, Py_True, Py_False, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 736, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_L19:;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":732
 * 
 *                                   # available balance with a sell order on maker side
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker":             # <<<<<<<<<<<<<<
 *                                     if self._balance_fix_maker:
 *                                       self._maker_order_update = True
 */
          goto __pyx_L18;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":738
 *                                       self.c_place_fixing_order(is_maker = True, is_buy = False, market_pair = market_pair)  # place maker sell order
 * 
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker_taker":             # <<<<<<<<<<<<<<
 *                                               # place order on the taker exchange with volume available balance
 *                                               self.c_place_order(market_pair, False, market_pair.taker, False,  min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_available_balance(__pyx_v_self, Py_False, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 738, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_sell_maker_taker, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 738, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_7) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":740
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker_taker":
 *                                               # place order on the taker exchange with volume available balance
 *                                               self.c_place_order(market_pair, False, market_pair.taker, False,  min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)             # <<<<<<<<<<<<<<
 *                                               self.logger().info(f"Place sell order on taker and maker - Taker sell order is placed with most available balance or at max size of the order to restore balance {min(taker_available_balance_base, order_size_base)} ")
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_v_order_size_base);
          __pyx_t_4 = __pyx_v_order_size_base;
          __Pyx_INCREF(__pyx_v_taker_available_balance_base);
          __pyx_t_1 = __pyx_v_taker_available_balance_base;
          __pyx_t_9 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 740, __pyx_L1_error)
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 740, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_7) {
            __Pyx_INCREF(__pyx_t_4);
            __pyx_t_12 = __pyx_t_4;
          } else {
            __Pyx_INCREF(__pyx_t_1);
            __pyx_t_12 = __pyx_t_1;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __pyx_t_12;
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_3, 0, __pyx_t_4, __pyx_v_mid_price_taker_sell_price); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 740, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":741
 *                                               # place order on the taker exchange with volume available balance
 *                                               self.c_place_order(market_pair, False, market_pair.taker, False,  min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)
 *                                               self.logger().info(f"Place sell order on taker and maker - Taker sell order is placed with most available balance or at max size of the order to restore balance {min(taker_available_balance_base, order_size_base)} ")             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_10 = 0;
          __pyx_t_11 = 127;
          __Pyx_INCREF(__pyx_kp_u_Place_sell_order_on_taker_and_ma);
          __pyx_t_10 += 140;
          __Pyx_GIVEREF(__pyx_kp_u_Place_sell_order_on_taker_and_ma);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Place_sell_order_on_taker_and_ma);
          __Pyx_INCREF(__pyx_v_order_size_base);
          __pyx_t_1 = __pyx_v_order_size_base;
          __Pyx_INCREF(__pyx_v_taker_available_balance_base);
          __pyx_t_9 = __pyx_v_taker_available_balance_base;
          __pyx_t_13 = PyObject_RichCompare(__pyx_t_1, __pyx_t_9, Py_LT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 741, __pyx_L1_error)
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (__pyx_t_7) {
            __Pyx_INCREF(__pyx_t_1);
            __pyx_t_2 = __pyx_t_1;
          } else {
            __Pyx_INCREF(__pyx_t_9);
            __pyx_t_2 = __pyx_t_9;
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
          __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
          __pyx_t_1 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_10 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u__23);
          __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          __pyx_t_12 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 741, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":745
 * 
 *                                               # if there is enough remaining on the maker exchange, also place an order on the maker exchange with the remainging value
 *                                               if order_size_base - min(taker_available_balance_base, order_size_base) > maker_available_balance_base:             # <<<<<<<<<<<<<<
 *                                                   self.c_place_order(market_pair, False, market_pair.maker, False, (order_size_base - min(taker_available_balance_base, order_size_base)), mid_price_maker_sell_price)
 *                                                   self.logger().info(f"Place sell order on taker and maker - The remaining amount of {min(taker_available_balance_base, order_size_base)} sell order is placed on the maker exchange")
 */
          __Pyx_INCREF(__pyx_v_order_size_base);
          __pyx_t_12 = __pyx_v_order_size_base;
          __Pyx_INCREF(__pyx_v_taker_available_balance_base);
          __pyx_t_3 = __pyx_v_taker_available_balance_base;
          __pyx_t_4 = PyObject_RichCompare(__pyx_t_12, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L1_error)
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_7) {
            __Pyx_INCREF(__pyx_t_12);
            __pyx_t_1 = __pyx_t_12;
          } else {
            __Pyx_INCREF(__pyx_t_3);
            __pyx_t_1 = __pyx_t_3;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = PyNumber_Subtract(__pyx_v_order_size_base, __pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 745, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyObject_RichCompare(__pyx_t_12, __pyx_v_maker_available_balance_base, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_7) {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":746
 *                                               # if there is enough remaining on the maker exchange, also place an order on the maker exchange with the remainging value
 *                                               if order_size_base - min(taker_available_balance_base, order_size_base) > maker_available_balance_base:
 *                                                   self.c_place_order(market_pair, False, market_pair.maker, False, (order_size_base - min(taker_available_balance_base, order_size_base)), mid_price_maker_sell_price)             # <<<<<<<<<<<<<<
 *                                                   self.logger().info(f"Place sell order on taker and maker - The remaining amount of {min(taker_available_balance_base, order_size_base)} sell order is placed on the maker exchange")
 * 
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_INCREF(__pyx_v_order_size_base);
            __pyx_t_12 = __pyx_v_order_size_base;
            __Pyx_INCREF(__pyx_v_taker_available_balance_base);
            __pyx_t_3 = __pyx_v_taker_available_balance_base;
            __pyx_t_2 = PyObject_RichCompare(__pyx_t_12, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 746, __pyx_L1_error)
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (__pyx_t_7) {
              __Pyx_INCREF(__pyx_t_12);
              __pyx_t_4 = __pyx_t_12;
            } else {
              __Pyx_INCREF(__pyx_t_3);
              __pyx_t_4 = __pyx_t_3;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = PyNumber_Subtract(__pyx_v_order_size_base, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 746, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_1, 0, __pyx_t_12, __pyx_v_mid_price_maker_sell_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 746, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":747
 *                                               if order_size_base - min(taker_available_balance_base, order_size_base) > maker_available_balance_base:
 *                                                   self.c_place_order(market_pair, False, market_pair.maker, False, (order_size_base - min(taker_available_balance_base, order_size_base)), mid_price_maker_sell_price)
 *                                                   self.logger().info(f"Place sell order on taker and maker - The remaining amount of {min(taker_available_balance_base, order_size_base)} sell order is placed on the maker exchange")             # <<<<<<<<<<<<<<
 * 
 *                                   elif not self.c_check_available_balance(is_buy = False, market_pair = market_pair): # sell all availabe balance on the maker
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_12 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 747, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 747, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_10 = 0;
            __pyx_t_11 = 127;
            __Pyx_INCREF(__pyx_kp_u_Place_sell_order_on_taker_and_ma_2);
            __pyx_t_10 += 62;
            __Pyx_GIVEREF(__pyx_kp_u_Place_sell_order_on_taker_and_ma_2);
            PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_Place_sell_order_on_taker_and_ma_2);
            __Pyx_INCREF(__pyx_v_order_size_base);
            __pyx_t_3 = __pyx_v_order_size_base;
            __Pyx_INCREF(__pyx_v_taker_available_balance_base);
            __pyx_t_2 = __pyx_v_taker_available_balance_base;
            __pyx_t_13 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 747, __pyx_L1_error)
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 747, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (__pyx_t_7) {
              __Pyx_INCREF(__pyx_t_3);
              __pyx_t_9 = __pyx_t_3;
            } else {
              __Pyx_INCREF(__pyx_t_2);
              __pyx_t_9 = __pyx_t_2;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 747, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
            __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_kp_u_sell_order_is_placed_on_the_mak);
            __pyx_t_10 += 43;
            __Pyx_GIVEREF(__pyx_kp_u_sell_order_is_placed_on_the_mak);
            PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_sell_order_is_placed_on_the_mak);
            __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_12, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 747, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_12, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 747, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":745
 * 
 *                                               # if there is enough remaining on the maker exchange, also place an order on the maker exchange with the remainging value
 *                                               if order_size_base - min(taker_available_balance_base, order_size_base) > maker_available_balance_base:             # <<<<<<<<<<<<<<
 *                                                   self.c_place_order(market_pair, False, market_pair.maker, False, (order_size_base - min(taker_available_balance_base, order_size_base)), mid_price_maker_sell_price)
 *                                                   self.logger().info(f"Place sell order on taker and maker - The remaining amount of {min(taker_available_balance_base, order_size_base)} sell order is placed on the maker exchange")
 */
          }

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":738
 *                                       self.c_place_fixing_order(is_maker = True, is_buy = False, market_pair = market_pair)  # place maker sell order
 * 
 *                                   elif self.c_check_available_balance(is_buy = False, market_pair = market_pair) == "sell_maker_taker":             # <<<<<<<<<<<<<<
 *                                               # place order on the taker exchange with volume available balance
 *                                               self.c_place_order(market_pair, False, market_pair.taker, False,  min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)
 */
          goto __pyx_L18;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":749
 *                                                   self.logger().info(f"Place sell order on taker and maker - The remaining amount of {min(taker_available_balance_base, order_size_base)} sell order is placed on the maker exchange")
 * 
 *                                   elif not self.c_check_available_balance(is_buy = False, market_pair = market_pair): # sell all availabe balance on the maker             # <<<<<<<<<<<<<<
 *                                       if taker_available_balance_base > self._min_order_amount:
 *                                           self.c_place_order(market_pair, False, market_pair.taker, False, min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)
 */
        __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_available_balance(__pyx_v_self, Py_False, __pyx_v_market_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = ((!__pyx_t_7) != 0);
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":750
 * 
 *                                   elif not self.c_check_available_balance(is_buy = False, market_pair = market_pair): # sell all availabe balance on the maker
 *                                       if taker_available_balance_base > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                                           self.c_place_order(market_pair, False, market_pair.taker, False, min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {taker_available_balance_base} is placed as last option")
 */
          __pyx_t_4 = PyObject_RichCompare(__pyx_v_taker_available_balance_base, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 750, __pyx_L1_error)
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 750, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_5) {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":751
 *                                   elif not self.c_check_available_balance(is_buy = False, market_pair = market_pair): # sell all availabe balance on the maker
 *                                       if taker_available_balance_base > self._min_order_amount:
 *                                           self.c_place_order(market_pair, False, market_pair.taker, False, min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)             # <<<<<<<<<<<<<<
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {taker_available_balance_base} is placed as last option")
 * 
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 751, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_v_order_size_base);
            __pyx_t_1 = __pyx_v_order_size_base;
            __Pyx_INCREF(__pyx_v_taker_available_balance_base);
            __pyx_t_3 = __pyx_v_taker_available_balance_base;
            __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 751, __pyx_L1_error)
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 751, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (__pyx_t_5) {
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_12 = __pyx_t_1;
            } else {
              __Pyx_INCREF(__pyx_t_3);
              __pyx_t_12 = __pyx_t_3;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __pyx_t_12;
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_4, 0, __pyx_t_1, __pyx_v_mid_price_taker_sell_price); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 751, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":752
 *                                       if taker_available_balance_base > self._min_order_amount:
 *                                           self.c_place_order(market_pair, False, market_pair.taker, False, min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {taker_available_balance_base} is placed as last option")             # <<<<<<<<<<<<<<
 * 
 *                                       elif maker_available_balance_base > self._min_order_amount:
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 752, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 752, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_10 = 0;
            __pyx_t_11 = 127;
            __Pyx_INCREF(__pyx_kp_u_Place_sell_order_on_taker_and_ma_3);
            __pyx_t_10 += 80;
            __Pyx_GIVEREF(__pyx_kp_u_Place_sell_order_on_taker_and_ma_3);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Place_sell_order_on_taker_and_ma_3);
            __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_available_balance_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
            __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_kp_u_is_placed_as_last_option);
            __pyx_t_10 += 25;
            __Pyx_GIVEREF(__pyx_kp_u_is_placed_as_last_option);
            PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_is_placed_as_last_option);
            __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_12 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 752, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":750
 * 
 *                                   elif not self.c_check_available_balance(is_buy = False, market_pair = market_pair): # sell all availabe balance on the maker
 *                                       if taker_available_balance_base > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                                           self.c_place_order(market_pair, False, market_pair.taker, False, min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {taker_available_balance_base} is placed as last option")
 */
            goto __pyx_L21;
          }

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":754
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {taker_available_balance_base} is placed as last option")
 * 
 *                                       elif maker_available_balance_base > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                                           self.c_place_order(market_pair, False, market_pair.maker, False, min(maker_available_balance_base, order_size_base), mid_price_maker_sell_price)
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {maker_available_balance_base} is placed as last option")
 */
          __pyx_t_12 = PyObject_RichCompare(__pyx_v_maker_available_balance_base, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 754, __pyx_L1_error)
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 754, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_5) {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":755
 * 
 *                                       elif maker_available_balance_base > self._min_order_amount:
 *                                           self.c_place_order(market_pair, False, market_pair.maker, False, min(maker_available_balance_base, order_size_base), mid_price_maker_sell_price)             # <<<<<<<<<<<<<<
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {maker_available_balance_base} is placed as last option")
 * 
 */
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 755, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_INCREF(__pyx_v_order_size_base);
            __pyx_t_4 = __pyx_v_order_size_base;
            __Pyx_INCREF(__pyx_v_maker_available_balance_base);
            __pyx_t_3 = __pyx_v_maker_available_balance_base;
            __pyx_t_9 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 755, __pyx_L1_error)
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 755, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (__pyx_t_5) {
              __Pyx_INCREF(__pyx_t_4);
              __pyx_t_1 = __pyx_t_4;
            } else {
              __Pyx_INCREF(__pyx_t_3);
              __pyx_t_1 = __pyx_t_3;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __pyx_t_1;
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_12, 0, __pyx_t_4, __pyx_v_mid_price_maker_sell_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":756
 *                                       elif maker_available_balance_base > self._min_order_amount:
 *                                           self.c_place_order(market_pair, False, market_pair.maker, False, min(maker_available_balance_base, order_size_base), mid_price_maker_sell_price)
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {maker_available_balance_base} is placed as last option")             # <<<<<<<<<<<<<<
 * 
 *                                       else:
 */
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 756, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
              }
            }
            __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 756, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 756, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 756, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_10 = 0;
            __pyx_t_11 = 127;
            __Pyx_INCREF(__pyx_kp_u_Place_sell_order_on_taker_and_ma_3);
            __pyx_t_10 += 80;
            __Pyx_GIVEREF(__pyx_kp_u_Place_sell_order_on_taker_and_ma_3);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Place_sell_order_on_taker_and_ma_3);
            __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_available_balance_base, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 756, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
            __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_kp_u_is_placed_as_last_option);
            __pyx_t_10 += 25;
            __Pyx_GIVEREF(__pyx_kp_u_is_placed_as_last_option);
            PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_is_placed_as_last_option);
            __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 756, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
              }
            }
            __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_3);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 756, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":754
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {taker_available_balance_base} is placed as last option")
 * 
 *                                       elif maker_available_balance_base > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                                           self.c_place_order(market_pair, False, market_pair.maker, False, min(maker_available_balance_base, order_size_base), mid_price_maker_sell_price)
 *                                           self.logger().info(f"Place sell order on taker and maker- An order with as much taker sell available {maker_available_balance_base} is placed as last option")
 */
            goto __pyx_L21;
          }

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":759
 * 
 *                                       else:
 *                                           pass             # <<<<<<<<<<<<<<
 *                                   self._counter = 0
 * 
 */
          /*else*/ {
          }
          __pyx_L21:;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":749
 *                                                   self.logger().info(f"Place sell order on taker and maker - The remaining amount of {min(taker_available_balance_base, order_size_base)} sell order is placed on the maker exchange")
 * 
 *                                   elif not self.c_check_available_balance(is_buy = False, market_pair = market_pair): # sell all availabe balance on the maker             # <<<<<<<<<<<<<<
 *                                       if taker_available_balance_base > self._min_order_amount:
 *                                           self.c_place_order(market_pair, False, market_pair.taker, False, min(taker_available_balance_base, order_size_base), mid_price_taker_sell_price)
 */
        }
        __pyx_L18:;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":760
 *                                       else:
 *                                           pass
 *                                   self._counter = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        __Pyx_GOTREF(__pyx_v_self->_counter);
        __Pyx_DECREF(__pyx_v_self->_counter);
        __pyx_v_self->_counter = __pyx_int_0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":725
 * 
 * 
 *                         if pref_base_min_actual < 0 and order_size_base > self._min_order_amount:  # after checking again if there is a difference in balance             # <<<<<<<<<<<<<<
 *                                   self.logger().info(f"Timer passed {self._waiting_time} seconds, current value of Timer: {self._counter} Order_size base: {order_size_base} Total Base Balance: {total_base_balance}, Target Balance: {self._target_base_balance}, Diff: {pref_base_min_actual}")
 *                                   # available balance with a sell order on taker side
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":763
 * 
 * 
 *                         return True             # <<<<<<<<<<<<<<
 *                          #return true, so if there was a mistake, ship the normal proces untill it does not return true
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":669
 *           if self._keep_target_balance:
 * 
 *                 if self._current_timestamp > self._restore_timer and self.c_balance_fix_check(market_pair) and not self._maker_order_update:             # <<<<<<<<<<<<<<
 * 
 *                         self.c_cancel_all_taker_limit_orders(market_pair)
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":767
 * 
 *                 else:
 *                     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":667
 *               object taker_order_size_in_quote = (order_size_base / mid_price_taker_buy_price)
 * 
 *           if self._keep_target_balance:             # <<<<<<<<<<<<<<
 * 
 *                 if self._current_timestamp > self._restore_timer and self.c_balance_fix_check(market_pair) and not self._maker_order_update:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":644
 * 
 * 
 *     cdef c_balance_fix_fix(self, market_pair):             # <<<<<<<<<<<<<<
 *           cdef:
 *               ExchangeBase maker_market = market_pair.maker.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_balance_fix_fix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_v_maker_trading_pair);
  __Pyx_XDECREF(__pyx_v_mid_price_taker);
  __Pyx_XDECREF(__pyx_v_mid_price_maker);
  __Pyx_XDECREF(__pyx_v_mid_price);
  __Pyx_XDECREF(__pyx_v_mid_price_taker_buy_price);
  __Pyx_XDECREF(__pyx_v_mid_price_maker_buy_price);
  __Pyx_XDECREF(__pyx_v_mid_price_taker_sell_price);
  __Pyx_XDECREF(__pyx_v_mid_price_maker_sell_price);
  __Pyx_XDECREF(__pyx_v_total_base_balance);
  __Pyx_XDECREF(__pyx_v_pref_base_min_actual);
  __Pyx_XDECREF(__pyx_v_maker_available_balance_base);
  __Pyx_XDECREF(__pyx_v_taker_available_balance_base);
  __Pyx_XDECREF(__pyx_v_maker_available_balance_quote);
  __Pyx_XDECREF(__pyx_v_taker_available_balance_quote);
  __Pyx_XDECREF(__pyx_v_order_size_base);
  __Pyx_XDECREF(__pyx_v_maker_order_size_in_quote);
  __Pyx_XDECREF(__pyx_v_taker_order_size_in_quote);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":773
 * 
 * 
 *     cdef c_process_market_pair(self, object market_pair, list active_orders):             # <<<<<<<<<<<<<<
 *         """
 *         For market pair being managed by this strategy object, do the following:
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_process_market_pair(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_active_orders) {
  PyObject *__pyx_v_current_hedging_price = 0;
  int __pyx_v_is_buy;
  int __pyx_v_has_active_bid;
  int __pyx_v_has_active_ask;
  int __pyx_v_need_adjust_order;
  double __pyx_v_anti_hysteresis_timer;
  CYTHON_UNUSED PyObject *__pyx_v_top_bid_price = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_top_ask_price = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_v_active_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_process_market_pair", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":797
 *             ExchangeBase taker_market
 *             bint is_buy
 *             bint has_active_bid = False             # <<<<<<<<<<<<<<
 *             bint has_active_ask = False
 *             bint need_adjust_order = False
 */
  __pyx_v_has_active_bid = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":798
 *             bint is_buy
 *             bint has_active_bid = False
 *             bint has_active_ask = False             # <<<<<<<<<<<<<<
 *             bint need_adjust_order = False
 *             double anti_hysteresis_timer = self._anti_hysteresis_timers.get(market_pair, 0)
 */
  __pyx_v_has_active_ask = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":799
 *             bint has_active_bid = False
 *             bint has_active_ask = False
 *             bint need_adjust_order = False             # <<<<<<<<<<<<<<
 *             double anti_hysteresis_timer = self._anti_hysteresis_timers.get(market_pair, 0)
 * 
 */
  __pyx_v_need_adjust_order = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":800
 *             bint has_active_ask = False
 *             bint need_adjust_order = False
 *             double anti_hysteresis_timer = self._anti_hysteresis_timers.get(market_pair, 0)             # <<<<<<<<<<<<<<
 * 
 *         top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)
 */
  if (unlikely(__pyx_v_self->_anti_hysteresis_timers == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 800, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_anti_hysteresis_timers, __pyx_v_market_pair, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_anti_hysteresis_timer = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":802
 *             double anti_hysteresis_timer = self._anti_hysteresis_timers.get(market_pair, 0)
 * 
 *         top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                 self.get_taker_to_maker_conversion_rate()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_top_bid_ask_from_price_samples(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 802, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 802, __pyx_L1_error)
  }
  __pyx_v_top_bid_price = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_top_ask_price = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":804
 *         top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                 self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *         global s_decimal_zero
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 803, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_4,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 803, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_4,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
    __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 6) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 803, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":803
 * 
 *         top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 */
  __pyx_v_quote_pair = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_pair = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate_source = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_base_rate = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":808
 *         global s_decimal_zero
 * 
 *         self.c_take_suggested_price_sample(market_pair)             # <<<<<<<<<<<<<<
 * 
 *         for active_order in active_orders:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_take_suggested_price_sample(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":810
 *         self.c_take_suggested_price_sample(market_pair)
 * 
 *         for active_order in active_orders:             # <<<<<<<<<<<<<<
 *             # Mark the has_active_bid and has_active_ask flags
 *             is_buy = active_order.is_buy
 */
  if (unlikely(__pyx_v_active_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 810, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_active_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
  for (;;) {
    if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_8); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 810, __pyx_L1_error)
    #else
    __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_active_order, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":812
 *         for active_order in active_orders:
 *             # Mark the has_active_bid and has_active_ask flags
 *             is_buy = active_order.is_buy             # <<<<<<<<<<<<<<
 *             if is_buy:
 *                 has_active_bid = True
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_active_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_is_buy = __pyx_t_12;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":813
 *             # Mark the has_active_bid and has_active_ask flags
 *             is_buy = active_order.is_buy
 *             if is_buy:             # <<<<<<<<<<<<<<
 *                 has_active_bid = True
 *             else:
 */
    __pyx_t_12 = (__pyx_v_is_buy != 0);
    if (__pyx_t_12) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":814
 *             is_buy = active_order.is_buy
 *             if is_buy:
 *                 has_active_bid = True             # <<<<<<<<<<<<<<
 *             else:
 *                 has_active_ask = True
 */
      __pyx_v_has_active_bid = 1;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":813
 *             # Mark the has_active_bid and has_active_ask flags
 *             is_buy = active_order.is_buy
 *             if is_buy:             # <<<<<<<<<<<<<<
 *                 has_active_bid = True
 *             else:
 */
      goto __pyx_L7;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":816
 *                 has_active_bid = True
 *             else:
 *                 has_active_ask = True             # <<<<<<<<<<<<<<
 * 
 *             # Suppose the active order is hedged on the taker market right now, what's the average price the hedge
 */
    /*else*/ {
      __pyx_v_has_active_ask = 1;
    }
    __pyx_L7:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":823
 *                 market_pair,
 *                 is_buy,
 *                 active_order.quantity)             # <<<<<<<<<<<<<<
 * 
 *             # See if it's still profitable to keep the order on maker market. If not, remove it.
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_active_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":820
 *             # Suppose the active order is hedged on the taker market right now, what's the average price the hedge
 *             # would happen?
 *             current_hedging_price = self.c_calculate_effective_hedging_price(             # <<<<<<<<<<<<<<
 *                 market_pair,
 *                 is_buy,
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, __pyx_v_is_buy, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_current_hedging_price, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":826
 * 
 *             # See if it's still profitable to keep the order on maker market. If not, remove it.
 *             if not self.c_check_if_still_profitable(market_pair, active_order, current_hedging_price):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    if (!(likely(((__pyx_v_active_order) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_active_order, __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder))))) __PYX_ERR(0, 826, __pyx_L1_error)
    __pyx_t_12 = ((!(((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_if_still_profitable(__pyx_v_self, __pyx_v_market_pair, ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_v_active_order), __pyx_v_current_hedging_price) != 0)) != 0);
    if (__pyx_t_12) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":827
 *             # See if it's still profitable to keep the order on maker market. If not, remove it.
 *             if not self.c_check_if_still_profitable(market_pair, active_order, current_hedging_price):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             if not self._active_order_canceling:
 */
      goto __pyx_L5_continue;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":826
 * 
 *             # See if it's still profitable to keep the order on maker market. If not, remove it.
 *             if not self.c_check_if_still_profitable(market_pair, active_order, current_hedging_price):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":829
 *                 continue
 * 
 *             if not self._active_order_canceling:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_12 = ((!(__pyx_v_self->_active_order_canceling != 0)) != 0);
    if (__pyx_t_12) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":830
 * 
 *             if not self._active_order_canceling:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             # See if I still have enough balance on my wallet to fill the order on maker market, and to hedge the
 */
      goto __pyx_L5_continue;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":829
 *                 continue
 * 
 *             if not self._active_order_canceling:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":834
 *             # See if I still have enough balance on my wallet to fill the order on maker market, and to hedge the
 *             # order on taker market. If not, adjust it.
 *             if not self.c_check_if_sufficient_balance(market_pair, active_order):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    if (!(likely(((__pyx_v_active_order) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_active_order, __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder))))) __PYX_ERR(0, 834, __pyx_L1_error)
    __pyx_t_12 = ((!(((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_if_sufficient_balance(__pyx_v_self, __pyx_v_market_pair, ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_v_active_order)) != 0)) != 0);
    if (__pyx_t_12) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":835
 *             # order on taker market. If not, adjust it.
 *             if not self.c_check_if_sufficient_balance(market_pair, active_order):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             # If prices have moved, one side is still profitable, here cancel and
 */
      goto __pyx_L5_continue;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":834
 *             # See if I still have enough balance on my wallet to fill the order on maker market, and to hedge the
 *             # order on taker market. If not, adjust it.
 *             if not self.c_check_if_sufficient_balance(market_pair, active_order):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":839
 *             # If prices have moved, one side is still profitable, here cancel and
 *             # place at the next tick.
 *             if self._current_timestamp > anti_hysteresis_timer:             # <<<<<<<<<<<<<<
 *                 if not self.c_check_if_price_has_drifted(market_pair, active_order):
 *                     need_adjust_order = True
 */
    __pyx_t_12 = ((__pyx_v_self->__pyx_base.__pyx_base._current_timestamp > __pyx_v_anti_hysteresis_timer) != 0);
    if (__pyx_t_12) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":840
 *             # place at the next tick.
 *             if self._current_timestamp > anti_hysteresis_timer:
 *                 if not self.c_check_if_price_has_drifted(market_pair, active_order):             # <<<<<<<<<<<<<<
 *                     need_adjust_order = True
 *                     continue
 */
      if (!(likely(((__pyx_v_active_order) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_active_order, __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder))))) __PYX_ERR(0, 840, __pyx_L1_error)
      __pyx_t_12 = ((!(((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_if_price_has_drifted(__pyx_v_self, __pyx_v_market_pair, ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_v_active_order)) != 0)) != 0);
      if (__pyx_t_12) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":841
 *             if self._current_timestamp > anti_hysteresis_timer:
 *                 if not self.c_check_if_price_has_drifted(market_pair, active_order):
 *                     need_adjust_order = True             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
        __pyx_v_need_adjust_order = 1;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":842
 *                 if not self.c_check_if_price_has_drifted(market_pair, active_order):
 *                     need_adjust_order = True
 *                     continue             # <<<<<<<<<<<<<<
 * 
 * 
 */
        goto __pyx_L5_continue;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":840
 *             # place at the next tick.
 *             if self._current_timestamp > anti_hysteresis_timer:
 *                 if not self.c_check_if_price_has_drifted(market_pair, active_order):             # <<<<<<<<<<<<<<
 *                     need_adjust_order = True
 *                     continue
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":839
 *             # If prices have moved, one side is still profitable, here cancel and
 *             # place at the next tick.
 *             if self._current_timestamp > anti_hysteresis_timer:             # <<<<<<<<<<<<<<
 *                 if not self.c_check_if_price_has_drifted(market_pair, active_order):
 *                     need_adjust_order = True
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":810
 *         self.c_take_suggested_price_sample(market_pair)
 * 
 *         for active_order in active_orders:             # <<<<<<<<<<<<<<
 *             # Mark the has_active_bid and has_active_ask flags
 *             is_buy = active_order.is_buy
 */
    __pyx_L5_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":847
 * 
 *         #if there is a difference in balance wait for it to be restored before doing something else
 *         if self._keep_target_balance and self.c_balance_fix_check(market_pair):             # <<<<<<<<<<<<<<
 *           self.c_balance_fix_fix(market_pair)
 *           if self._maker_order_update:
 */
  __pyx_t_13 = (__pyx_v_self->_keep_target_balance != 0);
  if (__pyx_t_13) {
  } else {
    __pyx_t_12 = __pyx_t_13;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_balance_fix_check(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __pyx_t_13;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_12) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":848
 *         #if there is a difference in balance wait for it to be restored before doing something else
 *         if self._keep_target_balance and self.c_balance_fix_check(market_pair):
 *           self.c_balance_fix_fix(market_pair)             # <<<<<<<<<<<<<<
 *           if self._maker_order_update:
 *                 self.c_place_top_maker(market_pair)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_balance_fix_fix(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":849
 *         if self._keep_target_balance and self.c_balance_fix_check(market_pair):
 *           self.c_balance_fix_fix(market_pair)
 *           if self._maker_order_update:             # <<<<<<<<<<<<<<
 *                 self.c_place_top_maker(market_pair)
 *           return
 */
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_maker_order_update); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 849, __pyx_L1_error)
    if (__pyx_t_12) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":850
 *           self.c_balance_fix_fix(market_pair)
 *           if self._maker_order_update:
 *                 self.c_place_top_maker(market_pair)             # <<<<<<<<<<<<<<
 *           return
 * 
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_top_maker(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":849
 *         if self._keep_target_balance and self.c_balance_fix_check(market_pair):
 *           self.c_balance_fix_fix(market_pair)
 *           if self._maker_order_update:             # <<<<<<<<<<<<<<
 *                 self.c_place_top_maker(market_pair)
 *           return
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":851
 *           if self._maker_order_update:
 *                 self.c_place_top_maker(market_pair)
 *           return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":847
 * 
 *         #if there is a difference in balance wait for it to be restored before doing something else
 *         if self._keep_target_balance and self.c_balance_fix_check(market_pair):             # <<<<<<<<<<<<<<
 *           self.c_balance_fix_fix(market_pair)
 *           if self._maker_order_update:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":857
 *         # If order adjustment is needed in the next tick, set the anti-hysteresis timer s.t. the next order adjustment
 *         # for the same pair wouldn't happen within the time limit.
 *         if need_adjust_order:             # <<<<<<<<<<<<<<
 *             self._anti_hysteresis_timers[market_pair] = self._current_timestamp + self._anti_hysteresis_duration
 * 
 */
  __pyx_t_12 = (__pyx_v_need_adjust_order != 0);
  if (__pyx_t_12) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":858
 *         # for the same pair wouldn't happen within the time limit.
 *         if need_adjust_order:
 *             self._anti_hysteresis_timers[market_pair] = self._current_timestamp + self._anti_hysteresis_duration             # <<<<<<<<<<<<<<
 * 
 *         if self._cancel_order_timer and self._current_timestamp > self._cancel_timer:
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->__pyx_base.__pyx_base._current_timestamp + __pyx_v_self->_anti_hysteresis_duration)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->_anti_hysteresis_timers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 858, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->_anti_hysteresis_timers, __pyx_v_market_pair, __pyx_t_1) < 0)) __PYX_ERR(0, 858, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":857
 *         # If order adjustment is needed in the next tick, set the anti-hysteresis timer s.t. the next order adjustment
 *         # for the same pair wouldn't happen within the time limit.
 *         if need_adjust_order:             # <<<<<<<<<<<<<<
 *             self._anti_hysteresis_timers[market_pair] = self._current_timestamp + self._anti_hysteresis_duration
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":860
 *             self._anti_hysteresis_timers[market_pair] = self._current_timestamp + self._anti_hysteresis_duration
 * 
 *         if self._cancel_order_timer and self._current_timestamp > self._cancel_timer:             # <<<<<<<<<<<<<<
 *             self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds
 *             self.c_cancel_all_maker_limit_orders(market_pair)
 */
  __pyx_t_13 = (__pyx_v_self->_cancel_order_timer != 0);
  if (__pyx_t_13) {
  } else {
    __pyx_t_12 = __pyx_t_13;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, __pyx_v_self->_cancel_timer, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_12 = __pyx_t_13;
  __pyx_L19_bool_binop_done:;
  if (__pyx_t_12) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":861
 * 
 *         if self._cancel_order_timer and self._current_timestamp > self._cancel_timer:
 *             self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds             # <<<<<<<<<<<<<<
 *             self.c_cancel_all_maker_limit_orders(market_pair)
 *             self.c_cancel_all_taker_limit_orders(market_pair)
 */
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyNumber_Add(__pyx_t_7, __pyx_v_self->_cancel_order_timer_seconds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_cancel_timer);
    __Pyx_DECREF(__pyx_v_self->_cancel_timer);
    __pyx_v_self->_cancel_timer = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":862
 *         if self._cancel_order_timer and self._current_timestamp > self._cancel_timer:
 *             self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds
 *             self.c_cancel_all_maker_limit_orders(market_pair)             # <<<<<<<<<<<<<<
 *             self.c_cancel_all_taker_limit_orders(market_pair)
 *             self.logger().info("Just canceled all maker orders to prevent the bot from being stuck")
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_all_maker_limit_orders(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":863
 *             self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds
 *             self.c_cancel_all_maker_limit_orders(market_pair)
 *             self.c_cancel_all_taker_limit_orders(market_pair)             # <<<<<<<<<<<<<<
 *             self.logger().info("Just canceled all maker orders to prevent the bot from being stuck")
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_all_taker_limit_orders(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":864
 *             self.c_cancel_all_maker_limit_orders(market_pair)
 *             self.c_cancel_all_taker_limit_orders(market_pair)
 *             self.logger().info("Just canceled all maker orders to prevent the bot from being stuck")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_kp_u_Just_canceled_all_maker_orders_t) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_Just_canceled_all_maker_orders_t);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":860
 *             self._anti_hysteresis_timers[market_pair] = self._current_timestamp + self._anti_hysteresis_duration
 * 
 *         if self._cancel_order_timer and self._current_timestamp > self._cancel_timer:             # <<<<<<<<<<<<<<
 *             self._cancel_timer = self._current_timestamp + self._cancel_order_timer_seconds
 *             self.c_cancel_all_maker_limit_orders(market_pair)
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":868
 * 
 *         # If there's both an active bid and ask, then there's no need to think about making new limit orders.
 *         if has_active_bid and has_active_ask:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_13 = (__pyx_v_has_active_bid != 0);
  if (__pyx_t_13) {
  } else {
    __pyx_t_12 = __pyx_t_13;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_13 = (__pyx_v_has_active_ask != 0);
  __pyx_t_12 = __pyx_t_13;
  __pyx_L22_bool_binop_done:;
  if (__pyx_t_12) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":869
 *         # If there's both an active bid and ask, then there's no need to think about making new limit orders.
 *         if has_active_bid and has_active_ask:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         #if an order is filled, do not place orders for x amount of time
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":868
 * 
 *         # If there's both an active bid and ask, then there's no need to think about making new limit orders.
 *         if has_active_bid and has_active_ask:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":872
 * 
 *         #if an order is filled, do not place orders for x amount of time
 *         if self._filled_order_delay and self._current_timestamp < self._filled_order_delay_timer:             # <<<<<<<<<<<<<<
 *           return
 * 
 */
  __pyx_t_13 = (__pyx_v_self->_filled_order_delay != 0);
  if (__pyx_t_13) {
  } else {
    __pyx_t_12 = __pyx_t_13;
    goto __pyx_L25_bool_binop_done;
  }
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_1, __pyx_v_self->_filled_order_delay_timer, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_12 = __pyx_t_13;
  __pyx_L25_bool_binop_done:;
  if (__pyx_t_12) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":873
 *         #if an order is filled, do not place orders for x amount of time
 *         if self._filled_order_delay and self._current_timestamp < self._filled_order_delay_timer:
 *           return             # <<<<<<<<<<<<<<
 * 
 *         # If there are pending taker orders, wait for them to complete. Function is not available for different quote pairs, so exclude that
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":872
 * 
 *         #if an order is filled, do not place orders for x amount of time
 *         if self._filled_order_delay and self._current_timestamp < self._filled_order_delay_timer:             # <<<<<<<<<<<<<<
 *           return
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":876
 * 
 *         # If there are pending taker orders, wait for them to complete. Function is not available for different quote pairs, so exclude that
 *         if self.has_active_taker_order(market_pair):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_active_taker_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_8 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_v_market_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_12) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":877
 *         # If there are pending taker orders, wait for them to complete. Function is not available for different quote pairs, so exclude that
 *         if self.has_active_taker_order(market_pair):
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # See if it's profitable to place a limit order on maker market. But only if the fix_fix is False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":876
 * 
 *         # If there are pending taker orders, wait for them to complete. Function is not available for different quote pairs, so exclude that
 *         if self.has_active_taker_order(market_pair):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":881
 *         # See if it's profitable to place a limit order on maker market. But only if the fix_fix is False
 * 
 *         self.c_check_and_create_new_orders(market_pair, has_active_bid, has_active_ask)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_and_create_new_orders(__pyx_v_self, __pyx_v_market_pair, __pyx_v_has_active_bid, __pyx_v_has_active_ask); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":773
 * 
 * 
 *     cdef c_process_market_pair(self, object market_pair, list active_orders):             # <<<<<<<<<<<<<<
 *         """
 *         For market pair being managed by this strategy object, do the following:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_process_market_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_current_hedging_price);
  __Pyx_XDECREF(__pyx_v_top_bid_price);
  __Pyx_XDECREF(__pyx_v_top_ask_price);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_active_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":886
 * 
 * 
 *     cdef c_did_fill_order(self, object order_filled_event):             # <<<<<<<<<<<<<<
 *         """
 *         If a limit order previously made to the maker side has been filled, hedge it on the taker side.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_fill_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_filled_event) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_market_pair = 0;
  PyObject *__pyx_v_order_fill_record = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_limit_order_record = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_fill_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":892
 *         """
 *         cdef:
 *             str order_id = order_filled_event.order_id             # <<<<<<<<<<<<<<
 *             object market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(order_id)
 *             tuple order_fill_record
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 892, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":893
 *         cdef:
 *             str order_id = order_filled_event.order_id
 *             object market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 *             tuple order_fill_record
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_v_self->_market_pair_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->_market_pair_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":898
 * 
 *         # Make sure to only hedge limit orders.
 *         if market_pair is not None and order_id in self._maker_order_ids:             # <<<<<<<<<<<<<<
 *             limit_order_record = self._sb_order_tracker.c_get_shadow_limit_order(order_id)
 *             order_fill_record = (limit_order_record, order_filled_event)
 */
  __pyx_t_3 = (__pyx_v_market_pair != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_order_id, __pyx_v_self->_maker_order_ids, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 898, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":899
 *         # Make sure to only hedge limit orders.
 *         if market_pair is not None and order_id in self._maker_order_ids:
 *             limit_order_record = self._sb_order_tracker.c_get_shadow_limit_order(order_id)             # <<<<<<<<<<<<<<
 *             order_fill_record = (limit_order_record, order_filled_event)
 * 
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_shadow_limit_order(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_v_order_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_limit_order_record = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":900
 *         if market_pair is not None and order_id in self._maker_order_ids:
 *             limit_order_record = self._sb_order_tracker.c_get_shadow_limit_order(order_id)
 *             order_fill_record = (limit_order_record, order_filled_event)             # <<<<<<<<<<<<<<
 * 
 *             # Store the limit order fill event in a map, s.t. it can be processed in c_check_and_hedge_orders()
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_limit_order_record));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_limit_order_record));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_limit_order_record));
    __Pyx_INCREF(__pyx_v_order_filled_event);
    __Pyx_GIVEREF(__pyx_v_order_filled_event);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_order_filled_event);
    __pyx_v_order_fill_record = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":904
 *             # Store the limit order fill event in a map, s.t. it can be processed in c_check_and_hedge_orders()
 *             # later.
 *             if order_filled_event.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 if market_pair not in self._order_fill_buy_events:
 *                     self._order_fill_buy_events[market_pair] = [order_fill_record]
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BUY); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_1 == __pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":905
 *             # later.
 *             if order_filled_event.trade_type is TradeType.BUY:
 *                 if market_pair not in self._order_fill_buy_events:             # <<<<<<<<<<<<<<
 *                     self._order_fill_buy_events[market_pair] = [order_fill_record]
 *                 else:
 */
      if (unlikely(__pyx_v_self->_order_fill_buy_events == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 905, __pyx_L1_error)
      }
      __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_v_market_pair, __pyx_v_self->_order_fill_buy_events, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 905, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":906
 *             if order_filled_event.trade_type is TradeType.BUY:
 *                 if market_pair not in self._order_fill_buy_events:
 *                     self._order_fill_buy_events[market_pair] = [order_fill_record]             # <<<<<<<<<<<<<<
 *                 else:
 *                     self._order_fill_buy_events[market_pair].append(order_fill_record)
 */
        __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 906, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_order_fill_record);
        __Pyx_GIVEREF(__pyx_v_order_fill_record);
        PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_order_fill_record);
        if (unlikely(__pyx_v_self->_order_fill_buy_events == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 906, __pyx_L1_error)
        }
        if (unlikely(PyDict_SetItem(__pyx_v_self->_order_fill_buy_events, __pyx_v_market_pair, __pyx_t_6) < 0)) __PYX_ERR(0, 906, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":905
 *             # later.
 *             if order_filled_event.trade_type is TradeType.BUY:
 *                 if market_pair not in self._order_fill_buy_events:             # <<<<<<<<<<<<<<
 *                     self._order_fill_buy_events[market_pair] = [order_fill_record]
 *                 else:
 */
        goto __pyx_L7;
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":908
 *                     self._order_fill_buy_events[market_pair] = [order_fill_record]
 *                 else:
 *                     self._order_fill_buy_events[market_pair].append(order_fill_record)             # <<<<<<<<<<<<<<
 * 
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 */
      /*else*/ {
        if (unlikely(__pyx_v_self->_order_fill_buy_events == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 908, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_self->_order_fill_buy_events, __pyx_v_market_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_v_order_fill_record); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_L7:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":910
 *                     self._order_fill_buy_events[market_pair].append(order_fill_record)
 * 
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyNumber_And(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":911
 * 
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Maker buy order of "
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 911, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":912
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"({market_pair.maker.trading_pair}) Maker buy order of "
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 912, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_INFO); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 912, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":913
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Maker buy order of "             # <<<<<<<<<<<<<<
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 *                     )
 */
        __pyx_t_6 = PyTuple_New(7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = 0;
        __pyx_t_10 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_9 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u__24);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_12, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_INCREF(__pyx_kp_u_Maker_buy_order_of);
        __pyx_t_9 += 21;
        __Pyx_GIVEREF(__pyx_kp_u_Maker_buy_order_of);
        PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_Maker_buy_order_of);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":914
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Maker buy order of "
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."             # <<<<<<<<<<<<<<
 *                     )
 *                 if self._filled_order_delay:
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_amount); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_9 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u__23);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_INCREF(__pyx_kp_u_filled);
        __pyx_t_9 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_filled);
        PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_kp_u_filled);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":913
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Maker buy order of "             # <<<<<<<<<<<<<<
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 *                     )
 */
        __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_6, 7, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 913, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_13 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_8, __pyx_t_12};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_8, __pyx_t_12};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        } else
        #endif
        {
          __pyx_t_11 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 911, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_13, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_13, __pyx_t_12);
          __pyx_t_8 = 0;
          __pyx_t_12 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":910
 *                     self._order_fill_buy_events[market_pair].append(order_fill_record)
 * 
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":916
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 *                     )
 *                 if self._filled_order_delay:             # <<<<<<<<<<<<<<
 *                   self._filled_order_delay_timer = self._current_timestamp + self._filled_order_delay_seconds
 *                   self.logger().info(f"Just canceled all maker order and will not place any new orders for {self._cancel_order_timer_seconds} seconds")
 */
      __pyx_t_2 = (__pyx_v_self->_filled_order_delay != 0);
      if (__pyx_t_2) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":917
 *                     )
 *                 if self._filled_order_delay:
 *                   self._filled_order_delay_timer = self._current_timestamp + self._filled_order_delay_seconds             # <<<<<<<<<<<<<<
 *                   self.logger().info(f"Just canceled all maker order and will not place any new orders for {self._cancel_order_timer_seconds} seconds")
 * 
 */
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 917, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_v_self->_filled_order_delay_seconds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_v_self->_filled_order_delay_timer);
        __Pyx_DECREF(__pyx_v_self->_filled_order_delay_timer);
        __pyx_v_self->_filled_order_delay_timer = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":918
 *                 if self._filled_order_delay:
 *                   self._filled_order_delay_timer = self._current_timestamp + self._filled_order_delay_seconds
 *                   self.logger().info(f"Just canceled all maker order and will not place any new orders for {self._cancel_order_timer_seconds} seconds")             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_5 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = 0;
        __pyx_t_10 = 127;
        __Pyx_INCREF(__pyx_kp_u_Just_canceled_all_maker_order_an);
        __pyx_t_9 += 68;
        __Pyx_GIVEREF(__pyx_kp_u_Just_canceled_all_maker_order_an);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Just_canceled_all_maker_order_an);
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_cancel_order_timer_seconds, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_INCREF(__pyx_kp_u_seconds);
        __pyx_t_9 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_seconds);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_seconds);
        __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_5, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":916
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 *                     )
 *                 if self._filled_order_delay:             # <<<<<<<<<<<<<<
 *                   self._filled_order_delay_timer = self._current_timestamp + self._filled_order_delay_seconds
 *                   self.logger().info(f"Just canceled all maker order and will not place any new orders for {self._cancel_order_timer_seconds} seconds")
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":904
 *             # Store the limit order fill event in a map, s.t. it can be processed in c_check_and_hedge_orders()
 *             # later.
 *             if order_filled_event.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 if market_pair not in self._order_fill_buy_events:
 *                     self._order_fill_buy_events[market_pair] = [order_fill_record]
 */
      goto __pyx_L6;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":921
 * 
 *             else:
 *                 if market_pair not in self._order_fill_sell_events:             # <<<<<<<<<<<<<<
 *                     self._order_fill_sell_events[market_pair] = [order_fill_record]
 *                 else:
 */
    /*else*/ {
      if (unlikely(__pyx_v_self->_order_fill_sell_events == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 921, __pyx_L1_error)
      }
      __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_market_pair, __pyx_v_self->_order_fill_sell_events, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 921, __pyx_L1_error)
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":922
 *             else:
 *                 if market_pair not in self._order_fill_sell_events:
 *                     self._order_fill_sell_events[market_pair] = [order_fill_record]             # <<<<<<<<<<<<<<
 *                 else:
 *                     self._order_fill_sell_events[market_pair].append(order_fill_record)
 */
        __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_order_fill_record);
        __Pyx_GIVEREF(__pyx_v_order_fill_record);
        PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_order_fill_record);
        if (unlikely(__pyx_v_self->_order_fill_sell_events == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 922, __pyx_L1_error)
        }
        if (unlikely(PyDict_SetItem(__pyx_v_self->_order_fill_sell_events, __pyx_v_market_pair, __pyx_t_1) < 0)) __PYX_ERR(0, 922, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":921
 * 
 *             else:
 *                 if market_pair not in self._order_fill_sell_events:             # <<<<<<<<<<<<<<
 *                     self._order_fill_sell_events[market_pair] = [order_fill_record]
 *                 else:
 */
        goto __pyx_L10;
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":924
 *                     self._order_fill_sell_events[market_pair] = [order_fill_record]
 *                 else:
 *                     self._order_fill_sell_events[market_pair].append(order_fill_record)             # <<<<<<<<<<<<<<
 * 
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 */
      /*else*/ {
        if (unlikely(__pyx_v_self->_order_fill_sell_events == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 924, __pyx_L1_error)
        }
        __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_order_fill_sell_events, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_v_order_fill_record); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 924, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L10:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":926
 *                     self._order_fill_sell_events[market_pair].append(order_fill_record)
 * 
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 926, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyNumber_And(__pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 926, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 926, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_3) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":927
 * 
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Maker sell order of "
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 927, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":928
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"({market_pair.maker.trading_pair}) Maker sell order of "
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 928, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":929
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Maker sell order of "             # <<<<<<<<<<<<<<
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 *                     )
 */
        __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 929, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = 0;
        __pyx_t_10 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_9 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__24);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 929, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 929, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_Maker_sell_order_of);
        __pyx_t_9 += 22;
        __Pyx_GIVEREF(__pyx_kp_u_Maker_sell_order_of);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Maker_sell_order_of);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":930
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Maker sell order of "
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."             # <<<<<<<<<<<<<<
 *                     )
 *                 if self._filled_order_delay:
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_9 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__23);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u_filled);
        __pyx_t_9 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_filled);
        PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_filled);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":929
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Maker sell order of "             # <<<<<<<<<<<<<<
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 *                     )
 */
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_5, __pyx_t_6};
          __pyx_t_12 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 927, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_5, __pyx_t_6};
          __pyx_t_12 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 927, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 927, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_13, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_13, __pyx_t_6);
          __pyx_t_5 = 0;
          __pyx_t_6 = 0;
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_8, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 927, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":926
 *                     self._order_fill_sell_events[market_pair].append(order_fill_record)
 * 
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":932
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 *                     )
 *                 if self._filled_order_delay:             # <<<<<<<<<<<<<<
 *                   self._filled_order_delay_timer = self._current_timestamp + self._filled_order_delay_seconds
 *                   self.logger().info(f"Just canceled all maker order and will not place any new orders for {self._cancel_order_timer_seconds} seconds")
 */
      __pyx_t_3 = (__pyx_v_self->_filled_order_delay != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":933
 *                     )
 *                 if self._filled_order_delay:
 *                   self._filled_order_delay_timer = self._current_timestamp + self._filled_order_delay_seconds             # <<<<<<<<<<<<<<
 *                   self.logger().info(f"Just canceled all maker order and will not place any new orders for {self._cancel_order_timer_seconds} seconds")
 * 
 */
        __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = PyNumber_Add(__pyx_t_12, __pyx_v_self->_filled_order_delay_seconds); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GIVEREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_v_self->_filled_order_delay_timer);
        __Pyx_DECREF(__pyx_v_self->_filled_order_delay_timer);
        __pyx_v_self->_filled_order_delay_timer = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":934
 *                 if self._filled_order_delay:
 *                   self._filled_order_delay_timer = self._current_timestamp + self._filled_order_delay_seconds
 *                   self.logger().info(f"Just canceled all maker order and will not place any new orders for {self._cancel_order_timer_seconds} seconds")             # <<<<<<<<<<<<<<
 * 
 *             # Call c_check_and_hedge_orders() to emit the orders on the taker side.
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_12 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_9 = 0;
        __pyx_t_10 = 127;
        __Pyx_INCREF(__pyx_kp_u_Just_canceled_all_maker_order_an);
        __pyx_t_9 += 68;
        __Pyx_GIVEREF(__pyx_kp_u_Just_canceled_all_maker_order_an);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u_Just_canceled_all_maker_order_an);
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_cancel_order_timer_seconds, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;
        __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u_seconds);
        __pyx_t_9 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_seconds);
        PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_seconds);
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_12, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_11 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_12, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":932
 *                         f"{order_filled_event.amount} {market_pair.maker.base_asset} filled."
 *                     )
 *                 if self._filled_order_delay:             # <<<<<<<<<<<<<<
 *                   self._filled_order_delay_timer = self._current_timestamp + self._filled_order_delay_seconds
 *                   self.logger().info(f"Just canceled all maker order and will not place any new orders for {self._cancel_order_timer_seconds} seconds")
 */
      }
    }
    __pyx_L6:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":937
 * 
 *             # Call c_check_and_hedge_orders() to emit the orders on the taker side.
 *             try:             # <<<<<<<<<<<<<<
 *                 self.c_check_and_hedge_orders(market_pair)
 *             except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":938
 *             # Call c_check_and_hedge_orders() to emit the orders on the taker side.
 *             try:
 *                 self.c_check_and_hedge_orders(market_pair)             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.log_with_clock(logging.ERROR, "Unexpected error.", exc_info=True)
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_check_and_hedge_orders(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 938, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":937
 * 
 *             # Call c_check_and_hedge_orders() to emit the orders on the taker side.
 *             try:             # <<<<<<<<<<<<<<
 *                 self.c_check_and_hedge_orders(market_pair)
 *             except Exception:
 */
      }
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      goto __pyx_L18_try_end;
      __pyx_L13_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":939
 *             try:
 *                 self.c_check_and_hedge_orders(market_pair)
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.ERROR, "Unexpected error.", exc_info=True)
 * 
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_13) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_did_fill_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(0, 939, __pyx_L15_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":940
 *                 self.c_check_and_hedge_orders(market_pair)
 *             except Exception:
 *                 self.log_with_clock(logging.ERROR, "Unexpected error.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_complete_buy_order(self, object order_completed_event):
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 940, __pyx_L15_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logging); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 940, __pyx_L15_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 940, __pyx_L15_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 940, __pyx_L15_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
        __Pyx_INCREF(__pyx_kp_u_Unexpected_error);
        __Pyx_GIVEREF(__pyx_kp_u_Unexpected_error);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_Unexpected_error);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 940, __pyx_L15_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 940, __pyx_L15_except_error)
        __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 940, __pyx_L15_except_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L14_exception_handled;
      }
      goto __pyx_L15_except_error;
      __pyx_L15_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":937
 * 
 *             # Call c_check_and_hedge_orders() to emit the orders on the taker side.
 *             try:             # <<<<<<<<<<<<<<
 *                 self.c_check_and_hedge_orders(market_pair)
 *             except Exception:
 */
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      goto __pyx_L1_error;
      __pyx_L14_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      __pyx_L18_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":898
 * 
 *         # Make sure to only hedge limit orders.
 *         if market_pair is not None and order_id in self._maker_order_ids:             # <<<<<<<<<<<<<<
 *             limit_order_record = self._sb_order_tracker.c_get_shadow_limit_order(order_id)
 *             order_fill_record = (limit_order_record, order_filled_event)
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":886
 * 
 * 
 *     cdef c_did_fill_order(self, object order_filled_event):             # <<<<<<<<<<<<<<
 *         """
 *         If a limit order previously made to the maker side has been filled, hedge it on the taker side.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_did_fill_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_v_order_fill_record);
  __Pyx_XDECREF((PyObject *)__pyx_v_limit_order_record);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":942
 *                 self.log_with_clock(logging.ERROR, "Unexpected error.", exc_info=True)
 * 
 *     cdef c_did_complete_buy_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log message when a bid order (on maker side or taker side) is completely taken.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_complete_buy_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_market_pair = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_limit_order_record = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_taker_trading_pair = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quote_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_taker_top = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_buy_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":948
 *         """
 *         cdef:
 *             str order_id = order_completed_event.order_id             # <<<<<<<<<<<<<<
 *             object market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(order_id)
 *             LimitOrder limit_order_record
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":949
 *         cdef:
 *             str order_id = order_completed_event.order_id
 *             object market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 *             LimitOrder limit_order_record
 *             ExchangeBase taker_market = market_pair.taker.market
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_v_self->_market_pair_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->_market_pair_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":951
 *             object market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(order_id)
 *             LimitOrder limit_order_record
 *             ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *             str taker_trading_pair = market_pair.taker.trading_pair
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 951, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":952
 *             LimitOrder limit_order_record
 *             ExchangeBase taker_market = market_pair.taker.market
 *             str taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 952, __pyx_L1_error)
  __pyx_v_taker_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":955
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                 self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *         if market_pair is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 954, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 6) < 0) __PYX_ERR(0, 954, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 954, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":954
 *             str taker_trading_pair = market_pair.taker.trading_pair
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 */
  __pyx_v_quote_pair = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_base_pair = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_rate_source = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":957
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 *         if market_pair is not None:             # <<<<<<<<<<<<<<
 *             if order_id in self._maker_order_ids:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 */
  __pyx_t_10 = (__pyx_v_market_pair != Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":958
 * 
 *         if market_pair is not None:
 *             if order_id in self._maker_order_ids:             # <<<<<<<<<<<<<<
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 *                 self.log_with_clock(
 */
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_v_order_id, __pyx_v_self->_maker_order_ids, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 958, __pyx_L1_error)
    __pyx_t_10 = (__pyx_t_11 != 0);
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":959
 *         if market_pair is not None:
 *             if order_id in self._maker_order_ids:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_order(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_t_1, __pyx_v_order_id)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 959, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_limit_order_record = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":960
 *             if order_id in self._maker_order_ids:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Maker buy order {order_id} "
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":961
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.maker.trading_pair}) Maker buy order {order_id} "
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":962
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Maker buy order {order_id} "             # <<<<<<<<<<<<<<
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 */
      __pyx_t_6 = PyTuple_New(13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u__24);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_Maker_buy_order);
      __pyx_t_12 += 18;
      __Pyx_GIVEREF(__pyx_kp_u_Maker_buy_order);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_Maker_buy_order);
      __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__19);
      __pyx_t_12 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__19);
      PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u__19);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":963
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Maker buy order {order_id} "
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "             # <<<<<<<<<<<<<<
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 *                 )
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quantity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_kp_u__23);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_base_currency); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__25);
      __pyx_t_12 += 3;
      __Pyx_GIVEREF(__pyx_kp_u__25);
      PyTuple_SET_ITEM(__pyx_t_6, 8, __pyx_kp_u__25);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":964
 *                     f"({market_pair.maker.trading_pair}) Maker buy order {order_id} "
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."             # <<<<<<<<<<<<<<
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 964, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 9, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_6, 10, __pyx_kp_u__23);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quote_currency); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 964, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 11, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_has_been_completely_filled);
      __pyx_t_12 += 29;
      __Pyx_GIVEREF(__pyx_kp_u_has_been_completely_filled);
      PyTuple_SET_ITEM(__pyx_t_6, 12, __pyx_kp_u_has_been_completely_filled);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":962
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Maker buy order {order_id} "             # <<<<<<<<<<<<<<
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_6, 13, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_4};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 960, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_4};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 960, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 960, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_14, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_14, __pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_4 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 960, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":966
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 *                 )
 *                 self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                     f"Maker BUY order ({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} RA:{limit_order_record.price * self.market_conversion_rate()} is filled."
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":967
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 *                     f"Maker BUY order ({limit_order_record.quantity} {limit_order_record.base_currency} @ "             # <<<<<<<<<<<<<<
 *                     f"{limit_order_record.price} RA:{limit_order_record.price * self.market_conversion_rate()} is filled."
 *                 )
 */
      __pyx_t_3 = PyTuple_New(9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 967, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u_Maker_BUY_order);
      __pyx_t_12 += 17;
      __Pyx_GIVEREF(__pyx_kp_u_Maker_BUY_order);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Maker_BUY_order);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quantity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 967, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 967, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__23);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_base_currency); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 967, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 967, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__25);
      __pyx_t_12 += 3;
      __Pyx_GIVEREF(__pyx_kp_u__25);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__25);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":968
 *                 self.notify_hb_app_with_timestamp(
 *                     f"Maker BUY order ({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} RA:{limit_order_record.price * self.market_conversion_rate()} is filled."             # <<<<<<<<<<<<<<
 *                 )
 *             else:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_RA);
      __pyx_t_12 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_RA);
      PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u_RA);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_filled);
      __pyx_t_12 += 11;
      __Pyx_GIVEREF(__pyx_kp_u_is_filled);
      PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_kp_u_is_filled);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":967
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 *                     f"Maker BUY order ({limit_order_record.quantity} {limit_order_record.base_currency} @ "             # <<<<<<<<<<<<<<
 *                     f"{limit_order_record.price} RA:{limit_order_record.price * self.market_conversion_rate()} is filled."
 *                 )
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_3, 9, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 967, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 966, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":958
 * 
 *         if market_pair is not None:
 *             if order_id in self._maker_order_ids:             # <<<<<<<<<<<<<<
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 *                 self.log_with_clock(
 */
      goto __pyx_L6;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":971
 *                 )
 *             else:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.taker, order_id)             # <<<<<<<<<<<<<<
 *                 taker_top = taker_market.c_get_price(taker_trading_pair, True)
 *                 self.log_with_clock(
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_order(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_t_7, __pyx_v_order_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_limit_order_record = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":972
 *             else:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.taker, order_id)
 *                 taker_top = taker_market.c_get_price(taker_trading_pair, True)             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_taker_top = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":973
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.taker, order_id)
 *                 taker_top = taker_market.c_get_price(taker_trading_pair, True)
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.taker.trading_pair}) Taker buy order {order_id} for "
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 973, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":974
 *                 taker_top = taker_market.c_get_price(taker_trading_pair, True)
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.taker.trading_pair}) Taker buy order {order_id} for "
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":975
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.taker.trading_pair}) Taker buy order {order_id} for "             # <<<<<<<<<<<<<<
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."
 *                 )
 */
      __pyx_t_4 = PyTuple_New(13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u__24);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_Taker_buy_order);
      __pyx_t_12 += 18;
      __Pyx_GIVEREF(__pyx_kp_u_Taker_buy_order);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Taker_buy_order);
      __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_for);
      __pyx_t_12 += 6;
      __Pyx_GIVEREF(__pyx_kp_u_for);
      PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_for);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":976
 *                     logging.INFO,
 *                     f"({market_pair.taker.trading_pair}) Taker buy order {order_id} for "
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."             # <<<<<<<<<<<<<<
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_base_asset_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__23);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__25);
      __pyx_t_12 += 3;
      __Pyx_GIVEREF(__pyx_kp_u__25);
      PyTuple_SET_ITEM(__pyx_t_4, 8, __pyx_kp_u__25);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 9, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_4, 10, __pyx_kp_u__23);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quote_currency); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 11, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_has_been_completely_filled_2);
      __pyx_t_12 += 28;
      __Pyx_GIVEREF(__pyx_kp_u_has_been_completely_filled_2);
      PyTuple_SET_ITEM(__pyx_t_4, 12, __pyx_kp_u_has_been_completely_filled_2);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":975
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.taker.trading_pair}) Taker buy order {order_id} for "             # <<<<<<<<<<<<<<
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."
 *                 )
 */
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 13, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_14, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_14, __pyx_t_6);
        __pyx_t_3 = 0;
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":978
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."
 *                 )
 *                 self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                     f"Taker buy order {order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} RA:{limit_order_record.price * self.market_conversion_rate()}"
 *                 )
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 978, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":979
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 *                     f"Taker buy order {order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} RA:{limit_order_record.price * self.market_conversion_rate()}"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
      __pyx_t_5 = PyTuple_New(8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u_Taker_buy_order_2);
      __pyx_t_12 += 16;
      __Pyx_GIVEREF(__pyx_kp_u_Taker_buy_order_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Taker_buy_order_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_base_asset_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u__23);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__25);
      __pyx_t_12 += 3;
      __Pyx_GIVEREF(__pyx_kp_u__25);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__25);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_RA);
      __pyx_t_12 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_RA);
      PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_kp_u_RA);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_5, 8, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 979, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L6:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":957
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 *         if market_pair is not None:             # <<<<<<<<<<<<<<
 *             if order_id in self._maker_order_ids:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":942
 *                 self.log_with_clock(logging.ERROR, "Unexpected error.", exc_info=True)
 * 
 *     cdef c_did_complete_buy_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log message when a bid order (on maker side or taker side) is completely taken.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_did_complete_buy_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XDECREF((PyObject *)__pyx_v_limit_order_record);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_taker_top);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":982
 *                 )
 * 
 *     cdef c_did_complete_sell_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log message when a ask order (on maker side or taker side) is completely taken.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_complete_sell_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_market_pair = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_limit_order_record = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_taker_trading_pair = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quote_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_taker_top = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_sell_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":988
 *         """
 *         cdef:
 *             str order_id = order_completed_event.order_id             # <<<<<<<<<<<<<<
 *             object market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(order_id)
 *             LimitOrder limit_order_record
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 988, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":989
 *         cdef:
 *             str order_id = order_completed_event.order_id
 *             object market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 *             LimitOrder limit_order_record
 *             ExchangeBase taker_market = market_pair.taker.market
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_v_self->_market_pair_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->_market_pair_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":991
 *             object market_pair = self._market_pair_tracker.c_get_market_pair_from_order_id(order_id)
 *             LimitOrder limit_order_record
 *             ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *             str taker_trading_pair = market_pair.taker.trading_pair
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 991, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":992
 *             LimitOrder limit_order_record
 *             ExchangeBase taker_market = market_pair.taker.market
 *             str taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 992, __pyx_L1_error)
  __pyx_v_taker_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":995
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                 self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *         if market_pair is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 994, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 6) < 0) __PYX_ERR(0, 994, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 994, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":994
 *             str taker_trading_pair = market_pair.taker.trading_pair
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 */
  __pyx_v_quote_pair = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_base_pair = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_rate_source = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":997
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 *         if market_pair is not None:             # <<<<<<<<<<<<<<
 *             if order_id in self._maker_order_ids:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 */
  __pyx_t_10 = (__pyx_v_market_pair != Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":998
 * 
 *         if market_pair is not None:
 *             if order_id in self._maker_order_ids:             # <<<<<<<<<<<<<<
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 *                 self.log_with_clock(
 */
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_v_order_id, __pyx_v_self->_maker_order_ids, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 998, __pyx_L1_error)
    __pyx_t_10 = (__pyx_t_11 != 0);
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":999
 *         if market_pair is not None:
 *             if order_id in self._maker_order_ids:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_order(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_t_1, __pyx_v_order_id)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 999, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_limit_order_record = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1000
 *             if order_id in self._maker_order_ids:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Maker sell order {order_id} "
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1001
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.maker.trading_pair}) Maker sell order {order_id} "
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1002
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Maker sell order {order_id} "             # <<<<<<<<<<<<<<
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 */
      __pyx_t_6 = PyTuple_New(13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u__24);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_Maker_sell_order);
      __pyx_t_12 += 19;
      __Pyx_GIVEREF(__pyx_kp_u_Maker_sell_order);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_Maker_sell_order);
      __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__19);
      __pyx_t_12 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__19);
      PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u__19);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1003
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Maker sell order {order_id} "
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "             # <<<<<<<<<<<<<<
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 *                 )
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quantity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_kp_u__23);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_base_currency); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__25);
      __pyx_t_12 += 3;
      __Pyx_GIVEREF(__pyx_kp_u__25);
      PyTuple_SET_ITEM(__pyx_t_6, 8, __pyx_kp_u__25);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1004
 *                     f"({market_pair.maker.trading_pair}) Maker sell order {order_id} "
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."             # <<<<<<<<<<<<<<
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 9, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_6, 10, __pyx_kp_u__23);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quote_currency); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 11, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_has_been_completely_filled);
      __pyx_t_12 += 29;
      __Pyx_GIVEREF(__pyx_kp_u_has_been_completely_filled);
      PyTuple_SET_ITEM(__pyx_t_6, 12, __pyx_kp_u_has_been_completely_filled);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1002
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Maker sell order {order_id} "             # <<<<<<<<<<<<<<
 *                     f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_6, 13, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_4};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_4};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_14, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_14, __pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_4 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1006
 *                     f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 *                 )
 *                 self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                     f"Maker sell order ({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} is filled."
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1007
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 *                     f"Maker sell order ({limit_order_record.quantity} {limit_order_record.base_currency} @ "             # <<<<<<<<<<<<<<
 *                     f"{limit_order_record.price} is filled."
 *                 )
 */
      __pyx_t_3 = PyTuple_New(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u_Maker_sell_order_2);
      __pyx_t_12 += 18;
      __Pyx_GIVEREF(__pyx_kp_u_Maker_sell_order_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Maker_sell_order_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quantity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__23);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_base_currency); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__25);
      __pyx_t_12 += 3;
      __Pyx_GIVEREF(__pyx_kp_u__25);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__25);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1008
 *                 self.notify_hb_app_with_timestamp(
 *                     f"Maker sell order ({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                     f"{limit_order_record.price} is filled."             # <<<<<<<<<<<<<<
 *                 )
 *             else:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_filled);
      __pyx_t_12 += 11;
      __Pyx_GIVEREF(__pyx_kp_u_is_filled);
      PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u_is_filled);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1007
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 *                     f"Maker sell order ({limit_order_record.quantity} {limit_order_record.base_currency} @ "             # <<<<<<<<<<<<<<
 *                     f"{limit_order_record.price} is filled."
 *                 )
 */
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 7, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1006, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":998
 * 
 *         if market_pair is not None:
 *             if order_id in self._maker_order_ids:             # <<<<<<<<<<<<<<
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 *                 self.log_with_clock(
 */
      goto __pyx_L6;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1011
 *                 )
 *             else:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.taker, order_id)             # <<<<<<<<<<<<<<
 *                 taker_top = taker_market.c_get_price(taker_trading_pair, False)
 *                 self.log_with_clock(
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_order(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_t_7, __pyx_v_order_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_limit_order_record = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1012
 *             else:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.taker, order_id)
 *                 taker_top = taker_market.c_get_price(taker_trading_pair, False)             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_taker_top = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1013
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.taker, order_id)
 *                 taker_top = taker_market.c_get_price(taker_trading_pair, False)
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.taker.trading_pair}) Taker sell order {order_id} for "
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1014
 *                 taker_top = taker_market.c_get_price(taker_trading_pair, False)
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.taker.trading_pair}) Taker sell order {order_id} for "
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logging); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_INFO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1015
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.taker.trading_pair}) Taker sell order {order_id} for "             # <<<<<<<<<<<<<<
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."
 *                 )
 */
      __pyx_t_5 = PyTuple_New(13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u__24);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_Taker_sell_order);
      __pyx_t_12 += 19;
      __Pyx_GIVEREF(__pyx_kp_u_Taker_sell_order);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_Taker_sell_order);
      __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_for);
      __pyx_t_12 += 6;
      __Pyx_GIVEREF(__pyx_kp_u_for);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u_for);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1016
 *                     logging.INFO,
 *                     f"({market_pair.taker.trading_pair}) Taker sell order {order_id} for "
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."             # <<<<<<<<<<<<<<
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_base_asset_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_kp_u__23);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__25);
      __pyx_t_12 += 3;
      __Pyx_GIVEREF(__pyx_kp_u__25);
      PyTuple_SET_ITEM(__pyx_t_5, 8, __pyx_kp_u__25);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 9, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_5, 10, __pyx_kp_u__23);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quote_currency); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 11, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_has_been_completely_filled_2);
      __pyx_t_12 += 28;
      __Pyx_GIVEREF(__pyx_kp_u_has_been_completely_filled_2);
      PyTuple_SET_ITEM(__pyx_t_5, 12, __pyx_kp_u_has_been_completely_filled_2);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1015
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.taker.trading_pair}) Taker sell order {order_id} for "             # <<<<<<<<<<<<<<
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."
 *                 )
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 13, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1013, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_14, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_14, __pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1018
 *                     f"({order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} {limit_order_record.quote_currency} has been completely filled."
 *                 )
 *                 self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                     f"Taker sell order {order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} RA:{limit_order_record.price * self.market_conversion_rate()}"
 *                 )
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1019
 *                 )
 *                 self.notify_hb_app_with_timestamp(
 *                     f"Taker sell order {order_completed_event.base_asset_amount} {order_completed_event.base_asset} @ {limit_order_record.price} RA:{limit_order_record.price * self.market_conversion_rate()}"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
      __pyx_t_6 = PyTuple_New(8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_12 = 0;
      __pyx_t_13 = 127;
      __Pyx_INCREF(__pyx_kp_u_Taker_sell_order_2);
      __pyx_t_12 += 17;
      __Pyx_GIVEREF(__pyx_kp_u_Taker_sell_order_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Taker_sell_order_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_base_asset_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_12 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u__23);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__25);
      __pyx_t_12 += 3;
      __Pyx_GIVEREF(__pyx_kp_u__25);
      PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u__25);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_RA);
      __pyx_t_12 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_RA);
      PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_kp_u_RA);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_13;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_6, 8, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L6:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":997
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 *         if market_pair is not None:             # <<<<<<<<<<<<<<
 *             if order_id in self._maker_order_ids:
 *                 limit_order_record = self._sb_order_tracker.c_get_limit_order(market_pair.maker, order_id)
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":982
 *                 )
 * 
 *     cdef c_did_complete_sell_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log message when a ask order (on maker side or taker side) is completely taken.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_did_complete_sell_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XDECREF((PyObject *)__pyx_v_limit_order_record);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_taker_top);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1022
 *                 )
 * 
 *     cdef bint c_check_if_price_has_drifted(self, object market_pair, LimitOrder active_order):             # <<<<<<<<<<<<<<
 *         """
 *         Given a currently active limit order on maker side, check if its current price is still valid, based on the
 */

static int __pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_price_has_drifted(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order) {
  int __pyx_v_is_buy;
  PyObject *__pyx_v_order_price = 0;
  PyObject *__pyx_v_order_quantity = 0;
  PyObject *__pyx_v_suggested_price = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_check_if_price_has_drifted", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1037
 *         """
 *         cdef:
 *             bint is_buy = active_order.is_buy             # <<<<<<<<<<<<<<
 *             object order_price = active_order.price
 *             object order_quantity = active_order.quantity
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_is_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_is_buy = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1038
 *         cdef:
 *             bint is_buy = active_order.is_buy
 *             object order_price = active_order.price             # <<<<<<<<<<<<<<
 *             object order_quantity = active_order.quantity
 *             object suggested_price = self.c_get_market_making_price(market_pair, is_buy, order_quantity)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1039
 *             bint is_buy = active_order.is_buy
 *             object order_price = active_order.price
 *             object order_quantity = active_order.quantity             # <<<<<<<<<<<<<<
 *             object suggested_price = self.c_get_market_making_price(market_pair, is_buy, order_quantity)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_quantity = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1040
 *             object order_price = active_order.price
 *             object order_quantity = active_order.quantity
 *             object suggested_price = self.c_get_market_making_price(market_pair, is_buy, order_quantity)             # <<<<<<<<<<<<<<
 * 
 *         if suggested_price != order_price:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_making_price(__pyx_v_self, __pyx_v_market_pair, __pyx_v_is_buy, __pyx_v_order_quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_suggested_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1042
 *             object suggested_price = self.c_get_market_making_price(market_pair, is_buy, order_quantity)
 * 
 *         if suggested_price != order_price:             # <<<<<<<<<<<<<<
 * 
 *             if is_buy:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_suggested_price, __pyx_v_order_price, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1044
 *         if suggested_price != order_price:
 * 
 *             if is_buy:             # <<<<<<<<<<<<<<
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                     self.log_with_clock(
 */
    __pyx_t_2 = (__pyx_v_is_buy != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1045
 * 
 *             if is_buy:
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_ADJUST_ORDER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyNumber_And(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1046
 *             if is_buy:
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) The current limit bid order for "
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1047
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"({market_pair.maker.trading_pair}) The current limit bid order for "
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1048
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) The current limit bid order for "             # <<<<<<<<<<<<<<
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "
 */
        __pyx_t_1 = PyTuple_New(13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__24);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_The_current_limit_bid_order_for);
        __pyx_t_6 += 34;
        __Pyx_GIVEREF(__pyx_kp_u_The_current_limit_bid_order_for);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_The_current_limit_bid_order_for);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1049
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) The current limit bid order for "
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "             # <<<<<<<<<<<<<<
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "
 *                         f"price at {suggested_price}. Going to cancel the old order and create a new one..."
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_quantity); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__23);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1049, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_at);
        __pyx_t_6 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_at);
        PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_at);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1050
 *                         f"({market_pair.maker.trading_pair}) The current limit bid order for "
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "             # <<<<<<<<<<<<<<
 *                         f"price at {suggested_price}. Going to cancel the old order and create a new one..."
 *                     )
 */
        __pyx_t_9 = __Pyx_PyObject_Format(__pyx_v_order_price, __pyx_kp_u_8g); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__23);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1050, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_now_below_the_suggested_orde);
        __pyx_t_6 += 43;
        __Pyx_GIVEREF(__pyx_kp_u_is_now_below_the_suggested_orde);
        PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u_is_now_below_the_suggested_orde);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1051
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "
 *                         f"price at {suggested_price}. Going to cancel the old order and create a new one..."             # <<<<<<<<<<<<<<
 *                     )
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)
 */
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_suggested_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1051, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 11, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_Going_to_cancel_the_old_order_a);
        __pyx_t_6 += 55;
        __Pyx_GIVEREF(__pyx_kp_u_Going_to_cancel_the_old_order_a);
        PyTuple_SET_ITEM(__pyx_t_1, 12, __pyx_kp_u_Going_to_cancel_the_old_order_a);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1048
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) The current limit bid order for "             # <<<<<<<<<<<<<<
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "
 */
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_1, 13, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1048, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_10 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_5, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_5, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1046, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, __pyx_t_9);
          __pyx_t_5 = 0;
          __pyx_t_9 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1045
 * 
 *             if is_buy:
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1053
 *                         f"price at {suggested_price}. Going to cancel the old order and create a new one..."
 *                     )
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.DEBUG,
 *                                     f"Current buy order price={order_price}, "
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 1053, __pyx_L1_error)
      __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, ((PyObject*)__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1054
 *                     )
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)
 *                 self.log_with_clock(logging.DEBUG,             # <<<<<<<<<<<<<<
 *                                     f"Current buy order price={order_price}, "
 *                                     f"suggested order price={suggested_price}")
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_logging); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1054, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1054, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1055
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)
 *                 self.log_with_clock(logging.DEBUG,
 *                                     f"Current buy order price={order_price}, "             # <<<<<<<<<<<<<<
 *                                     f"suggested order price={suggested_price}")
 *                 return False
 */
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = 0;
      __pyx_t_7 = 127;
      __Pyx_INCREF(__pyx_kp_u_Current_buy_order_price);
      __pyx_t_6 += 24;
      __Pyx_GIVEREF(__pyx_kp_u_Current_buy_order_price);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Current_buy_order_price);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_order_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_suggested_order_price);
      __pyx_t_6 += 24;
      __Pyx_GIVEREF(__pyx_kp_u_suggested_order_price);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_suggested_order_price);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1056
 *                 self.log_with_clock(logging.DEBUG,
 *                                     f"Current buy order price={order_price}, "
 *                                     f"suggested order price={suggested_price}")             # <<<<<<<<<<<<<<
 *                 return False
 *             else:
 */
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_suggested_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1056, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1055
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)
 *                 self.log_with_clock(logging.DEBUG,
 *                                     f"Current buy order price={order_price}, "             # <<<<<<<<<<<<<<
 *                                     f"suggested order price={suggested_price}")
 *                 return False
 */
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_8, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_9, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_9, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_t_5);
        __pyx_t_9 = 0;
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1057
 *                                     f"Current buy order price={order_price}, "
 *                                     f"suggested order price={suggested_price}")
 *                 return False             # <<<<<<<<<<<<<<
 *             else:
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1044
 *         if suggested_price != order_price:
 * 
 *             if is_buy:             # <<<<<<<<<<<<<<
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                     self.log_with_clock(
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1059
 *                 return False
 *             else:
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_ADJUST_ORDER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyNumber_And(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1059, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1060
 *             else:
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) The current limit ask order for "
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1060, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1061
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"({market_pair.maker.trading_pair}) The current limit ask order for "
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logging); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1061, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1062
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) The current limit ask order for "             # <<<<<<<<<<<<<<
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "
 */
        __pyx_t_3 = PyTuple_New(13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u__24);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_The_current_limit_ask_order_for);
        __pyx_t_6 += 34;
        __Pyx_GIVEREF(__pyx_kp_u_The_current_limit_ask_order_for);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_The_current_limit_ask_order_for);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1063
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) The current limit ask order for "
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "             # <<<<<<<<<<<<<<
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "
 *                         f"price at {suggested_price}. Going to cancel the old order and create a new one..."
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_quantity); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1063, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1063, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__23);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1063, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1063, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1063, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_at);
        __pyx_t_6 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_at);
        PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u_at);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1064
 *                         f"({market_pair.maker.trading_pair}) The current limit ask order for "
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "             # <<<<<<<<<<<<<<
 *                         f"price at {suggested_price}. Going to cancel the old order and create a new one..."
 *                     )
 */
        __pyx_t_8 = __Pyx_PyObject_Format(__pyx_v_order_price, __pyx_kp_u_8g); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1064, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_kp_u__23);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1064, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1064, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1064, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 9, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_now_below_the_suggested_orde);
        __pyx_t_6 += 43;
        __Pyx_GIVEREF(__pyx_kp_u_is_now_below_the_suggested_orde);
        PyTuple_SET_ITEM(__pyx_t_3, 10, __pyx_kp_u_is_now_below_the_suggested_orde);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1065
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "
 *                         f"price at {suggested_price}. Going to cancel the old order and create a new one..."             # <<<<<<<<<<<<<<
 *                     )
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)
 */
        __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_suggested_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1065, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 11, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u_Going_to_cancel_the_old_order_a);
        __pyx_t_6 += 55;
        __Pyx_GIVEREF(__pyx_kp_u_Going_to_cancel_the_old_order_a);
        PyTuple_SET_ITEM(__pyx_t_3, 12, __pyx_kp_u_Going_to_cancel_the_old_order_a);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1062
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) The current limit ask order for "             # <<<<<<<<<<<<<<
 *                         f"{active_order.quantity} {market_pair.maker.base_asset} at "
 *                         f"{order_price:.8g} {market_pair.maker.quote_asset} is now below the suggested order "
 */
        __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_3, 13, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_10 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_t_8};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_t_8};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1060, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_3) {
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_t_8);
          __pyx_t_5 = 0;
          __pyx_t_8 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1059
 *                 return False
 *             else:
 *                 if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1067
 *                         f"price at {suggested_price}. Going to cancel the old order and create a new one..."
 *                     )
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.DEBUG,
 *                                     f"Current sell order price={order_price}, "
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1067, __pyx_L1_error)
      __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1068
 *                     )
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)
 *                 self.log_with_clock(logging.DEBUG,             # <<<<<<<<<<<<<<
 *                                     f"Current sell order price={order_price}, "
 *                                     f"suggested order price={suggested_price}")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_logging); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1069
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)
 *                 self.log_with_clock(logging.DEBUG,
 *                                     f"Current sell order price={order_price}, "             # <<<<<<<<<<<<<<
 *                                     f"suggested order price={suggested_price}")
 *                 return False
 */
      __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = 0;
      __pyx_t_7 = 127;
      __Pyx_INCREF(__pyx_kp_u_Current_sell_order_price);
      __pyx_t_6 += 25;
      __Pyx_GIVEREF(__pyx_kp_u_Current_sell_order_price);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_Current_sell_order_price);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_order_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_suggested_order_price);
      __pyx_t_6 += 24;
      __Pyx_GIVEREF(__pyx_kp_u_suggested_order_price);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_suggested_order_price);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1070
 *                 self.log_with_clock(logging.DEBUG,
 *                                     f"Current sell order price={order_price}, "
 *                                     f"suggested order price={suggested_price}")             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_suggested_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1070, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1069
 *                 self.c_cancel_order(market_pair, active_order.client_order_id)
 *                 self.log_with_clock(logging.DEBUG,
 *                                     f"Current sell order price={order_price}, "             # <<<<<<<<<<<<<<
 *                                     f"suggested order price={suggested_price}")
 *                 return False
 */
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_9, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_8, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1068, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_8, __pyx_t_5};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1068, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1068, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_t_5);
        __pyx_t_8 = 0;
        __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1068, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1071
 *                                     f"Current sell order price={order_price}, "
 *                                     f"suggested order price={suggested_price}")
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *         return True
 */
      __pyx_r = 0;
      goto __pyx_L0;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1042
 *             object suggested_price = self.c_get_market_making_price(market_pair, is_buy, order_quantity)
 * 
 *         if suggested_price != order_price:             # <<<<<<<<<<<<<<
 * 
 *             if is_buy:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1073
 *                 return False
 * 
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef c_check_and_hedge_orders(self, object market_pair):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1022
 *                 )
 * 
 *     cdef bint c_check_if_price_has_drifted(self, object market_pair, LimitOrder active_order):             # <<<<<<<<<<<<<<
 *         """
 *         Given a currently active limit order on maker side, check if its current price is still valid, based on the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_if_price_has_drifted", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_price);
  __Pyx_XDECREF(__pyx_v_order_quantity);
  __Pyx_XDECREF(__pyx_v_suggested_price);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1075
 *         return True
 * 
 *     cdef c_check_and_hedge_orders(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Look into the stored and un-hedged limit order fill events, and emit orders to hedge them, depending on
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_and_hedge_orders(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_taker_trading_pair = 0;
  PyObject *__pyx_v_buy_fill_records = 0;
  PyObject *__pyx_v_sell_fill_records = 0;
  PyObject *__pyx_v_buy_fill_quantity = 0;
  PyObject *__pyx_v_sell_fill_quantity = 0;
  PyObject *__pyx_v_taker_top = 0;
  PyObject *__pyx_v_hedged_order_quantity = 0;
  PyObject *__pyx_v_avg_fill_price = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quote_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_v_quantized_hedge_amount = NULL;
  PyObject *__pyx_v_order_price = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_order_id = NULL;
  PyObject *__pyx_v_taker_top_ask = NULL;
  CYTHON_UNUSED PyObject *__pyx_9genexpr14__pyx_v__ = NULL;
  PyObject *__pyx_9genexpr14__pyx_v_fill_event = NULL;
  CYTHON_UNUSED PyObject *__pyx_9genexpr15__pyx_v__ = NULL;
  PyObject *__pyx_9genexpr15__pyx_v_fill_event = NULL;
  CYTHON_UNUSED PyObject *__pyx_9genexpr16__pyx_v__ = NULL;
  PyObject *__pyx_9genexpr16__pyx_v_r = NULL;
  CYTHON_UNUSED PyObject *__pyx_9genexpr17__pyx_v__ = NULL;
  PyObject *__pyx_9genexpr17__pyx_v_r = NULL;
  CYTHON_UNUSED PyObject *__pyx_9genexpr18__pyx_v__ = NULL;
  PyObject *__pyx_9genexpr18__pyx_v_r = NULL;
  CYTHON_UNUSED PyObject *__pyx_9genexpr19__pyx_v__ = NULL;
  PyObject *__pyx_9genexpr19__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  double __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_check_and_hedge_orders", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1083
 *         """
 *         cdef:
 *             ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             list buy_fill_records = self._order_fill_buy_events.get(market_pair, [])
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1083, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1084
 *         cdef:
 *             ExchangeBase taker_market = market_pair.taker.market
 *             str taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 *             list buy_fill_records = self._order_fill_buy_events.get(market_pair, [])
 *             list sell_fill_records = self._order_fill_sell_events.get(market_pair, [])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1084, __pyx_L1_error)
  __pyx_v_taker_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1085
 *             ExchangeBase taker_market = market_pair.taker.market
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             list buy_fill_records = self._order_fill_buy_events.get(market_pair, [])             # <<<<<<<<<<<<<<
 *             list sell_fill_records = self._order_fill_sell_events.get(market_pair, [])
 *             object buy_fill_quantity = sum([fill_event.amount for _, fill_event in buy_fill_records])
 */
  if (unlikely(__pyx_v_self->_order_fill_buy_events == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 1085, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_order_fill_buy_events, __pyx_v_market_pair, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1085, __pyx_L1_error)
  __pyx_v_buy_fill_records = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1086
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             list buy_fill_records = self._order_fill_buy_events.get(market_pair, [])
 *             list sell_fill_records = self._order_fill_sell_events.get(market_pair, [])             # <<<<<<<<<<<<<<
 *             object buy_fill_quantity = sum([fill_event.amount for _, fill_event in buy_fill_records])
 *             object sell_fill_quantity = sum([fill_event.amount for _, fill_event in sell_fill_records])
 */
  if (unlikely(__pyx_v_self->_order_fill_sell_events == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 1086, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_order_fill_sell_events, __pyx_v_market_pair, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1086, __pyx_L1_error)
  __pyx_v_sell_fill_records = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1087
 *             list buy_fill_records = self._order_fill_buy_events.get(market_pair, [])
 *             list sell_fill_records = self._order_fill_sell_events.get(market_pair, [])
 *             object buy_fill_quantity = sum([fill_event.amount for _, fill_event in buy_fill_records])             # <<<<<<<<<<<<<<
 *             object sell_fill_quantity = sum([fill_event.amount for _, fill_event in sell_fill_records])
 *             object taker_top
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_buy_fill_records == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 1087, __pyx_L5_error)
    }
    __pyx_t_2 = __pyx_v_buy_fill_records; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1087, __pyx_L5_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1087, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1087, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1087, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1087, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1087, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 1087, __pyx_L5_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1087, __pyx_L5_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr14__pyx_v__, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_9genexpr14__pyx_v_fill_event, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr14__pyx_v_fill_event, __pyx_n_s_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1087, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1087, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_9genexpr14__pyx_v__); __pyx_9genexpr14__pyx_v__ = 0;
    __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_fill_event); __pyx_9genexpr14__pyx_v_fill_event = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr14__pyx_v__); __pyx_9genexpr14__pyx_v__ = 0;
    __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_fill_event); __pyx_9genexpr14__pyx_v_fill_event = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_buy_fill_quantity = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1088
 *             list sell_fill_records = self._order_fill_sell_events.get(market_pair, [])
 *             object buy_fill_quantity = sum([fill_event.amount for _, fill_event in buy_fill_records])
 *             object sell_fill_quantity = sum([fill_event.amount for _, fill_event in sell_fill_records])             # <<<<<<<<<<<<<<
 *             object taker_top
 *             object hedged_order_quantity
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1088, __pyx_L13_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_sell_fill_records == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 1088, __pyx_L13_error)
    }
    __pyx_t_1 = __pyx_v_sell_fill_records; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1088, __pyx_L13_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1088, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1088, __pyx_L13_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1088, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1088, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1088, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 1088, __pyx_L13_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L17_unpacking_done;
        __pyx_L16_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1088, __pyx_L13_error)
        __pyx_L17_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr15__pyx_v__, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_9genexpr15__pyx_v_fill_event, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr15__pyx_v_fill_event, __pyx_n_s_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1088, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1088, __pyx_L13_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_9genexpr15__pyx_v__); __pyx_9genexpr15__pyx_v__ = 0;
    __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_fill_event); __pyx_9genexpr15__pyx_v_fill_event = 0;
    goto __pyx_L18_exit_scope;
    __pyx_L13_error:;
    __Pyx_XDECREF(__pyx_9genexpr15__pyx_v__); __pyx_9genexpr15__pyx_v__ = 0;
    __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_fill_event); __pyx_9genexpr15__pyx_v_fill_event = 0;
    goto __pyx_L1_error;
    __pyx_L18_exit_scope:;
  } /* exit inner scope */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sell_fill_quantity = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1094
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                 self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *         global s_decimal_zero
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1093, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_9);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_9};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_9};
    __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_10)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_10); if (unlikely(!item)) goto __pyx_L19_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_10), 6) < 0) __PYX_ERR(0, 1093, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L20_unpacking_done;
    __pyx_L19_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1093, __pyx_L1_error)
    __pyx_L20_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1093
 *             object avg_fill_price
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 */
  __pyx_v_quote_pair = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_rate_source = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_quote_rate = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_pair = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate_source = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_base_rate = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1098
 *         global s_decimal_zero
 * 
 *         if buy_fill_quantity > 0:             # <<<<<<<<<<<<<<
 *             hedged_order_quantity = min(
 *                 (buy_fill_quantity / base_rate),
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_buy_fill_quantity, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_11) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1101
 *             hedged_order_quantity = min(
 *                 (buy_fill_quantity / base_rate),
 *                 (taker_market.c_get_available_balance(market_pair.taker.base_asset)))             # <<<<<<<<<<<<<<
 * 
 *             #do this because it is not able to correctly calculate hedged order amount (mostly for sells)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_9)->tp_name), 0))) __PYX_ERR(0, 1101, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1100
 *         if buy_fill_quantity > 0:
 *             hedged_order_quantity = min(
 *                 (buy_fill_quantity / base_rate),             # <<<<<<<<<<<<<<
 *                 (taker_market.c_get_available_balance(market_pair.taker.base_asset)))
 * 
 */
    __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_v_buy_fill_quantity, __pyx_v_base_rate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1101
 *             hedged_order_quantity = min(
 *                 (buy_fill_quantity / base_rate),
 *                 (taker_market.c_get_available_balance(market_pair.taker.base_asset)))             # <<<<<<<<<<<<<<
 * 
 *             #do this because it is not able to correctly calculate hedged order amount (mostly for sells)
 */
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_t_9, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_11) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_7 = __pyx_t_1;
    } else {
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_7 = __pyx_t_9;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_t_7;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_hedged_order_quantity = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1104
 * 
 *             #do this because it is not able to correctly calculate hedged order amount (mostly for sells)
 *             if not self._triangular_switch and self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(buy_fill_quantity))
 *             else:
 */
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __pyx_t_13 = ((!__pyx_t_12) != 0);
    if (__pyx_t_13) {
    } else {
      __pyx_t_11 = __pyx_t_13;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_arbitrage); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __pyx_t_11 = __pyx_t_13;
    __pyx_L23_bool_binop_done:;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1105
 *             #do this because it is not able to correctly calculate hedged order amount (mostly for sells)
 *             if not self._triangular_switch and self._triangular_arbitrage:
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(buy_fill_quantity))             # <<<<<<<<<<<<<<
 *             else:
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_v_buy_fill_quantity) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_buy_fill_quantity);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_quantized_hedge_amount = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1104
 * 
 *             #do this because it is not able to correctly calculate hedged order amount (mostly for sells)
 *             if not self._triangular_switch and self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(buy_fill_quantity))
 *             else:
 */
      goto __pyx_L22;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1107
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(buy_fill_quantity))
 *             else:
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))             # <<<<<<<<<<<<<<
 * 
 *             #fix amount so it reflexts the correct amount. ONly fix the different base assets, not different quote assets as amount to buy or sell then needs to be the same
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_v_hedged_order_quantity) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_hedged_order_quantity);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_quantized_hedge_amount = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __pyx_L22:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1111
 *             #fix amount so it reflexts the correct amount. ONly fix the different base assets, not different quote assets as amount to buy or sell then needs to be the same
 * 
 *             taker_top = taker_market.c_get_price(taker_trading_pair, False)             # <<<<<<<<<<<<<<
 *             avg_fill_price = (sum([r.price * r.amount for _, r in buy_fill_records]) /
 *                               sum([r.amount for _, r in buy_fill_records]))
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_taker_top = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1112
 * 
 *             taker_top = taker_market.c_get_price(taker_trading_pair, False)
 *             avg_fill_price = (sum([r.price * r.amount for _, r in buy_fill_records]) /             # <<<<<<<<<<<<<<
 *                               sum([r.amount for _, r in buy_fill_records]))
 * 
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L27_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__pyx_v_buy_fill_records == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 1112, __pyx_L27_error)
      }
      __pyx_t_7 = __pyx_v_buy_fill_records; __Pyx_INCREF(__pyx_t_7); __pyx_t_3 = 0;
      for (;;) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_9); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1112, __pyx_L27_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1112, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
        if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
          PyObject* sequence = __pyx_t_9;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1112, __pyx_L27_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          #else
          __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1112, __pyx_L27_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1112, __pyx_L27_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_4 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1112, __pyx_L27_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext;
          index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_6)) goto __pyx_L30_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_6);
          index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_5)) goto __pyx_L30_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1112, __pyx_L27_error)
          __pyx_t_8 = NULL;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L31_unpacking_done;
          __pyx_L30_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_8 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1112, __pyx_L27_error)
          __pyx_L31_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr16__pyx_v__, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_9genexpr16__pyx_v_r, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr16__pyx_v_r, __pyx_n_s_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1112, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr16__pyx_v_r, __pyx_n_s_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1112, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyNumber_Multiply(__pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1112, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1112, __pyx_L27_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_9genexpr16__pyx_v__); __pyx_9genexpr16__pyx_v__ = 0;
      __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_r); __pyx_9genexpr16__pyx_v_r = 0;
      goto __pyx_L32_exit_scope;
      __pyx_L27_error:;
      __Pyx_XDECREF(__pyx_9genexpr16__pyx_v__); __pyx_9genexpr16__pyx_v__ = 0;
      __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_r); __pyx_9genexpr16__pyx_v_r = 0;
      goto __pyx_L1_error;
      __pyx_L32_exit_scope:;
    } /* exit inner scope */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1113
 *             taker_top = taker_market.c_get_price(taker_trading_pair, False)
 *             avg_fill_price = (sum([r.price * r.amount for _, r in buy_fill_records]) /
 *                               sum([r.amount for _, r in buy_fill_records]))             # <<<<<<<<<<<<<<
 * 
 *             order_price = taker_market.c_get_price_for_volume(
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L35_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__pyx_v_buy_fill_records == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 1113, __pyx_L35_error)
      }
      __pyx_t_6 = __pyx_v_buy_fill_records; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
      for (;;) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1113, __pyx_L35_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1113, __pyx_L35_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
          PyObject* sequence = __pyx_t_5;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1113, __pyx_L35_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_4);
          #else
          __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1113, __pyx_L35_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1113, __pyx_L35_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1113, __pyx_L35_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
          index = 0; __pyx_t_9 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_9)) goto __pyx_L38_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_9);
          index = 1; __pyx_t_4 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L38_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1113, __pyx_L35_error)
          __pyx_t_8 = NULL;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L39_unpacking_done;
          __pyx_L38_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_8 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1113, __pyx_L35_error)
          __pyx_L39_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr17__pyx_v__, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_9genexpr17__pyx_v_r, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr17__pyx_v_r, __pyx_n_s_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1113, __pyx_L35_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1113, __pyx_L35_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_9genexpr17__pyx_v__); __pyx_9genexpr17__pyx_v__ = 0;
      __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_r); __pyx_9genexpr17__pyx_v_r = 0;
      goto __pyx_L40_exit_scope;
      __pyx_L35_error:;
      __Pyx_XDECREF(__pyx_9genexpr17__pyx_v__); __pyx_9genexpr17__pyx_v__ = 0;
      __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_r); __pyx_9genexpr17__pyx_v_r = 0;
      goto __pyx_L1_error;
      __pyx_L40_exit_scope:;
    } /* exit inner scope */
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1112
 * 
 *             taker_top = taker_market.c_get_price(taker_trading_pair, False)
 *             avg_fill_price = (sum([r.price * r.amount for _, r in buy_fill_records]) /             # <<<<<<<<<<<<<<
 *                               sum([r.amount for _, r in buy_fill_records]))
 * 
 */
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_avg_fill_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1115
 *                               sum([r.amount for _, r in buy_fill_records]))
 * 
 *             order_price = taker_market.c_get_price_for_volume(             # <<<<<<<<<<<<<<
 *                 taker_trading_pair, False, quantized_hedge_amount
 *             ).result_price
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 0, __pyx_v_quantized_hedge_amount)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1117
 *             order_price = taker_market.c_get_price_for_volume(
 *                 taker_trading_pair, False, quantized_hedge_amount
 *             ).result_price             # <<<<<<<<<<<<<<
 * 
 *             #adjust order price to the correct prices on the taker exchange. Price needs to be adjusted
 */
    __pyx_t_6 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_1)->result_price;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_order_price = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1120
 * 
 *             #adjust order price to the correct prices on the taker exchange. Price needs to be adjusted
 *             order_price = order_price             # <<<<<<<<<<<<<<
 * 
 *             order_price *= Decimal("1") - self._slippage_buffer
 */
    __Pyx_INCREF(__pyx_v_order_price);
    __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_v_order_price);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1122
 *             order_price = order_price
 * 
 *             order_price *= Decimal("1") - self._slippage_buffer             # <<<<<<<<<<<<<<
 *             order_price = taker_market.c_quantize_order_price(taker_trading_pair, order_price)
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price}hedge order quantity {hedged_order_quantity},  & order_size qunatized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_1);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_6, __pyx_v_self->_slippage_buffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_order_price, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1123
 * 
 *             order_price *= Decimal("1") - self._slippage_buffer
 *             order_price = taker_market.c_quantize_order_price(taker_trading_pair, order_price)             # <<<<<<<<<<<<<<
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price}hedge order quantity {hedged_order_quantity},  & order_size qunatized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")
 * 
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, __pyx_v_order_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1124
 *             order_price *= Decimal("1") - self._slippage_buffer
 *             order_price = taker_market.c_quantize_order_price(taker_trading_pair, order_price)
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price}hedge order quantity {hedged_order_quantity},  & order_size qunatized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")             # <<<<<<<<<<<<<<
 * 
 *             if quantized_hedge_amount > s_decimal_zero:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_logging); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = 0;
    __pyx_t_14 = 127;
    __Pyx_INCREF(__pyx_kp_u_Slippage_buffer_adjusted_order_p);
    __pyx_t_3 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_Slippage_buffer_adjusted_order_p);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Slippage_buffer_adjusted_order_p);
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_order_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u_hedge_order_quantity);
    __pyx_t_3 += 21;
    __Pyx_GIVEREF(__pyx_kp_u_hedge_order_quantity);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_hedge_order_quantity);
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_hedged_order_quantity, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u_order_size_qunatized_hedge_amou);
    __pyx_t_3 += 39;
    __Pyx_GIVEREF(__pyx_kp_u_order_size_qunatized_hedge_amou);
    PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_kp_u_order_size_qunatized_hedge_amou);
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_quantized_hedge_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_kp_u_quantized_amount_before_convert);
    __pyx_t_3 += 36;
    __Pyx_GIVEREF(__pyx_kp_u_quantized_amount_before_convert);
    PyTuple_SET_ITEM(__pyx_t_7, 6, __pyx_kp_u_quantized_amount_before_convert);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_2, __pyx_v_hedged_order_quantity) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_hedged_order_quantity);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 7, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_7, 8, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_15 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_4};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_4};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_15, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_15, __pyx_t_4);
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1126
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price}hedge order quantity {hedged_order_quantity},  & order_size qunatized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")
 * 
 *             if quantized_hedge_amount > s_decimal_zero:             # <<<<<<<<<<<<<<
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_quantized_hedge_amount, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1128
 *             if quantized_hedge_amount > s_decimal_zero:
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, Decimal(quantized_hedge_amount), Decimal(((self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)))
 *                 try:
 */
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __pyx_t_12 = ((!__pyx_t_13) != 0);
      if (__pyx_t_12) {
      } else {
        __pyx_t_11 = __pyx_t_12;
        goto __pyx_L43_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_arbitrage); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __pyx_t_11 = __pyx_t_12;
      __pyx_L43_bool_binop_done:;
      if (__pyx_t_11) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1129
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, Decimal(quantized_hedge_amount), Decimal(((self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)))             # <<<<<<<<<<<<<<
 *                 try:
 *                   order_price = (self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix))
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_4, __pyx_v_quantized_hedge_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_quantized_hedge_amount);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_v_quantized_hedge_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_10, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_1);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_t_7, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_v_quote_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_9 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_1, 0, __pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_v_order_id = ((PyObject*)__pyx_t_4);
        __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1130
 *               if not self._triangular_switch and self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, Decimal(quantized_hedge_amount), Decimal(((self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)))
 *                 try:             # <<<<<<<<<<<<<<
 *                   order_price = (self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix))
 *                 except ZeroDivisionError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          /*try:*/ {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1131
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, Decimal(quantized_hedge_amount), Decimal(((self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)))
 *                 try:
 *                   order_price = (self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix))             # <<<<<<<<<<<<<<
 *                 except ZeroDivisionError:
 *                     order_price = 0
 */
            __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_v_quantized_hedge_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L45_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1131, __pyx_L45_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_1, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u_1);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1131, __pyx_L45_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = PyNumber_Add(__pyx_t_9, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1131, __pyx_L45_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1131, __pyx_L45_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_t_9);
            __pyx_t_9 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1130
 *               if not self._triangular_switch and self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, Decimal(quantized_hedge_amount), Decimal(((self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)))
 *                 try:             # <<<<<<<<<<<<<<
 *                   order_price = (self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix))
 *                 except ZeroDivisionError:
 */
          }
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
          goto __pyx_L50_try_end;
          __pyx_L45_error:;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1132
 *                 try:
 *                   order_price = (self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix))
 *                 except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                     order_price = 0
 *                 self.notify_hb_app_with_timestamp(
 */
          __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
          if (__pyx_t_15) {
            __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_and_hedge_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 1132, __pyx_L47_except_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_4);

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1133
 *                   order_price = (self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix))
 *                 except ZeroDivisionError:
 *                     order_price = 0             # <<<<<<<<<<<<<<
 *                 self.notify_hb_app_with_timestamp(
 *                     f"M. Buy  Min P.{round(((((order_price * self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, Max P. {round(((((taker_top * self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, OP {PerformanceMetrics.smart_round(order_price * self._third_market.get_mid_price())} AF {PerformanceMetrics.smart_round(avg_fill_price)}"
 */
            __Pyx_INCREF(__pyx_int_0);
            __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_int_0);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L46_exception_handled;
          }
          goto __pyx_L47_except_error;
          __pyx_L47_except_error:;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1130
 *               if not self._triangular_switch and self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, Decimal(quantized_hedge_amount), Decimal(((self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)))
 *                 try:             # <<<<<<<<<<<<<<
 *                   order_price = (self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix))
 *                 except ZeroDivisionError:
 */
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          goto __pyx_L1_error;
          __pyx_L46_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          __pyx_L50_try_end:;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1134
 *                 except ZeroDivisionError:
 *                     order_price = 0
 *                 self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                     f"M. Buy  Min P.{round(((((order_price * self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, Max P. {round(((((taker_top * self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, OP {PerformanceMetrics.smart_round(order_price * self._third_market.get_mid_price())} AF {PerformanceMetrics.smart_round(avg_fill_price)}"
 *                 )
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1135
 *                     order_price = 0
 *                 self.notify_hb_app_with_timestamp(
 *                     f"M. Buy  Min P.{round(((((order_price * self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, Max P. {round(((((taker_top * self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, OP {PerformanceMetrics.smart_round(order_price * self._third_market.get_mid_price())} AF {PerformanceMetrics.smart_round(avg_fill_price)}"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
        __pyx_t_9 = PyTuple_New(8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = 0;
        __pyx_t_14 = 127;
        __Pyx_INCREF(__pyx_kp_u_M_Buy_Min_P);
        __pyx_t_3 += 14;
        __Pyx_GIVEREF(__pyx_kp_u_M_Buy_Min_P);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_M_Buy_Min_P);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Multiply(__pyx_v_order_price, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_int_100); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_Max_P);
        __pyx_t_3 += 9;
        __Pyx_GIVEREF(__pyx_kp_u_Max_P);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_Max_P);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Multiply(__pyx_v_taker_top, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_int_100); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_3);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_OP);
        __pyx_t_3 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_OP);
        PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_kp_u_OP);
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_2 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_v_order_price, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_AF);
        __pyx_t_3 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_AF);
        PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_kp_u_AF);
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_avg_fill_price) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_avg_fill_price);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 7, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_9, 8, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1128
 *             if quantized_hedge_amount > s_decimal_zero:
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, Decimal(quantized_hedge_amount), Decimal(((self.c_calculate_effective_hedging_price(market_pair, True, quantized_hedge_amount) / (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)))
 *                 try:
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1138
 *                 )
 * 
 *               if not self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, quantized_hedge_amount, order_price)
 *                 self.notify_hb_app_with_timestamp(
 */
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_arbitrage); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __pyx_t_12 = ((!__pyx_t_11) != 0);
      if (__pyx_t_12) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1139
 * 
 *               if not self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, quantized_hedge_amount, order_price)             # <<<<<<<<<<<<<<
 *                 self.notify_hb_app_with_timestamp(
 *                 f"M. Buy Min P. {round(((((order_price / base_rate / self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, Max. P. {round(((((taker_top / base_rate / self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)} OP: {PerformanceMetrics.smart_round((order_price / base_rate / self._third_market.get_mid_price()))} AF: {PerformanceMetrics.smart_round(avg_fill_price)} TT: {PerformanceMetrics.smart_round((taker_top / base_rate / self._third_market.get_mid_price()))}"
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1139, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_4, 0, __pyx_v_quantized_hedge_amount, __pyx_v_order_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1139, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1140
 *               if not self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, quantized_hedge_amount, order_price)
 *                 self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                 f"M. Buy Min P. {round(((((order_price / base_rate / self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, Max. P. {round(((((taker_top / base_rate / self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)} OP: {PerformanceMetrics.smart_round((order_price / base_rate / self._third_market.get_mid_price()))} AF: {PerformanceMetrics.smart_round(avg_fill_price)} TT: {PerformanceMetrics.smart_round((taker_top / base_rate / self._third_market.get_mid_price()))}"
 *                 )
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1140, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1141
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, quantized_hedge_amount, order_price)
 *                 self.notify_hb_app_with_timestamp(
 *                 f"M. Buy Min P. {round(((((order_price / base_rate / self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)}, Max. P. {round(((((taker_top / base_rate / self._third_market.get_mid_price()) - avg_fill_price) / avg_fill_price) * 100),3)} OP: {PerformanceMetrics.smart_round((order_price / base_rate / self._third_market.get_mid_price()))} AF: {PerformanceMetrics.smart_round(avg_fill_price)} TT: {PerformanceMetrics.smart_round((taker_top / base_rate / self._third_market.get_mid_price()))}"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
        __pyx_t_5 = PyTuple_New(10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = 0;
        __pyx_t_14 = 127;
        __Pyx_INCREF(__pyx_kp_u_M_Buy_Min_P_2);
        __pyx_t_3 += 14;
        __Pyx_GIVEREF(__pyx_kp_u_M_Buy_Min_P_2);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_M_Buy_Min_P_2);
        __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_v_order_price, __pyx_v_base_rate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Subtract(__pyx_t_1, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Multiply(__pyx_t_1, __pyx_int_100); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_3);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_Max_P_2);
        __pyx_t_3 += 10;
        __Pyx_GIVEREF(__pyx_kp_u_Max_P_2);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_Max_P_2);
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_taker_top, __pyx_v_base_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Subtract(__pyx_t_9, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Multiply(__pyx_t_9, __pyx_int_100); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_int_3);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_9, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_OP_2);
        __pyx_t_3 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_OP_2);
        PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u_OP_2);
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_v_order_price, __pyx_v_base_rate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_19 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_19)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_19);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_2 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_9 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_10);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_AF_2);
        __pyx_t_3 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_AF_2);
        PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_kp_u_AF_2);
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_9, __pyx_v_avg_fill_price) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_avg_fill_price);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_INCREF(__pyx_kp_u_TT);
        __pyx_t_3 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_TT);
        PyTuple_SET_ITEM(__pyx_t_5, 8, __pyx_kp_u_TT);
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_taker_top, __pyx_v_base_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_19 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_19)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_19);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_2 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_10 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_2, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_5, 9, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_5, 10, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1140, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1138
 *                 )
 * 
 *               if not self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *                 order_id = self.c_place_order(market_pair, False, market_pair.taker, False, quantized_hedge_amount, order_price)
 *                 self.notify_hb_app_with_timestamp(
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1145
 * 
 *                 #add the third leg of a triangular arbitrage order in this case you need to buy back the asset
 *               if (market_pair.maker.quote_asset != market_pair.taker.quote_asset) and self._triangular_arbitrage: #add another argument which looks at if the parameter for the thirs leg is active             # <<<<<<<<<<<<<<
 *                      # this is the amount in maker base base_currency
 *                      self.log_with_clock(
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_9, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_11) {
      } else {
        __pyx_t_12 = __pyx_t_11;
        goto __pyx_L55_bool_binop_done;
      }
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_arbitrage); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1145, __pyx_L1_error)
      __pyx_t_12 = __pyx_t_11;
      __pyx_L55_bool_binop_done:;
      if (__pyx_t_12) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1147
 *               if (market_pair.maker.quote_asset != market_pair.taker.quote_asset) and self._triangular_arbitrage: #add another argument which looks at if the parameter for the thirs leg is active
 *                      # this is the amount in maker base base_currency
 *                      self.log_with_clock(             # <<<<<<<<<<<<<<
 *                          logging.INFO,
 *                          f"We will place a third leg"
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1147, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1148
 *                      # this is the amount in maker base base_currency
 *                      self.log_with_clock(
 *                          logging.INFO,             # <<<<<<<<<<<<<<
 *                          f"We will place a third leg"
 *                      )
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1148, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1148, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_15 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_15 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_kp_u_We_will_place_a_third_leg};
          __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1147, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_kp_u_We_will_place_a_third_leg};
          __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1147, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1147, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_15, __pyx_t_5);
          __Pyx_INCREF(__pyx_kp_u_We_will_place_a_third_leg);
          __Pyx_GIVEREF(__pyx_kp_u_We_will_place_a_third_leg);
          PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_15, __pyx_kp_u_We_will_place_a_third_leg);
          __pyx_t_5 = 0;
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1147, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1151
 *                          f"We will place a third leg"
 *                      )
 *                      if self._triangular_switch:             # <<<<<<<<<<<<<<
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))
 * 
 */
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1151, __pyx_L1_error)
        if (__pyx_t_12) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1152
 *                      )
 *                      if self._triangular_switch:
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))             # <<<<<<<<<<<<<<
 * 
 *                      if not self._triangular_switch:
 */
          __pyx_t_6 = __pyx_v_self->_third_market;
          __Pyx_INCREF(__pyx_t_6);
          __pyx_t_9 = PyNumber_Multiply(__pyx_v_avg_fill_price, __pyx_v_hedged_order_quantity); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_slippage_buffer_fix, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyNumber_Multiply(__pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_6, 0, __pyx_t_9, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1152, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_5));
          __pyx_t_5 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1151
 *                          f"We will place a third leg"
 *                      )
 *                      if self._triangular_switch:             # <<<<<<<<<<<<<<
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))
 * 
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1154
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))
 * 
 *                      if not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                        order_id = self.c_place_order(market_pair, False, self._third_market, False, ((avg_fill_price * quantized_hedge_amount) / quote_rate), (self._third_market.get_mid_price() / (1 + self._slippage_buffer_fix)))
 * 
 */
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1154, __pyx_L1_error)
        __pyx_t_11 = ((!__pyx_t_12) != 0);
        if (__pyx_t_11) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1155
 * 
 *                      if not self._triangular_switch:
 *                        order_id = self.c_place_order(market_pair, False, self._third_market, False, ((avg_fill_price * quantized_hedge_amount) / quote_rate), (self._third_market.get_mid_price() / (1 + self._slippage_buffer_fix)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_5 = __pyx_v_self->_third_market;
          __Pyx_INCREF(__pyx_t_5);
          __pyx_t_4 = PyNumber_Multiply(__pyx_v_avg_fill_price, __pyx_v_quantized_hedge_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_quote_rate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_slippage_buffer_fix, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_5, 0, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_6));
          __pyx_t_6 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1154
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))
 * 
 *                      if not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                        order_id = self.c_place_order(market_pair, False, self._third_market, False, ((avg_fill_price * quantized_hedge_amount) / quote_rate), (self._third_market.get_mid_price() / (1 + self._slippage_buffer_fix)))
 * 
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1145
 * 
 *                 #add the third leg of a triangular arbitrage order in this case you need to buy back the asset
 *               if (market_pair.maker.quote_asset != market_pair.taker.quote_asset) and self._triangular_arbitrage: #add another argument which looks at if the parameter for the thirs leg is active             # <<<<<<<<<<<<<<
 *                      # this is the amount in maker base base_currency
 *                      self.log_with_clock(
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1158
 * 
 * 
 *               del self._order_fill_buy_events[market_pair]             # <<<<<<<<<<<<<<
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:
 *                     self.log_with_clock(
 */
      if (unlikely(__pyx_v_self->_order_fill_buy_events == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1158, __pyx_L1_error)
      }
      if (unlikely(PyDict_DelItem(__pyx_v_self->_order_fill_buy_events, __pyx_v_market_pair) < 0)) __PYX_ERR(0, 1158, __pyx_L1_error)

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1159
 * 
 *               del self._order_fill_buy_events[market_pair]
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_MAKER_ORDER_HEDGED); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyNumber_And(__pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_11) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1160
 *               del self._order_fill_buy_events[market_pair]
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Hedged maker buy order(s) of "
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1161
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"({market_pair.maker.trading_pair}) Hedged maker buy order(s) of "
 *                         f"{buy_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1162
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Hedged maker buy order(s) of "             # <<<<<<<<<<<<<<
 *                         f"{buy_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "
 *                         f"(maker avg price={avg_fill_price}, taker top={taker_top})"
 */
        __pyx_t_6 = PyTuple_New(11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = 0;
        __pyx_t_14 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_3 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u__24);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_Hedged_maker_buy_order_s_of);
        __pyx_t_3 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_Hedged_maker_buy_order_s_of);
        PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_Hedged_maker_buy_order_s_of);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1163
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Hedged maker buy order(s) of "
 *                         f"{buy_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "             # <<<<<<<<<<<<<<
 *                         f"(maker avg price={avg_fill_price}, taker top={taker_top})"
 *                     )
 */
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_buy_fill_quantity, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_3 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u__23);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_on_taker_market_to_lock_in_prof);
        __pyx_t_3 += 54;
        __Pyx_GIVEREF(__pyx_kp_u_on_taker_market_to_lock_in_prof);
        PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_kp_u_on_taker_market_to_lock_in_prof);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1164
 *                         f"({market_pair.maker.trading_pair}) Hedged maker buy order(s) of "
 *                         f"{buy_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "
 *                         f"(maker avg price={avg_fill_price}, taker top={taker_top})"             # <<<<<<<<<<<<<<
 *                     )
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_avg_fill_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_taker_top);
        __pyx_t_3 += 12;
        __Pyx_GIVEREF(__pyx_kp_u_taker_top);
        PyTuple_SET_ITEM(__pyx_t_6, 8, __pyx_kp_u_taker_top);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_top, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 9, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u__26);
        __pyx_t_3 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__26);
        PyTuple_SET_ITEM(__pyx_t_6, 10, __pyx_kp_u__26);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1162
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Hedged maker buy order(s) of "             # <<<<<<<<<<<<<<
 *                         f"{buy_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "
 *                         f"(maker avg price={avg_fill_price}, taker top={taker_top})"
 */
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_6, 11, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        __pyx_t_15 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_15 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_10)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_4};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_t_4};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_15, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_15, __pyx_t_4);
          __pyx_t_5 = 0;
          __pyx_t_4 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1159
 * 
 *               del self._order_fill_buy_events[market_pair]
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1126
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price}hedge order quantity {hedged_order_quantity},  & order_size qunatized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")
 * 
 *             if quantized_hedge_amount > s_decimal_zero:             # <<<<<<<<<<<<<<
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:
 */
      goto __pyx_L41;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1169
 * 
 *             else:
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Current maker buy fill amount of "
 */
    /*else*/ {
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1170
 *             else:
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.maker.trading_pair}) Current maker buy fill amount of "
 *                     f"{buy_fill_quantity} {market_pair.maker.base_asset} is less than the minimum order amount "
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_logging); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_INFO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1171
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Current maker buy fill amount of "             # <<<<<<<<<<<<<<
 *                     f"{buy_fill_quantity} {market_pair.maker.base_asset} is less than the minimum order amount "
 *                     f"allowed on the taker market. No hedging possible yet."
 */
      __pyx_t_7 = PyTuple_New(7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_3 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u__24);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
      __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_Current_maker_buy_fill_amount_o);
      __pyx_t_3 += 35;
      __Pyx_GIVEREF(__pyx_kp_u_Current_maker_buy_fill_amount_o);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_Current_maker_buy_fill_amount_o);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1172
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Current maker buy fill amount of "
 *                     f"{buy_fill_quantity} {market_pair.maker.base_asset} is less than the minimum order amount "             # <<<<<<<<<<<<<<
 *                     f"allowed on the taker market. No hedging possible yet."
 *                 )
 */
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_buy_fill_quantity, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
      __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_3 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_kp_u__23);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
      __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_less_than_the_minimum_order);
      __pyx_t_3 += 92;
      __Pyx_GIVEREF(__pyx_kp_u_is_less_than_the_minimum_order);
      PyTuple_SET_ITEM(__pyx_t_7, 6, __pyx_kp_u_is_less_than_the_minimum_order);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1171
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Current maker buy fill amount of "             # <<<<<<<<<<<<<<
 *                     f"{buy_fill_quantity} {market_pair.maker.base_asset} is less than the minimum order amount "
 *                     f"allowed on the taker market. No hedging possible yet."
 */
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_7, 7, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_15 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_15 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_t_5};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_t_5};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_15, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_15, __pyx_t_5);
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_6, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_L41:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1098
 *         global s_decimal_zero
 * 
 *         if buy_fill_quantity > 0:             # <<<<<<<<<<<<<<
 *             hedged_order_quantity = min(
 *                 (buy_fill_quantity / base_rate),
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1176
 *                 )
 * 
 *         if sell_fill_quantity > 0:             # <<<<<<<<<<<<<<
 *             hedged_order_quantity = min(
 *                 (sell_fill_quantity / base_rate), #only convert base rate
 */
  __pyx_t_9 = PyObject_RichCompare(__pyx_v_sell_fill_quantity, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_11) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1179
 *             hedged_order_quantity = min(
 *                 (sell_fill_quantity / base_rate), #only convert base rate
 *                 ((taker_market.c_get_available_balance(market_pair.taker.quote_asset) * self._order_size_taker_balance_factor) / ((self.c_calculate_effective_hedging_price(market_pair, False, Decimal(sell_fill_quantity)) * (Decimal("1") + self._slippage_buffer)) * quote_rate)))             # <<<<<<<<<<<<<<
 *                 #it might be that is should be devided by quote rate, not multiplied by it
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 1179, __pyx_L1_error)
    __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_10)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyNumber_Multiply(__pyx_t_9, __pyx_v_self->_order_size_taker_balance_factor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_9 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_sell_fill_quantity) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_sell_fill_quantity);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_9 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_9, __pyx_v_self->_slippage_buffer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_9, __pyx_v_quote_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1178
 *         if sell_fill_quantity > 0:
 *             hedged_order_quantity = min(
 *                 (sell_fill_quantity / base_rate), #only convert base rate             # <<<<<<<<<<<<<<
 *                 ((taker_market.c_get_available_balance(market_pair.taker.quote_asset) * self._order_size_taker_balance_factor) / ((self.c_calculate_effective_hedging_price(market_pair, False, Decimal(sell_fill_quantity)) * (Decimal("1") + self._slippage_buffer)) * quote_rate)))
 *                 #it might be that is should be devided by quote rate, not multiplied by it
 */
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_sell_fill_quantity, __pyx_v_base_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1179
 *             hedged_order_quantity = min(
 *                 (sell_fill_quantity / base_rate), #only convert base rate
 *                 ((taker_market.c_get_available_balance(market_pair.taker.quote_asset) * self._order_size_taker_balance_factor) / ((self.c_calculate_effective_hedging_price(market_pair, False, Decimal(sell_fill_quantity)) * (Decimal("1") + self._slippage_buffer)) * quote_rate)))             # <<<<<<<<<<<<<<
 *                 #it might be that is should be devided by quote rate, not multiplied by it
 * 
 */
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_9, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_11) {
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_10 = __pyx_t_9;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_10 = __pyx_t_5;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __pyx_t_10;
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_hedged_order_quantity, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1183
 * 
 * 
 *             if not self._triangular_switch and self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(sell_fill_quantity))
 *             else:
 */
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __pyx_t_13 = ((!__pyx_t_12) != 0);
    if (__pyx_t_13) {
    } else {
      __pyx_t_11 = __pyx_t_13;
      goto __pyx_L62_bool_binop_done;
    }
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_arbitrage); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1183, __pyx_L1_error)
    __pyx_t_11 = __pyx_t_13;
    __pyx_L62_bool_binop_done:;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1184
 * 
 *             if not self._triangular_switch and self._triangular_arbitrage:
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(sell_fill_quantity))             # <<<<<<<<<<<<<<
 *             else:
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_9 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_5, __pyx_v_sell_fill_quantity) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_sell_fill_quantity);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_quantized_hedge_amount, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1183
 * 
 * 
 *             if not self._triangular_switch and self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(sell_fill_quantity))
 *             else:
 */
      goto __pyx_L61;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1186
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(sell_fill_quantity))
 *             else:
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))             # <<<<<<<<<<<<<<
 * 
 *             taker_top = taker_market.c_get_price(taker_trading_pair, True)
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_10 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_hedged_order_quantity) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_hedged_order_quantity);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_quantized_hedge_amount, __pyx_t_9);
      __pyx_t_9 = 0;
    }
    __pyx_L61:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1188
 *               quantized_hedge_amount = taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))
 * 
 *             taker_top = taker_market.c_get_price(taker_trading_pair, True)             # <<<<<<<<<<<<<<
 *             avg_fill_price = (sum([r.price * r.amount for _, r in sell_fill_records]) /
 *                               sum([r.amount for _, r in sell_fill_records]))
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_taker_top, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1189
 * 
 *             taker_top = taker_market.c_get_price(taker_trading_pair, True)
 *             avg_fill_price = (sum([r.price * r.amount for _, r in sell_fill_records]) /             # <<<<<<<<<<<<<<
 *                               sum([r.amount for _, r in sell_fill_records]))
 *             #changed to reflect conversions
 */
    { /* enter inner scope */
      __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1189, __pyx_L66_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__pyx_v_sell_fill_records == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 1189, __pyx_L66_error)
      }
      __pyx_t_10 = __pyx_v_sell_fill_records; __Pyx_INCREF(__pyx_t_10); __pyx_t_3 = 0;
      for (;;) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1189, __pyx_L66_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_10, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1189, __pyx_L66_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
        if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
          PyObject* sequence = __pyx_t_5;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1189, __pyx_L66_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          #else
          __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1189, __pyx_L66_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1189, __pyx_L66_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_7 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1189, __pyx_L66_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
          index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L69_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_6);
          index = 1; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L69_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 1189, __pyx_L66_error)
          __pyx_t_8 = NULL;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L70_unpacking_done;
          __pyx_L69_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_8 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1189, __pyx_L66_error)
          __pyx_L70_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr18__pyx_v__, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_9genexpr18__pyx_v_r, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr18__pyx_v_r, __pyx_n_s_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1189, __pyx_L66_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr18__pyx_v_r, __pyx_n_s_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1189, __pyx_L66_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1189, __pyx_L66_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1189, __pyx_L66_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_9genexpr18__pyx_v__); __pyx_9genexpr18__pyx_v__ = 0;
      __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_r); __pyx_9genexpr18__pyx_v_r = 0;
      goto __pyx_L71_exit_scope;
      __pyx_L66_error:;
      __Pyx_XDECREF(__pyx_9genexpr18__pyx_v__); __pyx_9genexpr18__pyx_v__ = 0;
      __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_r); __pyx_9genexpr18__pyx_v_r = 0;
      goto __pyx_L1_error;
      __pyx_L71_exit_scope:;
    } /* exit inner scope */
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1190
 *             taker_top = taker_market.c_get_price(taker_trading_pair, True)
 *             avg_fill_price = (sum([r.price * r.amount for _, r in sell_fill_records]) /
 *                               sum([r.amount for _, r in sell_fill_records]))             # <<<<<<<<<<<<<<
 *             #changed to reflect conversions
 *             order_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, quantized_hedge_amount).result_price
 */
    { /* enter inner scope */
      __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1190, __pyx_L74_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__pyx_v_sell_fill_records == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 1190, __pyx_L74_error)
      }
      __pyx_t_6 = __pyx_v_sell_fill_records; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
      for (;;) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1190, __pyx_L74_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L74_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1190, __pyx_L74_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          #else
          __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1190, __pyx_L74_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1190, __pyx_L74_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1190, __pyx_L74_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
          index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L77_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          index = 1; __pyx_t_7 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L77_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1190, __pyx_L74_error)
          __pyx_t_8 = NULL;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L78_unpacking_done;
          __pyx_L77_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_8 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1190, __pyx_L74_error)
          __pyx_L78_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr19__pyx_v__, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_9genexpr19__pyx_v_r, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr19__pyx_v_r, __pyx_n_s_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L74_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1190, __pyx_L74_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_9genexpr19__pyx_v__); __pyx_9genexpr19__pyx_v__ = 0;
      __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_r); __pyx_9genexpr19__pyx_v_r = 0;
      goto __pyx_L79_exit_scope;
      __pyx_L74_error:;
      __Pyx_XDECREF(__pyx_9genexpr19__pyx_v__); __pyx_9genexpr19__pyx_v__ = 0;
      __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_r); __pyx_9genexpr19__pyx_v_r = 0;
      goto __pyx_L1_error;
      __pyx_L79_exit_scope:;
    } /* exit inner scope */
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1189
 * 
 *             taker_top = taker_market.c_get_price(taker_trading_pair, True)
 *             avg_fill_price = (sum([r.price * r.amount for _, r in sell_fill_records]) /             # <<<<<<<<<<<<<<
 *                               sum([r.amount for _, r in sell_fill_records]))
 *             #changed to reflect conversions
 */
    __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_avg_fill_price, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1192
 *                               sum([r.amount for _, r in sell_fill_records]))
 *             #changed to reflect conversions
 *             order_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, quantized_hedge_amount).result_price             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_v_quantized_hedge_amount); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1192, __pyx_L1_error)
    __pyx_t_9 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_quote_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 1, __pyx_t_20)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_9)->result_price;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_order_price, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1195
 * 
 * 
 *             order_price *= Decimal("1") + self._slippage_buffer             # <<<<<<<<<<<<<<
 *             order_price = taker_market.quantize_order_price(taker_trading_pair, order_price)
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price} hedge order quantity {quantized_hedge_amount},  & order_size quantized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_kp_u_1);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Add(__pyx_t_6, __pyx_v_self->_slippage_buffer); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_order_price, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1196
 * 
 *             order_price *= Decimal("1") + self._slippage_buffer
 *             order_price = taker_market.quantize_order_price(taker_trading_pair, order_price)             # <<<<<<<<<<<<<<
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price} hedge order quantity {quantized_hedge_amount},  & order_size quantized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_taker_market), __pyx_n_s_quantize_order_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_15 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_taker_trading_pair, __pyx_v_order_price};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1196, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_taker_trading_pair, __pyx_v_order_price};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1196, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_INCREF(__pyx_v_taker_trading_pair);
      __Pyx_GIVEREF(__pyx_v_taker_trading_pair);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_15, __pyx_v_taker_trading_pair);
      __Pyx_INCREF(__pyx_v_order_price);
      __Pyx_GIVEREF(__pyx_v_order_price);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_15, __pyx_v_order_price);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1197
 *             order_price *= Decimal("1") + self._slippage_buffer
 *             order_price = taker_market.quantize_order_price(taker_trading_pair, order_price)
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price} hedge order quantity {quantized_hedge_amount},  & order_size quantized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")             # <<<<<<<<<<<<<<
 * 
 *             if quantized_hedge_amount > s_decimal_zero:
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_14 = 127;
    __Pyx_INCREF(__pyx_kp_u_Slippage_buffer_adjusted_order_p);
    __pyx_t_3 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_Slippage_buffer_adjusted_order_p);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Slippage_buffer_adjusted_order_p);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_order_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_hedge_order_quantity_2);
    __pyx_t_3 += 22;
    __Pyx_GIVEREF(__pyx_kp_u_hedge_order_quantity_2);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_hedge_order_quantity_2);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_quantized_hedge_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_order_size_quantized_hedge_amou);
    __pyx_t_3 += 39;
    __Pyx_GIVEREF(__pyx_kp_u_order_size_quantized_hedge_amou);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_order_size_quantized_hedge_amou);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_quantized_hedge_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_quantized_amount_before_convert);
    __pyx_t_3 += 36;
    __Pyx_GIVEREF(__pyx_kp_u_quantized_amount_before_convert);
    PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_quantized_amount_before_convert);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_v_hedged_order_quantity) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_hedged_order_quantity);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 8, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_15 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_10, __pyx_t_7};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_10, __pyx_t_7};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_15, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_15, __pyx_t_7);
      __pyx_t_10 = 0;
      __pyx_t_7 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1199
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price} hedge order quantity {quantized_hedge_amount},  & order_size quantized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")
 * 
 *             if quantized_hedge_amount > s_decimal_zero:             # <<<<<<<<<<<<<<
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = PyObject_RichCompare(__pyx_v_quantized_hedge_amount, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1201
 *             if quantized_hedge_amount > s_decimal_zero:
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, Decimal(quantized_hedge_amount), ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate))
 *                 try:
 */
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 1201, __pyx_L1_error)
      __pyx_t_12 = ((!__pyx_t_13) != 0);
      if (__pyx_t_12) {
      } else {
        __pyx_t_11 = __pyx_t_12;
        goto __pyx_L82_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_arbitrage); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1201, __pyx_L1_error)
      __pyx_t_11 = __pyx_t_12;
      __pyx_L82_bool_binop_done:;
      if (__pyx_t_11) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1202
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, Decimal(quantized_hedge_amount), ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate))             # <<<<<<<<<<<<<<
 *                 try:
 *                   order_price = ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_v_quantized_hedge_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_quantized_hedge_amount);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_v_quantized_hedge_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_4, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_u_1);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyNumber_Add(__pyx_t_7, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_v_quote_rate); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_9, 0, __pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_7));
        __pyx_t_7 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1203
 *               if not self._triangular_switch and self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, Decimal(quantized_hedge_amount), ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate))
 *                 try:             # <<<<<<<<<<<<<<
 *                   order_price = ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)
 *                 except ZeroDivisionError:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_16);
          /*try:*/ {

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1204
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, Decimal(quantized_hedge_amount), ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate))
 *                 try:
 *                   order_price = ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)             # <<<<<<<<<<<<<<
 *                 except ZeroDivisionError:
 *                     order_price = 0
 */
            __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_v_quantized_hedge_amount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1204, __pyx_L84_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1204, __pyx_L84_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            __pyx_t_10 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_9, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u_1);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1204, __pyx_L84_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = PyNumber_Add(__pyx_t_10, __pyx_v_self->_slippage_buffer_fix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1204, __pyx_L84_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = PyNumber_Multiply(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1204, __pyx_L84_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_v_quote_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1204, __pyx_L84_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_t_6);
            __pyx_t_6 = 0;

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1203
 *               if not self._triangular_switch and self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, Decimal(quantized_hedge_amount), ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate))
 *                 try:             # <<<<<<<<<<<<<<
 *                   order_price = ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)
 *                 except ZeroDivisionError:
 */
          }
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          goto __pyx_L89_try_end;
          __pyx_L84_error:;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1205
 *                 try:
 *                   order_price = ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)
 *                 except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                     order_price = 0
 * 
 */
          __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
          if (__pyx_t_15) {
            __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_and_hedge_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_10, &__pyx_t_7) < 0) __PYX_ERR(0, 1205, __pyx_L86_except_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_GOTREF(__pyx_t_7);

            /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1206
 *                   order_price = ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)
 *                 except ZeroDivisionError:
 *                     order_price = 0             # <<<<<<<<<<<<<<
 * 
 *                 self.notify_hb_app_with_timestamp(
 */
            __Pyx_INCREF(__pyx_int_0);
            __Pyx_DECREF_SET(__pyx_v_order_price, __pyx_int_0);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            goto __pyx_L85_exception_handled;
          }
          goto __pyx_L86_except_error;
          __pyx_L86_except_error:;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1203
 *               if not self._triangular_switch and self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, Decimal(quantized_hedge_amount), ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate))
 *                 try:             # <<<<<<<<<<<<<<
 *                   order_price = ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate)
 *                 except ZeroDivisionError:
 */
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_17, __pyx_t_16);
          goto __pyx_L1_error;
          __pyx_L85_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_17, __pyx_t_16);
          __pyx_L89_try_end:;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1208
 *                     order_price = 0
 * 
 *                 self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                     f"M. Sell Min P.{round((((avg_fill_price - (order_price * self._third_market.get_mid_price())) / (order_price * self._third_market.get_mid_price())) * 100),3)}, Max P. {round((((avg_fill_price - (taker_top * self._third_market.get_mid_price())) / (order_price * self._third_market.get_mid_price())) * 100),3)}, OP {PerformanceMetrics.smart_round(order_price * self._third_market.get_mid_price())} AF {PerformanceMetrics.smart_round(avg_fill_price)} TT {PerformanceMetrics.smart_round(taker_top)}"
 *                 )
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1209
 * 
 *                 self.notify_hb_app_with_timestamp(
 *                     f"M. Sell Min P.{round((((avg_fill_price - (order_price * self._third_market.get_mid_price())) / (order_price * self._third_market.get_mid_price())) * 100),3)}, Max P. {round((((avg_fill_price - (taker_top * self._third_market.get_mid_price())) / (order_price * self._third_market.get_mid_price())) * 100),3)}, OP {PerformanceMetrics.smart_round(order_price * self._third_market.get_mid_price())} AF {PerformanceMetrics.smart_round(avg_fill_price)} TT {PerformanceMetrics.smart_round(taker_top)}"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
        __pyx_t_6 = PyTuple_New(10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = 0;
        __pyx_t_14 = 127;
        __Pyx_INCREF(__pyx_kp_u_M_Sell_Min_P);
        __pyx_t_3 += 14;
        __Pyx_GIVEREF(__pyx_kp_u_M_Sell_Min_P);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_M_Sell_Min_P);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_9 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_v_order_price, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Subtract(__pyx_v_avg_fill_price, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Multiply(__pyx_v_order_price, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_int_100); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_INCREF(__pyx_kp_u_Max_P);
        __pyx_t_3 += 9;
        __Pyx_GIVEREF(__pyx_kp_u_Max_P);
        PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_Max_P);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Multiply(__pyx_v_taker_top, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Subtract(__pyx_v_avg_fill_price, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Multiply(__pyx_v_order_price, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Multiply(__pyx_t_4, __pyx_int_100); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_OP);
        __pyx_t_3 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_OP);
        PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u_OP);
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Multiply(__pyx_v_order_price, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_INCREF(__pyx_kp_u_AF);
        __pyx_t_3 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_AF);
        PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_kp_u_AF);
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v_avg_fill_price) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_avg_fill_price);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_TT_2);
        __pyx_t_3 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_TT_2);
        PyTuple_SET_ITEM(__pyx_t_6, 8, __pyx_kp_u_TT_2);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_taker_top) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_taker_top);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 9, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_6, 10, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_4);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1201
 *             if quantized_hedge_amount > s_decimal_zero:
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, Decimal(quantized_hedge_amount), ((self.c_calculate_effective_hedging_price(market_pair, False, quantized_hedge_amount) * (Decimal("1") + self._slippage_buffer_fix)) / quote_rate))
 *                 try:
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1212
 *                 )
 * 
 *               if not self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, quantized_hedge_amount, order_price)
 *                 taker_top_ask = taker_market.c_get_price(taker_trading_pair, True)
 */
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_arbitrage); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1212, __pyx_L1_error)
      __pyx_t_12 = ((!__pyx_t_11) != 0);
      if (__pyx_t_12) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1213
 * 
 *               if not self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, quantized_hedge_amount, order_price)             # <<<<<<<<<<<<<<
 *                 taker_top_ask = taker_market.c_get_price(taker_trading_pair, True)
 *                 self.notify_hb_app_with_timestamp(
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_7, 0, __pyx_v_quantized_hedge_amount, __pyx_v_order_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1214
 *               if not self._triangular_arbitrage:
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, quantized_hedge_amount, order_price)
 *                 taker_top_ask = taker_market.c_get_price(taker_trading_pair, True)             # <<<<<<<<<<<<<<
 *                 self.notify_hb_app_with_timestamp(
 *                     f"M. Sell Min P. {round((((avg_fill_price - (order_price / base_rate * quote_rate)) / (order_price / base_rate * quote_rate)) * 100),3)} Max P. {round((((avg_fill_price - (taker_top_ask / base_rate * quote_rate)) / avg_fill_price) * 100),3)} OP: {PerformanceMetrics.smart_round((order_price / base_rate * quote_rate))} AF: {PerformanceMetrics.smart_round(avg_fill_price)} TT: {PerformanceMetrics.smart_round((taker_top / base_rate * quote_rate))}"
 */
        __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), __pyx_v_taker_trading_pair, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1214, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_v_taker_top_ask = __pyx_t_10;
        __pyx_t_10 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1215
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, quantized_hedge_amount, order_price)
 *                 taker_top_ask = taker_market.c_get_price(taker_trading_pair, True)
 *                 self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                     f"M. Sell Min P. {round((((avg_fill_price - (order_price / base_rate * quote_rate)) / (order_price / base_rate * quote_rate)) * 100),3)} Max P. {round((((avg_fill_price - (taker_top_ask / base_rate * quote_rate)) / avg_fill_price) * 100),3)} OP: {PerformanceMetrics.smart_round((order_price / base_rate * quote_rate))} AF: {PerformanceMetrics.smart_round(avg_fill_price)} TT: {PerformanceMetrics.smart_round((taker_top / base_rate * quote_rate))}"
 *                 )
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1215, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1216
 *                 taker_top_ask = taker_market.c_get_price(taker_trading_pair, True)
 *                 self.notify_hb_app_with_timestamp(
 *                     f"M. Sell Min P. {round((((avg_fill_price - (order_price / base_rate * quote_rate)) / (order_price / base_rate * quote_rate)) * 100),3)} Max P. {round((((avg_fill_price - (taker_top_ask / base_rate * quote_rate)) / avg_fill_price) * 100),3)} OP: {PerformanceMetrics.smart_round((order_price / base_rate * quote_rate))} AF: {PerformanceMetrics.smart_round(avg_fill_price)} TT: {PerformanceMetrics.smart_round((taker_top / base_rate * quote_rate))}"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
        __pyx_t_4 = PyTuple_New(10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_14 = 127;
        __Pyx_INCREF(__pyx_kp_u_M_Sell_Min_P_2);
        __pyx_t_3 += 15;
        __Pyx_GIVEREF(__pyx_kp_u_M_Sell_Min_P_2);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_M_Sell_Min_P_2);
        __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_order_price, __pyx_v_base_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_v_quote_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Subtract(__pyx_v_avg_fill_price, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_order_price, __pyx_v_base_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_v_quote_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_int_100); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_kp_u_Max_P_3);
        __pyx_t_3 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_Max_P_3);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Max_P_3);
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_taker_top_ask, __pyx_v_base_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_v_quote_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Subtract(__pyx_v_avg_fill_price, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_avg_fill_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Multiply(__pyx_t_5, __pyx_int_100); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_INCREF(__pyx_kp_u_OP_2);
        __pyx_t_3 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_OP_2);
        PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_OP_2);
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_order_price, __pyx_v_base_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = PyNumber_Multiply(__pyx_t_2, __pyx_v_quote_rate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u_AF_2);
        __pyx_t_3 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_AF_2);
        PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_AF_2);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_avg_fill_price) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_avg_fill_price);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_TT);
        __pyx_t_3 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_TT);
        PyTuple_SET_ITEM(__pyx_t_4, 8, __pyx_kp_u_TT);
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_taker_top, __pyx_v_base_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_v_quote_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_9 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 9, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_4, 10, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1216, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1215, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1212
 *                 )
 * 
 *               if not self._triangular_arbitrage:             # <<<<<<<<<<<<<<
 *                 order_id = self.c_place_order(market_pair, True, market_pair.taker, False, quantized_hedge_amount, order_price)
 *                 taker_top_ask = taker_market.c_get_price(taker_trading_pair, True)
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1222
 * 
 *                 #add the third leg of a triangular arbitrage order
 *               if (market_pair.maker.quote_asset != market_pair.taker.quote_asset) and self._triangular_arbitrage: #add another argument which looks at if the parameter for the thirs leg is active             # <<<<<<<<<<<<<<
 *                      # this is the amount in maker base base_currency
 *                      self.log_with_clock(
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_RichCompare(__pyx_t_7, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_11) {
      } else {
        __pyx_t_12 = __pyx_t_11;
        goto __pyx_L94_bool_binop_done;
      }
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_arbitrage); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __pyx_t_12 = __pyx_t_11;
      __pyx_L94_bool_binop_done:;
      if (__pyx_t_12) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1224
 *               if (market_pair.maker.quote_asset != market_pair.taker.quote_asset) and self._triangular_arbitrage: #add another argument which looks at if the parameter for the thirs leg is active
 *                      # this is the amount in maker base base_currency
 *                      self.log_with_clock(             # <<<<<<<<<<<<<<
 *                          logging.INFO,
 *                          f"We will place a third leg"
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1225
 *                      # this is the amount in maker base base_currency
 *                      self.log_with_clock(
 *                          logging.INFO,             # <<<<<<<<<<<<<<
 *                          f"We will place a third leg"
 *                      )
 */
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_logging); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_INFO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1225, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        __pyx_t_15 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_15 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_kp_u_We_will_place_a_third_leg};
          __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1224, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_kp_u_We_will_place_a_third_leg};
          __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1224, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1224, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_15, __pyx_t_4);
          __Pyx_INCREF(__pyx_kp_u_We_will_place_a_third_leg);
          __Pyx_GIVEREF(__pyx_kp_u_We_will_place_a_third_leg);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_15, __pyx_kp_u_We_will_place_a_third_leg);
          __pyx_t_4 = 0;
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1224, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1228
 *                          f"We will place a third leg"
 *                      )
 *                      if self._triangular_switch:             # <<<<<<<<<<<<<<
 *                       order_id = self.c_place_order(market_pair, False, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() / (1 + self._slippage_buffer_fix)))
 * 
 */
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1228, __pyx_L1_error)
        if (__pyx_t_12) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1229
 *                      )
 *                      if self._triangular_switch:
 *                       order_id = self.c_place_order(market_pair, False, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() / (1 + self._slippage_buffer_fix)))             # <<<<<<<<<<<<<<
 * 
 *                      if not self._triangular_switch:
 */
          __pyx_t_10 = __pyx_v_self->_third_market;
          __Pyx_INCREF(__pyx_t_10);
          __pyx_t_5 = PyNumber_Multiply(__pyx_v_avg_fill_price, __pyx_v_hedged_order_quantity); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1229, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1229, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_9 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1229, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_slippage_buffer_fix, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1229, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1229, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_10, 0, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1229, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_4));
          __pyx_t_4 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1228
 *                          f"We will place a third leg"
 *                      )
 *                      if self._triangular_switch:             # <<<<<<<<<<<<<<
 *                       order_id = self.c_place_order(market_pair, False, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() / (1 + self._slippage_buffer_fix)))
 * 
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1231
 *                       order_id = self.c_place_order(market_pair, False, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() / (1 + self._slippage_buffer_fix)))
 * 
 *                      if not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (((avg_fill_price * quantized_hedge_amount) / quote_rate)), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))
 * 
 */
        __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 1231, __pyx_L1_error)
        __pyx_t_11 = ((!__pyx_t_12) != 0);
        if (__pyx_t_11) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1232
 * 
 *                      if not self._triangular_switch:
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (((avg_fill_price * quantized_hedge_amount) / quote_rate)), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))             # <<<<<<<<<<<<<<
 * 
 *               del self._order_fill_sell_events[market_pair]
 */
          __pyx_t_4 = __pyx_v_self->_third_market;
          __Pyx_INCREF(__pyx_t_4);
          __pyx_t_7 = PyNumber_Multiply(__pyx_v_avg_fill_price, __pyx_v_quantized_hedge_amount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_v_quote_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_slippage_buffer_fix, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = PyNumber_Multiply(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_4, 0, __pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_10));
          __pyx_t_10 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1231
 *                       order_id = self.c_place_order(market_pair, False, self._third_market, False, (avg_fill_price * hedged_order_quantity), (self._third_market.get_mid_price() / (1 + self._slippage_buffer_fix)))
 * 
 *                      if not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (((avg_fill_price * quantized_hedge_amount) / quote_rate)), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))
 * 
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1222
 * 
 *                 #add the third leg of a triangular arbitrage order
 *               if (market_pair.maker.quote_asset != market_pair.taker.quote_asset) and self._triangular_arbitrage: #add another argument which looks at if the parameter for the thirs leg is active             # <<<<<<<<<<<<<<
 *                      # this is the amount in maker base base_currency
 *                      self.log_with_clock(
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1234
 *                        order_id = self.c_place_order(market_pair, True, self._third_market, False, (((avg_fill_price * quantized_hedge_amount) / quote_rate)), (self._third_market.get_mid_price() * (1 + self._slippage_buffer_fix)))
 * 
 *               del self._order_fill_sell_events[market_pair]             # <<<<<<<<<<<<<<
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:
 *                     self.log_with_clock(
 */
      if (unlikely(__pyx_v_self->_order_fill_sell_events == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1234, __pyx_L1_error)
      }
      if (unlikely(PyDict_DelItem(__pyx_v_self->_order_fill_sell_events, __pyx_v_market_pair) < 0)) __PYX_ERR(0, 1234, __pyx_L1_error)

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1235
 * 
 *               del self._order_fill_sell_events[market_pair]
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      __pyx_t_10 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_MAKER_ORDER_HEDGED); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = PyNumber_And(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_11) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1236
 *               del self._order_fill_sell_events[market_pair]
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Hedged maker sell order(s) of "
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1236, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1237
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"({market_pair.maker.trading_pair}) Hedged maker sell order(s) of "
 *                         f"{sell_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_logging); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_INFO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1238
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Hedged maker sell order(s) of "             # <<<<<<<<<<<<<<
 *                         f"{sell_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "
 *                         f"(maker avg price={avg_fill_price}, taker top={taker_top})"
 */
        __pyx_t_10 = PyTuple_New(11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = 0;
        __pyx_t_14 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_3 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u__24);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_Hedged_maker_sell_order_s_of);
        __pyx_t_3 += 32;
        __Pyx_GIVEREF(__pyx_kp_u_Hedged_maker_sell_order_s_of);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_Hedged_maker_sell_order_s_of);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1239
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Hedged maker sell order(s) of "
 *                         f"{sell_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "             # <<<<<<<<<<<<<<
 *                         f"(maker avg price={avg_fill_price}, taker top={taker_top})"
 *                     )
 */
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_sell_fill_quantity, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_3 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_kp_u__23);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_on_taker_market_to_lock_in_prof);
        __pyx_t_3 += 54;
        __Pyx_GIVEREF(__pyx_kp_u_on_taker_market_to_lock_in_prof);
        PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_kp_u_on_taker_market_to_lock_in_prof);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1240
 *                         f"({market_pair.maker.trading_pair}) Hedged maker sell order(s) of "
 *                         f"{sell_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "
 *                         f"(maker avg price={avg_fill_price}, taker top={taker_top})"             # <<<<<<<<<<<<<<
 *                     )
 *             else:
 */
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_avg_fill_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_taker_top);
        __pyx_t_3 += 12;
        __Pyx_GIVEREF(__pyx_kp_u_taker_top);
        PyTuple_SET_ITEM(__pyx_t_10, 8, __pyx_kp_u_taker_top);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_top, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
        __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 9, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u__26);
        __pyx_t_3 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__26);
        PyTuple_SET_ITEM(__pyx_t_10, 10, __pyx_kp_u__26);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1238
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_pair.maker.trading_pair}) Hedged maker sell order(s) of "             # <<<<<<<<<<<<<<
 *                         f"{sell_fill_quantity} {market_pair.maker.base_asset} on taker market to lock in profits. "
 *                         f"(maker avg price={avg_fill_price}, taker top={taker_top})"
 */
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_10, 11, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_15 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_15 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_4, __pyx_t_7};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1236, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_4, __pyx_t_7};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1236, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1236, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (__pyx_t_10) {
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10); __pyx_t_10 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_15, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_15, __pyx_t_7);
          __pyx_t_4 = 0;
          __pyx_t_7 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1236, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1235
 * 
 *               del self._order_fill_sell_events[market_pair]
 *               if self._logging_options & self.OPTION_LOG_MAKER_ORDER_HEDGED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1199
 *             self.log_with_clock(logging.INFO, f"Slippage buffer adjusted order_price: {order_price} hedge order quantity {quantized_hedge_amount},  & order_size quantized hedge amount {quantized_hedge_amount}, quantized amount before converting{taker_market.c_quantize_order_amount(taker_trading_pair, Decimal(hedged_order_quantity))}")
 * 
 *             if quantized_hedge_amount > s_decimal_zero:             # <<<<<<<<<<<<<<
 *               #the price for quote volume does not work with a BTC or  ETH denominated taker market
 *               if not self._triangular_switch and self._triangular_arbitrage:
 */
      goto __pyx_L80;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1243
 *                     )
 *             else:
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Current maker sell fill amount of "
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1244
 *             else:
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.maker.trading_pair}) Current maker sell fill amount of "
 *                     f"{sell_fill_quantity} {market_pair.maker.base_asset} is less than the minimum order amount "
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_INFO); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1245
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Current maker sell fill amount of "             # <<<<<<<<<<<<<<
 *                     f"{sell_fill_quantity} {market_pair.maker.base_asset} is less than the minimum order amount "
 *                     f"allowed on the taker market. No hedging possible yet."
 */
      __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_3 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u__24);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
      __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_Current_maker_sell_fill_amount);
      __pyx_t_3 += 36;
      __Pyx_GIVEREF(__pyx_kp_u_Current_maker_sell_fill_amount);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_Current_maker_sell_fill_amount);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1246
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Current maker sell fill amount of "
 *                     f"{sell_fill_quantity} {market_pair.maker.base_asset} is less than the minimum order amount "             # <<<<<<<<<<<<<<
 *                     f"allowed on the taker market. No hedging possible yet."
 *                 )
 */
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_sell_fill_quantity, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
      __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_3 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__23);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
      __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_less_than_the_minimum_order);
      __pyx_t_3 += 92;
      __Pyx_GIVEREF(__pyx_kp_u_is_less_than_the_minimum_order);
      PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_kp_u_is_less_than_the_minimum_order);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1245
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Current maker sell fill amount of "             # <<<<<<<<<<<<<<
 *                     f"{sell_fill_quantity} {market_pair.maker.base_asset} is less than the minimum order amount "
 *                     f"allowed on the taker market. No hedging possible yet."
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_2, 7, __pyx_t_3, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_15 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
          __pyx_t_15 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_7, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1243, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_7, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1243, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1243, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_2) {
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __pyx_t_2 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_15, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_15, __pyx_t_4);
        __pyx_t_7 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1243, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_L80:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1176
 *                 )
 * 
 *         if sell_fill_quantity > 0:             # <<<<<<<<<<<<<<
 *             hedged_order_quantity = min(
 *                 (sell_fill_quantity / base_rate), #only convert base rate
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1075
 *         return True
 * 
 *     cdef c_check_and_hedge_orders(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Look into the stored and un-hedged limit order fill events, and emit orders to hedge them, depending on
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_and_hedge_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_v_buy_fill_records);
  __Pyx_XDECREF(__pyx_v_sell_fill_records);
  __Pyx_XDECREF(__pyx_v_buy_fill_quantity);
  __Pyx_XDECREF(__pyx_v_sell_fill_quantity);
  __Pyx_XDECREF(__pyx_v_taker_top);
  __Pyx_XDECREF(__pyx_v_hedged_order_quantity);
  __Pyx_XDECREF(__pyx_v_avg_fill_price);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_quantized_hedge_amount);
  __Pyx_XDECREF(__pyx_v_order_price);
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_taker_top_ask);
  __Pyx_XDECREF(__pyx_9genexpr14__pyx_v__);
  __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_fill_event);
  __Pyx_XDECREF(__pyx_9genexpr15__pyx_v__);
  __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_fill_event);
  __Pyx_XDECREF(__pyx_9genexpr16__pyx_v__);
  __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_r);
  __Pyx_XDECREF(__pyx_9genexpr17__pyx_v__);
  __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_r);
  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v__);
  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_r);
  __Pyx_XDECREF(__pyx_9genexpr19__pyx_v__);
  __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1251
 * 
 * 
 *     cdef object c_get_adjusted_limit_order_size(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Given the proposed order size of a proposed limit order (regardless of bid or ask), adjust and refine the order
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_adjusted_limit_order_size(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_base_order_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_adjusted_limit_order_size", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1264
 *         """
 *         cdef:
 *             ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *             str trading_pair = market_pair.maker.trading_pair
 *         if self._order_amount and self._order_amount > 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1264, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1265
 *         cdef:
 *             ExchangeBase maker_market = market_pair.maker.market
 *             str trading_pair = market_pair.maker.trading_pair             # <<<<<<<<<<<<<<
 *         if self._order_amount and self._order_amount > 0:
 *             base_order_size = self._order_amount
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1265, __pyx_L1_error)
  __pyx_v_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1266
 *             ExchangeBase maker_market = market_pair.maker.market
 *             str trading_pair = market_pair.maker.trading_pair
 *         if self._order_amount and self._order_amount > 0:             # <<<<<<<<<<<<<<
 *             base_order_size = self._order_amount
 *             return maker_market.c_quantize_order_amount(trading_pair, Decimal(base_order_size))
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_self->_order_amount); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1266, __pyx_L1_error)
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_self->_order_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1267
 *             str trading_pair = market_pair.maker.trading_pair
 *         if self._order_amount and self._order_amount > 0:
 *             base_order_size = self._order_amount             # <<<<<<<<<<<<<<
 *             return maker_market.c_quantize_order_amount(trading_pair, Decimal(base_order_size))
 *         else:
 */
    __pyx_t_1 = __pyx_v_self->_order_amount;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_base_order_size = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1268
 *         if self._order_amount and self._order_amount > 0:
 *             base_order_size = self._order_amount
 *             return maker_market.c_quantize_order_amount(trading_pair, Decimal(base_order_size))             # <<<<<<<<<<<<<<
 *         else:
 *             return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_v_base_order_size) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_base_order_size);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), __pyx_v_trading_pair, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1266
 *             ExchangeBase maker_market = market_pair.maker.market
 *             str trading_pair = market_pair.maker.trading_pair
 *         if self._order_amount and self._order_amount > 0:             # <<<<<<<<<<<<<<
 *             base_order_size = self._order_amount
 *             return maker_market.c_quantize_order_amount(trading_pair, Decimal(base_order_size))
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1270
 *             return maker_market.c_quantize_order_amount(trading_pair, Decimal(base_order_size))
 *         else:
 *             return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_order_size_after_portfolio_ratio_limit(self, object market_pair):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_order_size_after_portfolio_ratio_limit(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1251
 * 
 * 
 *     cdef object c_get_adjusted_limit_order_size(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Given the proposed order size of a proposed limit order (regardless of bid or ask), adjust and refine the order
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_adjusted_limit_order_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_base_order_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1272
 *             return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)
 * 
 *     cdef object c_get_order_size_after_portfolio_ratio_limit(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Given the proposed order size of a proposed limit order (regardless of bid or ask), adjust the order sizing
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_order_size_after_portfolio_ratio_limit(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_base_balance = 0;
  PyObject *__pyx_v_quote_balance = 0;
  PyObject *__pyx_v_current_price = 0;
  PyObject *__pyx_v_maker_portfolio_value = 0;
  PyObject *__pyx_v_adjusted_order_size = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_order_size_after_portfolio_ratio_limit", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1284
 *         """
 *         cdef:
 *             ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *             str trading_pair = market_pair.maker.trading_pair
 *             object base_balance = maker_market.c_get_balance(market_pair.maker.base_asset)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1284, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1285
 *         cdef:
 *             ExchangeBase maker_market = market_pair.maker.market
 *             str trading_pair = market_pair.maker.trading_pair             # <<<<<<<<<<<<<<
 *             object base_balance = maker_market.c_get_balance(market_pair.maker.base_asset)
 *             object quote_balance = maker_market.c_get_balance(market_pair.maker.quote_asset)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1285, __pyx_L1_error)
  __pyx_v_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1286
 *             ExchangeBase maker_market = market_pair.maker.market
 *             str trading_pair = market_pair.maker.trading_pair
 *             object base_balance = maker_market.c_get_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 *             object quote_balance = maker_market.c_get_balance(market_pair.maker.quote_asset)
 *             object current_price = (maker_market.c_get_price(trading_pair, True) +
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1286, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_base_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1287
 *             str trading_pair = market_pair.maker.trading_pair
 *             object base_balance = maker_market.c_get_balance(market_pair.maker.base_asset)
 *             object quote_balance = maker_market.c_get_balance(market_pair.maker.quote_asset)             # <<<<<<<<<<<<<<
 *             object current_price = (maker_market.c_get_price(trading_pair, True) +
 *                                     maker_market.c_get_price(trading_pair, False)) * Decimal(0.5)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1287, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_quote_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1288
 *             object base_balance = maker_market.c_get_balance(market_pair.maker.base_asset)
 *             object quote_balance = maker_market.c_get_balance(market_pair.maker.quote_asset)
 *             object current_price = (maker_market.c_get_price(trading_pair, True) +             # <<<<<<<<<<<<<<
 *                                     maker_market.c_get_price(trading_pair, False)) * Decimal(0.5)
 *             object maker_portfolio_value = base_balance + quote_balance / current_price
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), __pyx_v_trading_pair, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1289
 *             object quote_balance = maker_market.c_get_balance(market_pair.maker.quote_asset)
 *             object current_price = (maker_market.c_get_price(trading_pair, True) +
 *                                     maker_market.c_get_price(trading_pair, False)) * Decimal(0.5)             # <<<<<<<<<<<<<<
 *             object maker_portfolio_value = base_balance + quote_balance / current_price
 *             object adjusted_order_size = maker_portfolio_value * self._order_size_portfolio_ratio_limit
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), __pyx_v_trading_pair, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1288
 *             object base_balance = maker_market.c_get_balance(market_pair.maker.base_asset)
 *             object quote_balance = maker_market.c_get_balance(market_pair.maker.quote_asset)
 *             object current_price = (maker_market.c_get_price(trading_pair, True) +             # <<<<<<<<<<<<<<
 *                                     maker_market.c_get_price(trading_pair, False)) * Decimal(0.5)
 *             object maker_portfolio_value = base_balance + quote_balance / current_price
 */
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1289
 *             object quote_balance = maker_market.c_get_balance(market_pair.maker.quote_asset)
 *             object current_price = (maker_market.c_get_price(trading_pair, True) +
 *                                     maker_market.c_get_price(trading_pair, False)) * Decimal(0.5)             # <<<<<<<<<<<<<<
 *             object maker_portfolio_value = base_balance + quote_balance / current_price
 *             object adjusted_order_size = maker_portfolio_value * self._order_size_portfolio_ratio_limit
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_float_0_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_float_0_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_current_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1290
 *             object current_price = (maker_market.c_get_price(trading_pair, True) +
 *                                     maker_market.c_get_price(trading_pair, False)) * Decimal(0.5)
 *             object maker_portfolio_value = base_balance + quote_balance / current_price             # <<<<<<<<<<<<<<
 *             object adjusted_order_size = maker_portfolio_value * self._order_size_portfolio_ratio_limit
 * 
 */
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_quote_balance, __pyx_v_current_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_base_balance, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_maker_portfolio_value = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1291
 *                                     maker_market.c_get_price(trading_pair, False)) * Decimal(0.5)
 *             object maker_portfolio_value = base_balance + quote_balance / current_price
 *             object adjusted_order_size = maker_portfolio_value * self._order_size_portfolio_ratio_limit             # <<<<<<<<<<<<<<
 * 
 *         return maker_market.c_quantize_order_amount(trading_pair, Decimal(adjusted_order_size))
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_maker_portfolio_value, __pyx_v_self->_order_size_portfolio_ratio_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_adjusted_order_size = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1293
 *             object adjusted_order_size = maker_portfolio_value * self._order_size_portfolio_ratio_limit
 * 
 *         return maker_market.c_quantize_order_amount(trading_pair, Decimal(adjusted_order_size))             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_market_making_size(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_adjusted_order_size) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_adjusted_order_size);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), __pyx_v_trading_pair, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1272
 *             return self.c_get_order_size_after_portfolio_ratio_limit(market_pair)
 * 
 *     cdef object c_get_order_size_after_portfolio_ratio_limit(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Given the proposed order size of a proposed limit order (regardless of bid or ask), adjust the order sizing
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_order_size_after_portfolio_ratio_limit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_base_balance);
  __Pyx_XDECREF(__pyx_v_quote_balance);
  __Pyx_XDECREF(__pyx_v_current_price);
  __Pyx_XDECREF(__pyx_v_maker_portfolio_value);
  __Pyx_XDECREF(__pyx_v_adjusted_order_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1295
 *         return maker_market.c_quantize_order_amount(trading_pair, Decimal(adjusted_order_size))
 * 
 *     cdef object c_get_market_making_size(self,             # <<<<<<<<<<<<<<
 *                                          object market_pair,
 *                                          bint is_bid):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_market_making_size(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid) {
  PyObject *__pyx_v_taker_trading_pair = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quote_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_taker_slippage_adjustment_factor = NULL;
  PyObject *__pyx_v_maker_balance_in_quote = NULL;
  PyObject *__pyx_v_user_order = NULL;
  PyObject *__pyx_v_taker_price = NULL;
  PyObject *__pyx_v_taker_balance = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_min_profitability_factor = NULL;
  PyObject *__pyx_v_maker_balance = NULL;
  PyObject *__pyx_v_order_amount = NULL;
  PyObject *__pyx_v_taker_balance_in_quote = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_UCS4 __pyx_t_16;
  double __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_market_making_size", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1311
 *         """
 *         cdef:
 *             str taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 *             ExchangeBase maker_market = market_pair.maker.market
 *             ExchangeBase taker_market = market_pair.taker.market
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1311, __pyx_L1_error)
  __pyx_v_taker_trading_pair = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1312
 *         cdef:
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *             ExchangeBase taker_market = market_pair.taker.market
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1312, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1313
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             ExchangeBase maker_market = market_pair.maker.market
 *             ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1313, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1316
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                 self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1315, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1315, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_1,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 6) < 0) __PYX_ERR(0, 1315, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1315, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1315
 *             ExchangeBase taker_market = market_pair.taker.market
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 */
  __pyx_v_quote_pair = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_base_pair = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_rate_source = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1319
 * 
 * 
 *         if is_bid: #check for placing buy orders IMPORTANT: base_rate is opposite of self.market_conversion_rate. So if you do / base rate you should do * conversion rate             # <<<<<<<<<<<<<<
 *             taker_slippage_adjustment_factor = Decimal("1") - Decimal(self._slippage_buffer)
 * 
 */
  __pyx_t_10 = (__pyx_v_is_bid != 0);
  if (__pyx_t_10) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1320
 * 
 *         if is_bid: #check for placing buy orders IMPORTANT: base_rate is opposite of self.market_conversion_rate. So if you do / base rate you should do * conversion rate
 *             taker_slippage_adjustment_factor = Decimal("1") - Decimal(self._slippage_buffer)             # <<<<<<<<<<<<<<
 * 
 *             maker_balance_in_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_1);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_self->_slippage_buffer) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_self->_slippage_buffer);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_taker_slippage_adjustment_factor = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1322
 *             taker_slippage_adjustment_factor = Decimal("1") - Decimal(self._slippage_buffer)
 * 
 *             maker_balance_in_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)             # <<<<<<<<<<<<<<
 * 
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1322, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_7)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_maker_balance_in_quote = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1324
 *             maker_balance_in_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 * 
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)             # <<<<<<<<<<<<<<
 *             #had to be converted to base rate for taker_price calculations
 * 
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_adjusted_limit_order_size(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_user_order = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1327
 *             #had to be converted to base rate for taker_price calculations
 * 
 *             try: #this one does not use price for quote volume but vwap             # <<<<<<<<<<<<<<
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, True, user_order))
 *             except ZeroDivisionError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1328
 * 
 *             try: #this one does not use price for quote volume but vwap
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, True, user_order))             # <<<<<<<<<<<<<<
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero
 */
        __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_v_user_order); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1328, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_v_taker_price = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1327
 *             #had to be converted to base rate for taker_price calculations
 * 
 *             try: #this one does not use price for quote volume but vwap             # <<<<<<<<<<<<<<
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, True, user_order))
 *             except ZeroDivisionError:
 */
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L11_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1329
 *             try: #this one does not use price for quote volume but vwap
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, True, user_order))
 *             except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                 assert user_order == s_decimal_zero
 *                 return s_decimal_zero
 */
      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
      if (__pyx_t_14) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_market_making_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(0, 1329, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_2);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1330
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, True, user_order))
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero             # <<<<<<<<<<<<<<
 *                 return s_decimal_zero
 * 
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyObject_RichCompare(__pyx_v_user_order, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1330, __pyx_L8_except_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1330, __pyx_L8_except_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_10)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 1330, __pyx_L8_except_error)
          }
        }
        #endif

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1331
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero
 *                 return s_decimal_zero             # <<<<<<<<<<<<<<
 * 
 *             #Base converion: taker balance is in BTC, multiply this by the taker price, then you have an usdt amount you can buy, then convert the usdt to an FRONT amount. needs to be converted to an FRONT amount (maker to taker = * rate) (taker to maker = / rate)
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1331, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L9_except_return;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1327
 *             #had to be converted to base rate for taker_price calculations
 * 
 *             try: #this one does not use price for quote volume but vwap             # <<<<<<<<<<<<<<
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, True, user_order))
 *             except ZeroDivisionError:
 */
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L9_except_return:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L0;
      __pyx_L11_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1335
 *             #Base converion: taker balance is in BTC, multiply this by the taker price, then you have an usdt amount you can buy, then convert the usdt to an FRONT amount. needs to be converted to an FRONT amount (maker to taker = * rate) (taker to maker = / rate)
 *             # quote converions: taker balance in SHR is the max sellable, convert this to
 *             taker_balance = ((taker_market.c_get_available_balance(market_pair.taker.base_asset) * \             # <<<<<<<<<<<<<<
 *                                 self._order_size_taker_balance_factor) * base_rate) #check why it is done twice
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1335, __pyx_L1_error)
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_7)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1336
 *             # quote converions: taker balance in SHR is the max sellable, convert this to
 *             taker_balance = ((taker_market.c_get_available_balance(market_pair.taker.base_asset) * \
 *                                 self._order_size_taker_balance_factor) * base_rate) #check why it is done twice             # <<<<<<<<<<<<<<
 * 
 *             min_profitability_factor = (Decimal(1) + Decimal(self._min_profitability))
 */
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_2, __pyx_v_self->_order_size_taker_balance_factor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_v_base_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_taker_balance = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1338
 *                                 self._order_size_taker_balance_factor) * base_rate) #check why it is done twice
 * 
 *             min_profitability_factor = (Decimal(1) + Decimal(self._min_profitability))             # <<<<<<<<<<<<<<
 *             #maker balance in quote: taker price is taker asset, so needs to be converted back. But it should actually be the FRONT-USDT price therefore we take a margin of error of 2%
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_v_self->_min_profitability) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_self->_min_profitability);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_min_profitability_factor = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1342
 * 
 *             #be aware that i should actually use price for quote colume, not effective hedging price
 *             maker_balance = ((maker_balance_in_quote * self._order_size_maker_balance_factor) / (self.c_calculate_effective_hedging_price(market_pair, True, user_order) / (1 + self._min_profitability)))             # <<<<<<<<<<<<<<
 * 
 *             order_amount = min(maker_balance, taker_balance, user_order)
 */
    __pyx_t_6 = PyNumber_Multiply(__pyx_v_maker_balance_in_quote, __pyx_v_self->_order_size_maker_balance_factor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_v_user_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_min_profitability, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_maker_balance = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1344
 *             maker_balance = ((maker_balance_in_quote * self._order_size_maker_balance_factor) / (self.c_calculate_effective_hedging_price(market_pair, True, user_order) / (1 + self._min_profitability)))
 * 
 *             order_amount = min(maker_balance, taker_balance, user_order)             # <<<<<<<<<<<<<<
 * 
 *             if order_amount > self._min_order_amount:
 */
    __Pyx_INCREF(__pyx_v_taker_balance);
    __pyx_t_2 = __pyx_v_taker_balance;
    __Pyx_INCREF(__pyx_v_user_order);
    __pyx_t_4 = __pyx_v_user_order;
    __Pyx_INCREF(__pyx_v_maker_balance);
    __pyx_t_6 = __pyx_v_maker_balance;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1344, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_7 = __pyx_t_2;
    } else {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = __pyx_t_6;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_6 = __pyx_t_7;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1344, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_7 = __pyx_t_4;
    } else {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = __pyx_t_6;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_7;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_order_amount = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1346
 *             order_amount = min(maker_balance, taker_balance, user_order)
 * 
 *             if order_amount > self._min_order_amount:             # <<<<<<<<<<<<<<
 *               self.log_with_clock(
 *                 logging.INFO,
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_order_amount, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1346, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1346, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1347
 * 
 *             if order_amount > self._min_order_amount:
 *               self.log_with_clock(             # <<<<<<<<<<<<<<
 *                 logging.INFO,
 *                 f"Determining max size of the Maker bid order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1348
 *             if order_amount > self._min_order_amount:
 *               self.log_with_clock(
 *                 logging.INFO,             # <<<<<<<<<<<<<<
 *                 f"Determining max size of the Maker bid order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "
 *                 f"Taking into account a Base_rate of ({base_rate}) & a Quote rate of {quote_rate}) and a Taker_price of ({taker_price}) Price for quote volume {taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, order_amount).result_price}"
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1349
 *               self.log_with_clock(
 *                 logging.INFO,
 *                 f"Determining max size of the Maker bid order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "             # <<<<<<<<<<<<<<
 *                 f"Taking into account a Base_rate of ({base_rate}) & a Quote rate of {quote_rate}) and a Taker_price of ({taker_price}) Price for quote volume {taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, order_amount).result_price}"
 *                 )
 */
      __pyx_t_4 = PyTuple_New(14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_15 = 0;
      __pyx_t_16 = 127;
      __Pyx_INCREF(__pyx_kp_u_Determining_max_size_of_the_Make);
      __pyx_t_15 += 79;
      __Pyx_GIVEREF(__pyx_kp_u_Determining_max_size_of_the_Make);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Determining_max_size_of_the_Make);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_Max_size_based_on_taker_balance);
      __pyx_t_15 += 36;
      __Pyx_GIVEREF(__pyx_kp_u_Max_size_based_on_taker_balance);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Max_size_based_on_taker_balance);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_Max_size_of_the_order);
      __pyx_t_15 += 27;
      __Pyx_GIVEREF(__pyx_kp_u_Max_size_of_the_order);
      PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_Max_size_of_the_order);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_user_order, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_Taking_into_account_a_Base_rate);
      __pyx_t_15 += 38;
      __Pyx_GIVEREF(__pyx_kp_u_Taking_into_account_a_Base_rate);
      PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_Taking_into_account_a_Base_rate);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1350
 *                 logging.INFO,
 *                 f"Determining max size of the Maker bid order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "
 *                 f"Taking into account a Base_rate of ({base_rate}) & a Quote rate of {quote_rate}) and a Taker_price of ({taker_price}) Price for quote volume {taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, order_amount).result_price}"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_base_rate, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_a_Quote_rate_of);
      __pyx_t_15 += 20;
      __Pyx_GIVEREF(__pyx_kp_u_a_Quote_rate_of);
      PyTuple_SET_ITEM(__pyx_t_4, 8, __pyx_kp_u_a_Quote_rate_of);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_quote_rate, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 9, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_and_a_Taker_price_of);
      __pyx_t_15 += 24;
      __Pyx_GIVEREF(__pyx_kp_u_and_a_Taker_price_of);
      PyTuple_SET_ITEM(__pyx_t_4, 10, __pyx_kp_u_and_a_Taker_price_of);
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 11, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_Price_for_quote_volume);
      __pyx_t_15 += 25;
      __Pyx_GIVEREF(__pyx_kp_u_Price_for_quote_volume);
      PyTuple_SET_ITEM(__pyx_t_4, 12, __pyx_kp_u_Price_for_quote_volume);
      __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_v_order_amount); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1350, __pyx_L1_error)
      __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_quote_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 0, __pyx_t_17)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_5)->result_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 13, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1349
 *               self.log_with_clock(
 *                 logging.INFO,
 *                 f"Determining max size of the Maker bid order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "             # <<<<<<<<<<<<<<
 *                 f"Taking into account a Base_rate of ({base_rate}) & a Quote rate of {quote_rate}) and a Taker_price of ({taker_price}) Price for quote volume {taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, order_amount).result_price}"
 *                 )
 */
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 14, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_14, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_14, __pyx_t_3);
        __pyx_t_6 = 0;
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1346
 *             order_amount = min(maker_balance, taker_balance, user_order)
 * 
 *             if order_amount > self._min_order_amount:             # <<<<<<<<<<<<<<
 *               self.log_with_clock(
 *                 logging.INFO,
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1353
 *                 )
 * 
 *             return maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, Decimal(order_amount))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_v_order_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_order_amount);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_7), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1319
 * 
 * 
 *         if is_bid: #check for placing buy orders IMPORTANT: base_rate is opposite of self.market_conversion_rate. So if you do / base rate you should do * conversion rate             # <<<<<<<<<<<<<<
 *             taker_slippage_adjustment_factor = Decimal("1") - Decimal(self._slippage_buffer)
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1358
 *         else:
 * 
 *             maker_balance = maker_market.c_get_available_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 * 
 *             taker_balance_in_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset) * \
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1358, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_maker_balance = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1360
 *             maker_balance = maker_market.c_get_available_balance(market_pair.maker.base_asset)
 * 
 *             taker_balance_in_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset) * \             # <<<<<<<<<<<<<<
 *                 self._order_size_taker_balance_factor
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1360, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1361
 * 
 *             taker_balance_in_quote = taker_market.c_get_available_balance(market_pair.taker.quote_asset) * \
 *                 self._order_size_taker_balance_factor             # <<<<<<<<<<<<<<
 * 
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_5, __pyx_v_self->_order_size_taker_balance_factor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_taker_balance_in_quote = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1363
 *                 self._order_size_taker_balance_factor
 * 
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_adjusted_limit_order_size(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_user_order = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1365
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, False, user_order))
 *             except ZeroDivisionError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1366
 * 
 *             try:
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, False, user_order))             # <<<<<<<<<<<<<<
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_v_user_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_v_taker_price = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1365
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, False, user_order))
 *             except ZeroDivisionError:
 */
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L20_try_end;
      __pyx_L15_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1367
 *             try:
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, False, user_order))
 *             except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                 assert user_order == s_decimal_zero
 *                 return s_decimal_zero
 */
      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
      if (__pyx_t_14) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_market_making_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(0, 1367, __pyx_L17_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_7);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1368
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, False, user_order))
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero             # <<<<<<<<<<<<<<
 *                 return s_decimal_zero
 * 
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1368, __pyx_L17_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_6 = PyObject_RichCompare(__pyx_v_user_order, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1368, __pyx_L17_except_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1368, __pyx_L17_except_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_10)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 1368, __pyx_L17_except_error)
          }
        }
        #endif

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1369
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero
 *                 return s_decimal_zero             # <<<<<<<<<<<<<<
 * 
 *             maker_balance = maker_balance #probably need to ad a base rate conversion
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1369, __pyx_L17_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_r = __pyx_t_6;
        __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L18_except_return;
      }
      goto __pyx_L17_except_error;
      __pyx_L17_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1365
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 taker_price = (self.c_calculate_effective_hedging_price(market_pair, False, user_order))
 *             except ZeroDivisionError:
 */
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L18_except_return:;
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      goto __pyx_L0;
      __pyx_L20_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1371
 *                 return s_decimal_zero
 * 
 *             maker_balance = maker_balance #probably need to ad a base rate conversion             # <<<<<<<<<<<<<<
 *             taker_slippage_adjustment_factor = Decimal("1") + self._slippage_buffer
 *             taker_balance = ((taker_balance_in_quote / (self.c_calculate_effective_hedging_price(market_pair, False, user_order))) * quote_rate)
 */
    __Pyx_INCREF(__pyx_v_maker_balance);
    __Pyx_DECREF_SET(__pyx_v_maker_balance, __pyx_v_maker_balance);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1372
 * 
 *             maker_balance = maker_balance #probably need to ad a base rate conversion
 *             taker_slippage_adjustment_factor = Decimal("1") + self._slippage_buffer             # <<<<<<<<<<<<<<
 *             taker_balance = ((taker_balance_in_quote / (self.c_calculate_effective_hedging_price(market_pair, False, user_order))) * quote_rate)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_1);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_7, __pyx_v_self->_slippage_buffer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_taker_slippage_adjustment_factor = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1373
 *             maker_balance = maker_balance #probably need to ad a base rate conversion
 *             taker_slippage_adjustment_factor = Decimal("1") + self._slippage_buffer
 *             taker_balance = ((taker_balance_in_quote / (self.c_calculate_effective_hedging_price(market_pair, False, user_order))) * quote_rate)             # <<<<<<<<<<<<<<
 * 
 *             order_amount = min(maker_balance, taker_balance, user_order)
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_v_user_order); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_v_taker_balance_in_quote, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_v_quote_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_taker_balance = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1375
 *             taker_balance = ((taker_balance_in_quote / (self.c_calculate_effective_hedging_price(market_pair, False, user_order))) * quote_rate)
 * 
 *             order_amount = min(maker_balance, taker_balance, user_order)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(__pyx_v_taker_balance);
    __pyx_t_5 = __pyx_v_taker_balance;
    __Pyx_INCREF(__pyx_v_user_order);
    __pyx_t_7 = __pyx_v_user_order;
    __Pyx_INCREF(__pyx_v_maker_balance);
    __pyx_t_2 = __pyx_v_maker_balance;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_6 = __pyx_t_5;
    } else {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_6 = __pyx_t_2;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_2 = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_7, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_6 = __pyx_t_7;
    } else {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_6 = __pyx_t_2;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_6;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_order_amount = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1379
 * 
 * 
 *             if order_amount > self._min_order_amount:             # <<<<<<<<<<<<<<
 *               self.log_with_clock(
 *                 logging.INFO,
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_order_amount, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1380
 * 
 *             if order_amount > self._min_order_amount:
 *               self.log_with_clock(             # <<<<<<<<<<<<<<
 *                 logging.INFO,
 *                 f"Determining max size of the Maker ask order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1381
 *             if order_amount > self._min_order_amount:
 *               self.log_with_clock(
 *                 logging.INFO,             # <<<<<<<<<<<<<<
 *                 f"Determining max size of the Maker ask order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "
 *                 f"Taking into account a Base_rate of ({base_rate}) & a Quote rate of ({quote_rate}) and a Taker_price of ({taker_price}) price for quote volume {taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, order_amount).result_price}"
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_logging); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_INFO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1382
 *               self.log_with_clock(
 *                 logging.INFO,
 *                 f"Determining max size of the Maker ask order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "             # <<<<<<<<<<<<<<
 *                 f"Taking into account a Base_rate of ({base_rate}) & a Quote rate of ({quote_rate}) and a Taker_price of ({taker_price}) price for quote volume {taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, order_amount).result_price}"
 *                 )
 */
      __pyx_t_7 = PyTuple_New(14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_15 = 0;
      __pyx_t_16 = 127;
      __Pyx_INCREF(__pyx_kp_u_Determining_max_size_of_the_Make_2);
      __pyx_t_15 += 79;
      __Pyx_GIVEREF(__pyx_kp_u_Determining_max_size_of_the_Make_2);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Determining_max_size_of_the_Make_2);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_maker_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_Max_size_based_on_taker_balance);
      __pyx_t_15 += 36;
      __Pyx_GIVEREF(__pyx_kp_u_Max_size_based_on_taker_balance);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_Max_size_based_on_taker_balance);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_Max_size_of_the_order);
      __pyx_t_15 += 27;
      __Pyx_GIVEREF(__pyx_kp_u_Max_size_of_the_order);
      PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_kp_u_Max_size_of_the_order);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_user_order, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_Taking_into_account_a_Base_rate);
      __pyx_t_15 += 38;
      __Pyx_GIVEREF(__pyx_kp_u_Taking_into_account_a_Base_rate);
      PyTuple_SET_ITEM(__pyx_t_7, 6, __pyx_kp_u_Taking_into_account_a_Base_rate);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1383
 *                 logging.INFO,
 *                 f"Determining max size of the Maker ask order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "
 *                 f"Taking into account a Base_rate of ({base_rate}) & a Quote rate of ({quote_rate}) and a Taker_price of ({taker_price}) price for quote volume {taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, order_amount).result_price}"             # <<<<<<<<<<<<<<
 *                 )
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_base_rate, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 7, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_a_Quote_rate_of_2);
      __pyx_t_15 += 21;
      __Pyx_GIVEREF(__pyx_kp_u_a_Quote_rate_of_2);
      PyTuple_SET_ITEM(__pyx_t_7, 8, __pyx_kp_u_a_Quote_rate_of_2);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_quote_rate, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 9, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_and_a_Taker_price_of);
      __pyx_t_15 += 24;
      __Pyx_GIVEREF(__pyx_kp_u_and_a_Taker_price_of);
      PyTuple_SET_ITEM(__pyx_t_7, 10, __pyx_kp_u_and_a_Taker_price_of);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 11, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_price_for_quote_volume);
      __pyx_t_15 += 25;
      __Pyx_GIVEREF(__pyx_kp_u_price_for_quote_volume);
      PyTuple_SET_ITEM(__pyx_t_7, 12, __pyx_kp_u_price_for_quote_volume);
      __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_v_order_amount); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1383, __pyx_L1_error)
      __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_quote_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 1, __pyx_t_17)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_3)->result_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_16;
      __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 13, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1382
 *               self.log_with_clock(
 *                 logging.INFO,
 *                 f"Determining max size of the Maker ask order: Max size based on maker balance: ({maker_balance}), Max size based on taker balance:({taker_balance}), Max size of the order: ({user_order}) "             # <<<<<<<<<<<<<<
 *                 f"Taking into account a Base_rate of ({base_rate}) & a Quote rate of ({quote_rate}) and a Taker_price of ({taker_price}) price for quote volume {taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, order_amount).result_price}"
 *                 )
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_7, 14, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_2, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1380, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_2, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1380, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_14, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_14, __pyx_t_4);
        __pyx_t_2 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1379
 * 
 * 
 *             if order_amount > self._min_order_amount:             # <<<<<<<<<<<<<<
 *               self.log_with_clock(
 *                 logging.INFO,
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1387
 * 
 * 
 *             return maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, Decimal(order_amount))             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_market_making_price(self,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_order_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_order_amount);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_6), __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1295
 *         return maker_market.c_quantize_order_amount(trading_pair, Decimal(adjusted_order_size))
 * 
 *     cdef object c_get_market_making_size(self,             # <<<<<<<<<<<<<<
 *                                          object market_pair,
 *                                          bint is_bid):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_market_making_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_taker_slippage_adjustment_factor);
  __Pyx_XDECREF(__pyx_v_maker_balance_in_quote);
  __Pyx_XDECREF(__pyx_v_user_order);
  __Pyx_XDECREF(__pyx_v_taker_price);
  __Pyx_XDECREF(__pyx_v_taker_balance);
  __Pyx_XDECREF(__pyx_v_min_profitability_factor);
  __Pyx_XDECREF(__pyx_v_maker_balance);
  __Pyx_XDECREF(__pyx_v_order_amount);
  __Pyx_XDECREF(__pyx_v_taker_balance_in_quote);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1389
 *             return maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, Decimal(order_amount))
 * 
 *     cdef object c_get_market_making_price(self,             # <<<<<<<<<<<<<<
 *                                           object market_pair,
 *                                           bint is_bid,
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_market_making_price(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid, PyObject *__pyx_v_size) {
  PyObject *__pyx_v_taker_trading_pair = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_top_bid_price = 0;
  PyObject *__pyx_v_top_ask_price = 0;
  PyObject *__pyx_v_next_price_below_top_ask = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quote_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_v_price_quantum = NULL;
  PyObject *__pyx_v_price_above_bid = NULL;
  PyObject *__pyx_v_taker_price = NULL;
  PyObject *__pyx_v_maker_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_market_making_price", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1405
 *         """
 *         cdef:
 *             str taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 *             ExchangeBase maker_market = market_pair.maker.market
 *             ExchangeBase taker_market = market_pair.taker.market
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1405, __pyx_L1_error)
  __pyx_v_taker_trading_pair = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1406
 *         cdef:
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *             ExchangeBase taker_market = market_pair.taker.market
 *             object top_bid_price = s_decimal_nan
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1406, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1407
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             ExchangeBase maker_market = market_pair.maker.market
 *             ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *             object top_bid_price = s_decimal_nan
 *             object top_ask_price = s_decimal_nan
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1407, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1408
 *             ExchangeBase maker_market = market_pair.maker.market
 *             ExchangeBase taker_market = market_pair.taker.market
 *             object top_bid_price = s_decimal_nan             # <<<<<<<<<<<<<<
 *             object top_ask_price = s_decimal_nan
 *             object next_price_below_top_ask = s_decimal_nan
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_top_bid_price = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1409
 *             ExchangeBase taker_market = market_pair.taker.market
 *             object top_bid_price = s_decimal_nan
 *             object top_ask_price = s_decimal_nan             # <<<<<<<<<<<<<<
 *             object next_price_below_top_ask = s_decimal_nan
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_top_ask_price = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1410
 *             object top_bid_price = s_decimal_nan
 *             object top_ask_price = s_decimal_nan
 *             object next_price_below_top_ask = s_decimal_nan             # <<<<<<<<<<<<<<
 * 
 *         top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_next_price_below_top_ask = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1412
 *             object next_price_below_top_ask = s_decimal_nan
 * 
 *         top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                 self.get_taker_to_maker_conversion_rate()
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_top_bid_ask_from_price_samples(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1412, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 1412, __pyx_L1_error)
  }
  __Pyx_DECREF_SET(__pyx_v_top_bid_price, __pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_top_ask_price, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1414
 *         top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                 self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *         if is_bid:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1413, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_3,&__pyx_t_1,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1413, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_3,&__pyx_t_1,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 6) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1413, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1413
 * 
 *         top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 */
  __pyx_v_quote_pair = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate_source = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_quote_rate = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_base_pair = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_rate_source = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1416
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 *         if is_bid:             # <<<<<<<<<<<<<<
 *             if not Decimal.is_nan(top_bid_price):
 *                 # Calculate the next price above top bid
 */
  __pyx_t_10 = (__pyx_v_is_bid != 0);
  if (__pyx_t_10) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1417
 * 
 *         if is_bid:
 *             if not Decimal.is_nan(top_bid_price):             # <<<<<<<<<<<<<<
 *                 # Calculate the next price above top bid
 *                 price_quantum = maker_market.c_get_order_price_quantum(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_top_bid_price) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_top_bid_price);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1417, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = ((!__pyx_t_10) != 0);
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1420
 *                 # Calculate the next price above top bid
 *                 price_quantum = maker_market.c_get_order_price_quantum(
 *                     market_pair.maker.trading_pair,             # <<<<<<<<<<<<<<
 *                     top_bid_price
 *                 )
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 1420, __pyx_L1_error)

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1419
 *             if not Decimal.is_nan(top_bid_price):
 *                 # Calculate the next price above top bid
 *                 price_quantum = maker_market.c_get_order_price_quantum(             # <<<<<<<<<<<<<<
 *                     market_pair.maker.trading_pair,
 *                     top_bid_price
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_price_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_6), __pyx_v_top_bid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_price_quantum = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1423
 *                     top_bid_price
 *                 )
 *                 price_above_bid = (ceil(top_bid_price / price_quantum) + 1) * price_quantum             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ceil); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_v_top_bid_price, __pyx_v_price_quantum); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_v_price_quantum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_price_above_bid = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1417
 * 
 *         if is_bid:
 *             if not Decimal.is_nan(top_bid_price):             # <<<<<<<<<<<<<<
 *                 # Calculate the next price above top bid
 *                 price_quantum = maker_market.c_get_order_price_quantum(
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1425
 *                 price_above_bid = (ceil(top_bid_price / price_quantum) + 1) * price_quantum
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1426
 * 
 *             try:
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 *               else:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1426, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1426, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_RichCompare(__pyx_t_6, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1426, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_11) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1427
 *             try:
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price             # <<<<<<<<<<<<<<
 *               else:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, (size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 */
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_100);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Multiply(__pyx_v_size, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_vwap_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 0, __pyx_t_2)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1427, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_7)->result_price;
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_v_taker_price = __pyx_t_2;
          __pyx_t_2 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1426
 * 
 *             try:
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 *               else:
 */
          goto __pyx_L13;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1429
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 *               else:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, (size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1429, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1429, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1429, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_100);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1429, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1429, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1429, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Multiply(__pyx_v_size, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1429, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_vwap_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 0, __pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1429, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_7)->result_price;
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_v_taker_price = __pyx_t_6;
          __pyx_t_6 = 0;
        }
        __pyx_L13:;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1425
 *                 price_above_bid = (ceil(top_bid_price / price_quantum) + 1) * price_quantum
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
      }
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      goto __pyx_L12_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1432
 * 
 * 
 *             except ZeroDivisionError:             # <<<<<<<<<<<<<<
 * 
 *                 return s_decimal_nan
 */
      __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
      if (__pyx_t_15) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_market_making_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(0, 1432, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_2);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1434
 *             except ZeroDivisionError:
 * 
 *                 return s_decimal_nan             # <<<<<<<<<<<<<<
 * 
 *             # If quote assets are not same, convert them from taker's quote asset to maker's quote asset
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1434, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_r = __pyx_t_5;
        __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L10_except_return;
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1425
 *                 price_above_bid = (ceil(top_bid_price / price_quantum) + 1) * price_quantum
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      goto __pyx_L1_error;
      __pyx_L10_except_return:;
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      goto __pyx_L0;
      __pyx_L12_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1437
 * 
 *             # If quote assets are not same, convert them from taker's quote asset to maker's quote asset
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_11 = __pyx_t_10;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __pyx_t_16 = ((!__pyx_t_10) != 0);
    __pyx_t_11 = __pyx_t_16;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1438
 *             # If quote assets are not same, convert them from taker's quote asset to maker's quote asset
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()             # <<<<<<<<<<<<<<
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 *                 taker_price /= self._third_market.get_mid_price()
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_taker_price, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1437
 * 
 *             # If quote assets are not same, convert them from taker's quote asset to maker's quote asset
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1439
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price /= self._third_market.get_mid_price()
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_16) {
    } else {
      __pyx_t_11 = __pyx_t_16;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __pyx_t_11 = __pyx_t_16;
    __pyx_L20_bool_binop_done:;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1440
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 *                 taker_price /= self._third_market.get_mid_price()             # <<<<<<<<<<<<<<
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price *= self.market_conversion_rate()
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_taker_price, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1439
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price /= self._third_market.get_mid_price()
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1441
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 *                 taker_price /= self._third_market.get_mid_price()
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1442
 *                 taker_price /= self._third_market.get_mid_price()
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price *= self.market_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *             # you are buying on the maker market and selling on the taker market
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_InPlaceMultiply(__pyx_v_taker_price, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1441
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 *                 taker_price /= self._third_market.get_mid_price()
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1445
 * 
 *             # you are buying on the maker market and selling on the taker market
 *             maker_price = taker_price / (1 + self._min_profitability)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_min_profitability, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_v_taker_price, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_maker_price = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1449
 * 
 *             # # If your bid is higher than highest bid price, reduce it to one tick above the top bid price
 *             if self._adjust_orders_enabled:             # <<<<<<<<<<<<<<
 *                 # If maker bid order book is not empty
 *                 if not Decimal.is_nan(price_above_bid):
 */
    __pyx_t_11 = (__pyx_v_self->_adjust_orders_enabled != 0);
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1451
 *             if self._adjust_orders_enabled:
 *                 # If maker bid order book is not empty
 *                 if not Decimal.is_nan(price_above_bid):             # <<<<<<<<<<<<<<
 *                     maker_price = min(maker_price, price_above_bid)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_v_price_above_bid)) { __Pyx_RaiseUnboundLocalError("price_above_bid"); __PYX_ERR(0, 1451, __pyx_L1_error) }
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_price_above_bid) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_price_above_bid);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1451, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_16 = ((!__pyx_t_11) != 0);
      if (__pyx_t_16) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1452
 *                 # If maker bid order book is not empty
 *                 if not Decimal.is_nan(price_above_bid):
 *                     maker_price = min(maker_price, price_above_bid)             # <<<<<<<<<<<<<<
 * 
 *             price_quantum = maker_market.c_get_order_price_quantum(
 */
        if (unlikely(!__pyx_v_price_above_bid)) { __Pyx_RaiseUnboundLocalError("price_above_bid"); __PYX_ERR(0, 1452, __pyx_L1_error) }
        __Pyx_INCREF(__pyx_v_price_above_bid);
        __pyx_t_7 = __pyx_v_price_above_bid;
        __Pyx_INCREF(__pyx_v_maker_price);
        __pyx_t_6 = __pyx_v_maker_price;
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1452, __pyx_L1_error)
        __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1452, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_16) {
          __Pyx_INCREF(__pyx_t_7);
          __pyx_t_2 = __pyx_t_7;
        } else {
          __Pyx_INCREF(__pyx_t_6);
          __pyx_t_2 = __pyx_t_6;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __pyx_t_2;
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF_SET(__pyx_v_maker_price, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1451
 *             if self._adjust_orders_enabled:
 *                 # If maker bid order book is not empty
 *                 if not Decimal.is_nan(price_above_bid):             # <<<<<<<<<<<<<<
 *                     maker_price = min(maker_price, price_above_bid)
 * 
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1449
 * 
 *             # # If your bid is higher than highest bid price, reduce it to one tick above the top bid price
 *             if self._adjust_orders_enabled:             # <<<<<<<<<<<<<<
 *                 # If maker bid order book is not empty
 *                 if not Decimal.is_nan(price_above_bid):
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1455
 * 
 *             price_quantum = maker_market.c_get_order_price_quantum(
 *                 market_pair.maker.trading_pair,             # <<<<<<<<<<<<<<
 *                 maker_price
 *             )
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1455, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1454
 *                     maker_price = min(maker_price, price_above_bid)
 * 
 *             price_quantum = maker_market.c_get_order_price_quantum(             # <<<<<<<<<<<<<<
 *                 market_pair.maker.trading_pair,
 *                 maker_price
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_price_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_2), __pyx_v_maker_price); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_price_quantum, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1460
 * 
 *             # Rounds down for ensuring profitability
 *             maker_price = (floor(maker_price / price_quantum)) * price_quantum             # <<<<<<<<<<<<<<
 * 
 *             return maker_price
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_floor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_maker_price, __pyx_v_price_quantum); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_7, __pyx_v_price_quantum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_maker_price, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1462
 *             maker_price = (floor(maker_price / price_quantum)) * price_quantum
 * 
 *             return maker_price             # <<<<<<<<<<<<<<
 *         else:
 *             if not Decimal.is_nan(top_ask_price):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_maker_price);
    __pyx_r = __pyx_v_maker_price;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1416
 *                 self.get_taker_to_maker_conversion_rate()
 * 
 *         if is_bid:             # <<<<<<<<<<<<<<
 *             if not Decimal.is_nan(top_bid_price):
 *                 # Calculate the next price above top bid
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1464
 *             return maker_price
 *         else:
 *             if not Decimal.is_nan(top_ask_price):             # <<<<<<<<<<<<<<
 *                 # Calculate the next price below top ask
 *                 price_quantum = maker_market.c_get_order_price_quantum(
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_top_ask_price) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_top_ask_price);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1464, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = ((!__pyx_t_16) != 0);
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1467
 *                 # Calculate the next price below top ask
 *                 price_quantum = maker_market.c_get_order_price_quantum(
 *                     market_pair.maker.trading_pair,             # <<<<<<<<<<<<<<
 *                     top_ask_price
 *                 )
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 1467, __pyx_L1_error)

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1466
 *             if not Decimal.is_nan(top_ask_price):
 *                 # Calculate the next price below top ask
 *                 price_quantum = maker_market.c_get_order_price_quantum(             # <<<<<<<<<<<<<<
 *                     market_pair.maker.trading_pair,
 *                     top_ask_price
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_price_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_6), __pyx_v_top_ask_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1466, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_price_quantum = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1470
 *                     top_ask_price
 *                 )
 *                 next_price_below_top_ask = (floor(top_ask_price / price_quantum) - 1) * price_quantum             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_floor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_v_top_ask_price, __pyx_v_price_quantum); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_v_price_quantum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_next_price_below_top_ask, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1464
 *             return maker_price
 *         else:
 *             if not Decimal.is_nan(top_ask_price):             # <<<<<<<<<<<<<<
 *                 # Calculate the next price below top ask
 *                 price_quantum = maker_market.c_get_order_price_quantum(
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1472
 *                 next_price_below_top_ask = (floor(top_ask_price / price_quantum) - 1) * price_quantum
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1473
 * 
 *             try:
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 *               else:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1473, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1473, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1473, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1473, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_RichCompare(__pyx_t_6, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1473, __pyx_L26_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1473, __pyx_L26_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_11) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1474
 *             try:
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price             # <<<<<<<<<<<<<<
 *               else:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, (size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 */
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_100);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Multiply(__pyx_v_size, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_vwap_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 1, __pyx_t_2)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1474, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_7)->result_price;
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_v_taker_price = __pyx_t_2;
          __pyx_t_2 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1473
 * 
 *             try:
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 *               else:
 */
          goto __pyx_L32;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1476
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 *               else:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, (size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price             # <<<<<<<<<<<<<<
 * 
 *             except ZeroDivisionError:
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1476, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1476, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1476, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_100);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1476, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1476, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1476, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Multiply(__pyx_v_size, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1476, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_vwap_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 1, __pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1476, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_7)->result_price;
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_v_taker_price = __pyx_t_6;
          __pyx_t_6 = 0;
        }
        __pyx_L32:;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1472
 *                 next_price_below_top_ask = (floor(top_ask_price / price_quantum) - 1) * price_quantum
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
      }
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L31_try_end;
      __pyx_L26_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1478
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, (size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 * 
 *             except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                 return s_decimal_nan
 * 
 */
      __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
      if (__pyx_t_15) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_market_making_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(0, 1478, __pyx_L28_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_2);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1479
 * 
 *             except ZeroDivisionError:
 *                 return s_decimal_nan             # <<<<<<<<<<<<<<
 * 
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset:
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1479, __pyx_L28_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_r = __pyx_t_5;
        __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L29_except_return;
      }
      goto __pyx_L28_except_error;
      __pyx_L28_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1472
 *                 next_price_below_top_ask = (floor(top_ask_price / price_quantum) - 1) * price_quantum
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
      goto __pyx_L1_error;
      __pyx_L29_except_return:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
      goto __pyx_L0;
      __pyx_L31_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1481
 *                 return s_decimal_nan
 * 
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1482
 * 
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset:
 *                 taker_price *= self.market_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_taker_price, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1481
 *                 return s_decimal_nan
 * 
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1484
 *                 taker_price *= self.market_conversion_rate()
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1485
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price *= self.market_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *             # You are selling on the maker market and buying on the taker market
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1485, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1485, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_InPlaceMultiply(__pyx_v_taker_price, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1485, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1484
 *                 taker_price *= self.market_conversion_rate()
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1488
 * 
 *             # You are selling on the maker market and buying on the taker market
 *             maker_price = taker_price * (1 + self._min_profitability)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_min_profitability, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyNumber_Multiply(__pyx_v_taker_price, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_maker_price = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1492
 * 
 *             # If your ask is lower than the the top ask, increase it to just one tick below top ask
 *             if self._adjust_orders_enabled:             # <<<<<<<<<<<<<<
 *                 # If maker ask order book is not empty
 *                 if not Decimal.is_nan(next_price_below_top_ask):
 */
    __pyx_t_11 = (__pyx_v_self->_adjust_orders_enabled != 0);
    if (__pyx_t_11) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1494
 *             if self._adjust_orders_enabled:
 *                 # If maker ask order book is not empty
 *                 if not Decimal.is_nan(next_price_below_top_ask):             # <<<<<<<<<<<<<<
 *                     maker_price = max(maker_price, next_price_below_top_ask)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_v_next_price_below_top_ask) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_next_price_below_top_ask);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1494, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_16 = ((!__pyx_t_11) != 0);
      if (__pyx_t_16) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1495
 *                 # If maker ask order book is not empty
 *                 if not Decimal.is_nan(next_price_below_top_ask):
 *                     maker_price = max(maker_price, next_price_below_top_ask)             # <<<<<<<<<<<<<<
 * 
 *             price_quantum = maker_market.c_get_order_price_quantum(
 */
        __Pyx_INCREF(__pyx_v_next_price_below_top_ask);
        __pyx_t_6 = __pyx_v_next_price_below_top_ask;
        __Pyx_INCREF(__pyx_v_maker_price);
        __pyx_t_2 = __pyx_v_maker_price;
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1495, __pyx_L1_error)
        __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1495, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_16) {
          __Pyx_INCREF(__pyx_t_6);
          __pyx_t_7 = __pyx_t_6;
        } else {
          __Pyx_INCREF(__pyx_t_2);
          __pyx_t_7 = __pyx_t_2;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __pyx_t_7;
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_maker_price, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1494
 *             if self._adjust_orders_enabled:
 *                 # If maker ask order book is not empty
 *                 if not Decimal.is_nan(next_price_below_top_ask):             # <<<<<<<<<<<<<<
 *                     maker_price = max(maker_price, next_price_below_top_ask)
 * 
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1492
 * 
 *             # If your ask is lower than the the top ask, increase it to just one tick below top ask
 *             if self._adjust_orders_enabled:             # <<<<<<<<<<<<<<
 *                 # If maker ask order book is not empty
 *                 if not Decimal.is_nan(next_price_below_top_ask):
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1498
 * 
 *             price_quantum = maker_market.c_get_order_price_quantum(
 *                 market_pair.maker.trading_pair,             # <<<<<<<<<<<<<<
 *                 maker_price
 *             )
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1498, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1497
 *                     maker_price = max(maker_price, next_price_below_top_ask)
 * 
 *             price_quantum = maker_market.c_get_order_price_quantum(             # <<<<<<<<<<<<<<
 *                 market_pair.maker.trading_pair,
 *                 maker_price
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_price_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_7), __pyx_v_maker_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_price_quantum, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1503
 * 
 *             # Rounds up for ensuring profitability
 *             maker_price = (ceil(maker_price / price_quantum)) * price_quantum             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ceil); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_maker_price, __pyx_v_price_quantum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_6, __pyx_v_price_quantum); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_maker_price, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1506
 * 
 * 
 *             return maker_price             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_maker_price);
    __pyx_r = __pyx_v_maker_price;
    goto __pyx_L0;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1389
 *             return maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, Decimal(order_amount))
 * 
 *     cdef object c_get_market_making_price(self,             # <<<<<<<<<<<<<<
 *                                           object market_pair,
 *                                           bint is_bid,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_market_making_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_top_bid_price);
  __Pyx_XDECREF(__pyx_v_top_ask_price);
  __Pyx_XDECREF(__pyx_v_next_price_below_top_ask);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_price_quantum);
  __Pyx_XDECREF(__pyx_v_price_above_bid);
  __Pyx_XDECREF(__pyx_v_taker_price);
  __Pyx_XDECREF(__pyx_v_maker_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1510
 * 
 * 
 *     cdef object c_calculate_effective_hedging_price(self,             # <<<<<<<<<<<<<<
 *                                                     object market_pair,
 *                                                     bint is_bid,
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_calculate_effective_hedging_price(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_bid, PyObject *__pyx_v_size) {
  PyObject *__pyx_v_taker_trading_pair = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quote_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate_source = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_v_taker_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_calculate_effective_hedging_price", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1521
 *         """
 *         cdef:
 *             str taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 *             ExchangeBase taker_market = market_pair.taker.market
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1521, __pyx_L1_error)
  __pyx_v_taker_trading_pair = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1522
 *         cdef:
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                   self.get_taker_to_maker_conversion_rate()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1522, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1524
 *             ExchangeBase taker_market = market_pair.taker.market
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *                   self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 *         # Calculate the next price from the top, and the order size limit.
 *         if is_bid:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1523, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1523, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 6) < 0) __PYX_ERR(0, 1523, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1523, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1523
 *             str taker_trading_pair = market_pair.taker.trading_pair
 *             ExchangeBase taker_market = market_pair.taker.market
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *                   self.get_taker_to_maker_conversion_rate()
 *         # Calculate the next price from the top, and the order size limit.
 */
  __pyx_v_quote_pair = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_base_pair = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_rate_source = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1526
 *                   self.get_taker_to_maker_conversion_rate()
 *         # Calculate the next price from the top, and the order size limit.
 *         if is_bid:             # <<<<<<<<<<<<<<
 *             try:
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:
 */
  __pyx_t_10 = (__pyx_v_is_bid != 0);
  if (__pyx_t_10) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1527
 *         # Calculate the next price from the top, and the order size limit.
 *         if is_bid:
 *             try:             # <<<<<<<<<<<<<<
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1528
 *         if is_bid:
 *             try:
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1528, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1528, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1528, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1528, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1528, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1528, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_10) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1530
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price             # <<<<<<<<<<<<<<
 *                 else:
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, (Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 */
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_size) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_size);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_100);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyNumber_Multiply(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_vwap_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 0, __pyx_t_1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1530, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_7)->result_price;
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_v_taker_price = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1528
 *         if is_bid:
 *             try:
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
          goto __pyx_L12;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1532
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, ((Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 *                 else:
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, (Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price             # <<<<<<<<<<<<<<
 * 
 *             except ZeroDivisionError:
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_v_size) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_size);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_100);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyNumber_Add(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_vwap_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 0, __pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1532, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_5)->result_price;
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_taker_price = __pyx_t_6;
          __pyx_t_6 = 0;
        }
        __pyx_L12:;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1527
 *         # Calculate the next price from the top, and the order size limit.
 *         if is_bid:
 *             try:             # <<<<<<<<<<<<<<
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 */
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L11_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1534
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, False, (Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 * 
 *             except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
      if (__pyx_t_14) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_calculate_effective_hedging_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(0, 1534, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_1);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1535
 * 
 *             except ZeroDivisionError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             # If quote assets are not same, convert them from taker's quote asset to maker's quote asset
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L9_except_return;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1527
 *         # Calculate the next price from the top, and the order size limit.
 *         if is_bid:
 *             try:             # <<<<<<<<<<<<<<
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 */
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L9_except_return:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L0;
      __pyx_L11_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1538
 * 
 *             # If quote assets are not same, convert them from taker's quote asset to maker's quote asset
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_15) {
    } else {
      __pyx_t_10 = __pyx_t_15;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __pyx_t_16 = ((!__pyx_t_15) != 0);
    __pyx_t_10 = __pyx_t_16;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1539
 *             # If quote assets are not same, convert them from taker's quote asset to maker's quote asset
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()             # <<<<<<<<<<<<<<
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 *                 taker_price /= self._third_market.get_mid_price()
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_taker_price, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1538
 * 
 *             # If quote assets are not same, convert them from taker's quote asset to maker's quote asset
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1540
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price /= self._third_market.get_mid_price()
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_16) {
    } else {
      __pyx_t_10 = __pyx_t_16;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __pyx_t_10 = __pyx_t_16;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1541
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 *                 taker_price /= self._third_market.get_mid_price()             # <<<<<<<<<<<<<<
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_taker_price, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1540
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price /= self._third_market.get_mid_price()
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1543
 *                 taker_price /= self._third_market.get_mid_price()
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1544
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price *= self.market_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *             return taker_price
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_v_taker_price, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1543
 *                 taker_price /= self._third_market.get_mid_price()
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1546
 *                 taker_price *= self.market_conversion_rate()
 * 
 *             return taker_price             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_taker_price);
    __pyx_r = __pyx_v_taker_price;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1526
 *                   self.get_taker_to_maker_conversion_rate()
 *         # Calculate the next price from the top, and the order size limit.
 *         if is_bid:             # <<<<<<<<<<<<<<
 *             try:
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1549
 * 
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 * 
 */
  /*else*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1552
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 * 
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1552, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1552, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L22_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1552, __pyx_L22_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_10) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1554
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price             # <<<<<<<<<<<<<<
 *                 else:
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, (Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 */
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_size) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_size);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_100);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_vwap_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 1, __pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1554, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_5)->result_price;
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_taker_price = __pyx_t_1;
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1552
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 * 
 *                 if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 */
          goto __pyx_L28;
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1556
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, ((Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))*self.market_conversion_rate())).result_price
 *                 else:
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, (Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price             # <<<<<<<<<<<<<<
 * 
 *             except ZeroDivisionError:
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_7, __pyx_v_size) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_size);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_100);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_vwap_for_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 1, __pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1556, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_7)->result_price;
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_v_taker_price = __pyx_t_6;
          __pyx_t_6 = 0;
        }
        __pyx_L28:;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1549
 * 
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 * 
 */
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L27_try_end;
      __pyx_L22_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1558
 *                   taker_price = taker_market.c_get_vwap_for_volume(taker_trading_pair, True, (Decimal(size)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 * 
 *             except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
      if (__pyx_t_14) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_calculate_effective_hedging_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_1) < 0) __PYX_ERR(0, 1558, __pyx_L24_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_1);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1559
 * 
 *             except ZeroDivisionError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L25_except_return;
      }
      goto __pyx_L24_except_error;
      __pyx_L24_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1549
 * 
 *         else:
 *             try:             # <<<<<<<<<<<<<<
 *                 #self.notify_hb_app(str(size*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100)))))
 * 
 */
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L25_except_return:;
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      goto __pyx_L0;
      __pyx_L27_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1561
 *                 return None
 * 
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_16) {
    } else {
      __pyx_t_10 = __pyx_t_16;
      goto __pyx_L32_bool_binop_done;
    }
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1561, __pyx_L1_error)
    __pyx_t_15 = ((!__pyx_t_16) != 0);
    __pyx_t_10 = __pyx_t_15;
    __pyx_L32_bool_binop_done:;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1562
 * 
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()             # <<<<<<<<<<<<<<
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 *                 taker_price /= self._third_market.get_mid_price()
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_taker_price, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1561
 *                 return None
 * 
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1563
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price /= self._third_market.get_mid_price()
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_15) {
    } else {
      __pyx_t_10 = __pyx_t_15;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_self->_triangular_switch); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __pyx_t_10 = __pyx_t_15;
    __pyx_L35_bool_binop_done:;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1564
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:
 *                 taker_price /= self._third_market.get_mid_price()             # <<<<<<<<<<<<<<
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_third_market, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_taker_price, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1563
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and not self._triangular_switch:
 *                 taker_price *= self._third_market.get_mid_price()
 *             if market_pair.maker.quote_asset != market_pair.taker.quote_asset and self._triangular_switch:             # <<<<<<<<<<<<<<
 *                 taker_price /= self._third_market.get_mid_price()
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1566
 *                 taker_price /= self._third_market.get_mid_price()
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1567
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:
 *                 taker_price *= self.market_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *             return taker_price
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_v_taker_price, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_taker_price, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1566
 *                 taker_price /= self._third_market.get_mid_price()
 * 
 *             if market_pair.maker.base_asset != market_pair.taker.base_asset:             # <<<<<<<<<<<<<<
 *                 taker_price *= self.market_conversion_rate()
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1569
 *                 taker_price *= self.market_conversion_rate()
 * 
 *             return taker_price             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple c_get_suggested_price_samples(self, object market_pair):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_taker_price);
    __pyx_r = __pyx_v_taker_price;
    goto __pyx_L0;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1510
 * 
 * 
 *     cdef object c_calculate_effective_hedging_price(self,             # <<<<<<<<<<<<<<
 *                                                     object market_pair,
 *                                                     bint is_bid,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_calculate_effective_hedging_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_taker_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1571
 *             return taker_price
 * 
 *     cdef tuple c_get_suggested_price_samples(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Get the queues of order book price samples for a market pair.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_suggested_price_samples(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_suggested_price_samples", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1578
 *         :return: (bid order price samples, ask order price samples)
 *         """
 *         if market_pair in self._suggested_price_samples:             # <<<<<<<<<<<<<<
 *             return self._suggested_price_samples[market_pair]
 *         return deque(), deque()
 */
  if (unlikely(__pyx_v_self->_suggested_price_samples == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1578, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_market_pair, __pyx_v_self->_suggested_price_samples, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1579
 *         """
 *         if market_pair in self._suggested_price_samples:
 *             return self._suggested_price_samples[market_pair]             # <<<<<<<<<<<<<<
 *         return deque(), deque()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->_suggested_price_samples == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1579, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->_suggested_price_samples, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 1579, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1578
 *         :return: (bid order price samples, ask order price samples)
 *         """
 *         if market_pair in self._suggested_price_samples:             # <<<<<<<<<<<<<<
 *             return self._suggested_price_samples[market_pair]
 *         return deque(), deque()
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1580
 *         if market_pair in self._suggested_price_samples:
 *             return self._suggested_price_samples[market_pair]
 *         return deque(), deque()             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple c_get_top_bid_ask(self, object market_pair):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_deque); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_deque); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1571
 *             return taker_price
 * 
 *     cdef tuple c_get_suggested_price_samples(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Get the queues of order book price samples for a market pair.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_suggested_price_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1582
 *         return deque(), deque()
 * 
 *     cdef tuple c_get_top_bid_ask(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the top bid and ask using top depth tolerance in maker order book
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_top_bid_ask(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_v_trading_pair = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  PyObject *__pyx_v_top_bid_price = NULL;
  PyObject *__pyx_v_top_ask_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_top_bid_ask", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1590
 *         """
 *         cdef:
 *             str trading_pair = market_pair.maker.trading_pair             # <<<<<<<<<<<<<<
 *             ExchangeBase maker_market = market_pair.maker.market
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1590, __pyx_L1_error)
  __pyx_v_trading_pair = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1591
 *         cdef:
 *             str trading_pair = market_pair.maker.trading_pair
 *             ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 * 
 *         if self._top_depth_tolerance == 0:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1591, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1593
 *             ExchangeBase maker_market = market_pair.maker.market
 * 
 *         if self._top_depth_tolerance == 0:             # <<<<<<<<<<<<<<
 *             top_bid_price = maker_market.c_get_price(trading_pair, False)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_self->_top_depth_tolerance, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1594
 * 
 *         if self._top_depth_tolerance == 0:
 *             top_bid_price = maker_market.c_get_price(trading_pair, False)             # <<<<<<<<<<<<<<
 * 
 *             top_ask_price = maker_market.c_get_price(trading_pair, True)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), __pyx_v_trading_pair, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_top_bid_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1596
 *             top_bid_price = maker_market.c_get_price(trading_pair, False)
 * 
 *             top_ask_price = maker_market.c_get_price(trading_pair, True)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), __pyx_v_trading_pair, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_top_ask_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1593
 *             ExchangeBase maker_market = market_pair.maker.market
 * 
 *         if self._top_depth_tolerance == 0:             # <<<<<<<<<<<<<<
 *             top_bid_price = maker_market.c_get_price(trading_pair, False)
 * 
 */
    goto __pyx_L3;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1600
 *         else:
 *             # Use bid entries in maker order book
 *             top_bid_price = maker_market.c_get_price_for_volume(trading_pair,             # <<<<<<<<<<<<<<
 *                                                                 False,
 *                                                                 self._top_depth_tolerance).result_price
 */
  /*else*/ {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1602
 *             top_bid_price = maker_market.c_get_price_for_volume(trading_pair,
 *                                                                 False,
 *                                                                 self._top_depth_tolerance).result_price             # <<<<<<<<<<<<<<
 *             #here we can add top depth_bias_switch
 *             # Use ask entries in maker order book
 */
    __pyx_t_1 = __pyx_v_self->_top_depth_tolerance;
    __Pyx_INCREF(__pyx_t_1);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1600
 *         else:
 *             # Use bid entries in maker order book
 *             top_bid_price = maker_market.c_get_price_for_volume(trading_pair,             # <<<<<<<<<<<<<<
 *                                                                 False,
 *                                                                 self._top_depth_tolerance).result_price
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_volume(__pyx_v_maker_market, __pyx_v_trading_pair, 0, __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1602
 *             top_bid_price = maker_market.c_get_price_for_volume(trading_pair,
 *                                                                 False,
 *                                                                 self._top_depth_tolerance).result_price             # <<<<<<<<<<<<<<
 *             #here we can add top depth_bias_switch
 *             # Use ask entries in maker order book
 */
    __pyx_t_1 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_2)->result_price;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_top_bid_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1607
 *             top_ask_price = maker_market.c_get_price_for_volume(trading_pair,
 *                                                                 True,
 *                                                                 self._top_depth_tolerance).result_price             # <<<<<<<<<<<<<<
 * 
 *         return top_bid_price, top_ask_price
 */
    __pyx_t_1 = __pyx_v_self->_top_depth_tolerance;
    __Pyx_INCREF(__pyx_t_1);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1605
 *             #here we can add top depth_bias_switch
 *             # Use ask entries in maker order book
 *             top_ask_price = maker_market.c_get_price_for_volume(trading_pair,             # <<<<<<<<<<<<<<
 *                                                                 True,
 *                                                                 self._top_depth_tolerance).result_price
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_volume(__pyx_v_maker_market, __pyx_v_trading_pair, 1, __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1607
 *             top_ask_price = maker_market.c_get_price_for_volume(trading_pair,
 *                                                                 True,
 *                                                                 self._top_depth_tolerance).result_price             # <<<<<<<<<<<<<<
 * 
 *         return top_bid_price, top_ask_price
 */
    __pyx_t_1 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_2)->result_price;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_top_ask_price = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1609
 *                                                                 self._top_depth_tolerance).result_price
 * 
 *         return top_bid_price, top_ask_price             # <<<<<<<<<<<<<<
 * 
 *     cdef c_take_suggested_price_sample(self, object market_pair):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_top_bid_price);
  __Pyx_GIVEREF(__pyx_v_top_bid_price);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_top_bid_price);
  __Pyx_INCREF(__pyx_v_top_ask_price);
  __Pyx_GIVEREF(__pyx_v_top_ask_price);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_top_ask_price);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1582
 *         return deque(), deque()
 * 
 *     cdef tuple c_get_top_bid_ask(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the top bid and ask using top depth tolerance in maker order book
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_top_bid_ask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF(__pyx_v_top_bid_price);
  __Pyx_XDECREF(__pyx_v_top_ask_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1611
 *         return top_bid_price, top_ask_price
 * 
 *     cdef c_take_suggested_price_sample(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Record the bid and ask sample queues.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_take_suggested_price_sample(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_v_top_bid_price = NULL;
  PyObject *__pyx_v_top_ask_price = NULL;
  PyObject *__pyx_v_bid_price_samples_deque = NULL;
  PyObject *__pyx_v_ask_price_samples_deque = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_take_suggested_price_sample", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1620
 *         :param market_pair: cross exchange market pair
 *         """
 *         if ((self._last_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL) <             # <<<<<<<<<<<<<<
 *                 (self._current_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL)):
 *             if market_pair not in self._suggested_price_samples:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_last_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_ADJUST_SAMPLE_INTERVAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_FloorDivide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1621
 *         """
 *         if ((self._last_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL) <
 *                 (self._current_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL)):             # <<<<<<<<<<<<<<
 *             if market_pair not in self._suggested_price_samples:
 *                 self._suggested_price_samples[market_pair] = (deque(), deque())
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_ADJUST_SAMPLE_INTERVAL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_FloorDivide(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1620
 *         :param market_pair: cross exchange market pair
 *         """
 *         if ((self._last_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL) <             # <<<<<<<<<<<<<<
 *                 (self._current_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL)):
 *             if market_pair not in self._suggested_price_samples:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1622
 *         if ((self._last_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL) <
 *                 (self._current_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL)):
 *             if market_pair not in self._suggested_price_samples:             # <<<<<<<<<<<<<<
 *                 self._suggested_price_samples[market_pair] = (deque(), deque())
 * 
 */
    if (unlikely(__pyx_v_self->_suggested_price_samples == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 1622, __pyx_L1_error)
    }
    __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_market_pair, __pyx_v_self->_suggested_price_samples, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1622, __pyx_L1_error)
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1623
 *                 (self._current_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL)):
 *             if market_pair not in self._suggested_price_samples:
 *                 self._suggested_price_samples[market_pair] = (deque(), deque())             # <<<<<<<<<<<<<<
 * 
 *             top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_deque); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_deque); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_4 = 0;
      if (unlikely(__pyx_v_self->_suggested_price_samples == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1623, __pyx_L1_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_self->_suggested_price_samples, __pyx_v_market_pair, __pyx_t_3) < 0)) __PYX_ERR(0, 1623, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1622
 *         if ((self._last_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL) <
 *                 (self._current_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL)):
 *             if market_pair not in self._suggested_price_samples:             # <<<<<<<<<<<<<<
 *                 self._suggested_price_samples[market_pair] = (deque(), deque())
 * 
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1625
 *                 self._suggested_price_samples[market_pair] = (deque(), deque())
 * 
 *             top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)             # <<<<<<<<<<<<<<
 * 
 *             bid_price_samples_deque, ask_price_samples_deque = self._suggested_price_samples[market_pair]
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_top_bid_ask_from_price_samples(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(__pyx_t_3 != Py_None)) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1625, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 1625, __pyx_L1_error)
    }
    __pyx_v_top_bid_price = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_top_ask_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1627
 *             top_bid_price, top_ask_price = self.c_get_top_bid_ask_from_price_samples(market_pair)
 * 
 *             bid_price_samples_deque, ask_price_samples_deque = self._suggested_price_samples[market_pair]             # <<<<<<<<<<<<<<
 *             bid_price_samples_deque.append(top_bid_price)
 *             ask_price_samples_deque.append(top_ask_price)
 */
    if (unlikely(__pyx_v_self->_suggested_price_samples == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1627, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->_suggested_price_samples, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1627, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_7(__pyx_t_2); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_4 = __pyx_t_7(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1627, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1627, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_v_bid_price_samples_deque = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_ask_price_samples_deque = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1628
 * 
 *             bid_price_samples_deque, ask_price_samples_deque = self._suggested_price_samples[market_pair]
 *             bid_price_samples_deque.append(top_bid_price)             # <<<<<<<<<<<<<<
 *             ask_price_samples_deque.append(top_ask_price)
 *             while len(bid_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:
 */
    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_bid_price_samples_deque, __pyx_v_top_bid_price); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1628, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1629
 *             bid_price_samples_deque, ask_price_samples_deque = self._suggested_price_samples[market_pair]
 *             bid_price_samples_deque.append(top_bid_price)
 *             ask_price_samples_deque.append(top_ask_price)             # <<<<<<<<<<<<<<
 *             while len(bid_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:
 *                 bid_price_samples_deque.popleft()
 */
    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_ask_price_samples_deque, __pyx_v_top_ask_price); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1629, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1630
 *             bid_price_samples_deque.append(top_bid_price)
 *             ask_price_samples_deque.append(top_ask_price)
 *             while len(bid_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:             # <<<<<<<<<<<<<<
 *                 bid_price_samples_deque.popleft()
 *             while len(ask_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:
 */
    while (1) {
      __pyx_t_9 = PyObject_Length(__pyx_v_bid_price_samples_deque); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1630, __pyx_L1_error)
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_ADJUST_SAMPLE_WINDOW); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1630, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1630, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_6) break;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1631
 *             ask_price_samples_deque.append(top_ask_price)
 *             while len(bid_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:
 *                 bid_price_samples_deque.popleft()             # <<<<<<<<<<<<<<
 *             while len(ask_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:
 *                 ask_price_samples_deque.popleft()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_bid_price_samples_deque, __pyx_n_s_popleft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1632
 *             while len(bid_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:
 *                 bid_price_samples_deque.popleft()
 *             while len(ask_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:             # <<<<<<<<<<<<<<
 *                 ask_price_samples_deque.popleft()
 * 
 */
    while (1) {
      __pyx_t_9 = PyObject_Length(__pyx_v_ask_price_samples_deque); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1632, __pyx_L1_error)
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_ADJUST_SAMPLE_WINDOW); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1632, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_6) break;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1633
 *                 bid_price_samples_deque.popleft()
 *             while len(ask_price_samples_deque) > self.ORDER_ADJUST_SAMPLE_WINDOW:
 *                 ask_price_samples_deque.popleft()             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple c_get_top_bid_ask_from_price_samples(self,
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ask_price_samples_deque, __pyx_n_s_popleft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1633, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1633, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1620
 *         :param market_pair: cross exchange market pair
 *         """
 *         if ((self._last_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL) <             # <<<<<<<<<<<<<<
 *                 (self._current_timestamp // self.ORDER_ADJUST_SAMPLE_INTERVAL)):
 *             if market_pair not in self._suggested_price_samples:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1611
 *         return top_bid_price, top_ask_price
 * 
 *     cdef c_take_suggested_price_sample(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Record the bid and ask sample queues.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_take_suggested_price_sample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_top_bid_price);
  __Pyx_XDECREF(__pyx_v_top_ask_price);
  __Pyx_XDECREF(__pyx_v_bid_price_samples_deque);
  __Pyx_XDECREF(__pyx_v_ask_price_samples_deque);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1648
 *         bid_price_samples, ask_price_samples = self.c_get_suggested_price_samples(market_pair)
 * 
 *         if not any(Decimal.is_nan(p) for p in bid_price_samples) and not Decimal.is_nan(current_top_bid_price):             # <<<<<<<<<<<<<<
 *             top_bid_price = max(list(bid_price_samples) + [current_top_bid_price])
 *         else:
 */

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *)__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1648, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_CrossExchangeMarketMakingStrateg, __pyx_n_s_hummingbot_strategy_cross_exchan); if (unlikely(!gen)) __PYX_ERR(0, 1648, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_top_bid_ask_from_price_samples.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1648, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bid_price_samples)) { __Pyx_RaiseClosureNameError("bid_price_samples"); __PYX_ERR(0, 1648, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bid_price_samples)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bid_price_samples)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_bid_price_samples; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bid_price_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1648, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1648, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1648, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1648, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_p);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_p, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_cur_scope->__pyx_v_p) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_cur_scope->__pyx_v_p);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1648, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_5generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1653
 *             top_bid_price = current_top_bid_price
 * 
 *         if not any(Decimal.is_nan(p) for p in ask_price_samples) and not Decimal.is_nan(current_top_ask_price):             # <<<<<<<<<<<<<<
 *             top_ask_price = min(list(ask_price_samples) + [current_top_ask_price])
 *         else:
 */

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *)__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1653, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_5generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_CrossExchangeMarketMakingStrateg, __pyx_n_s_hummingbot_strategy_cross_exchan); if (unlikely(!gen)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_top_bid_ask_from_price_samples.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_5generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1653, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ask_price_samples)) { __Pyx_RaiseClosureNameError("ask_price_samples"); __PYX_ERR(0, 1653, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ask_price_samples)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ask_price_samples)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_ask_price_samples; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ask_price_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1653, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1653, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1653, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1653, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1653, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_p);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_p, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_cur_scope->__pyx_v_p) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_cur_scope->__pyx_v_p);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_7) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1635
 *                 ask_price_samples_deque.popleft()
 * 
 *     cdef tuple c_get_top_bid_ask_from_price_samples(self,             # <<<<<<<<<<<<<<
 *                                                     object market_pair):
 *         """
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_top_bid_ask_from_price_samples(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *__pyx_cur_scope;
  PyObject *__pyx_v_current_top_bid_price = NULL;
  PyObject *__pyx_v_current_top_ask_price = NULL;
  PyObject *__pyx_v_top_bid_price = NULL;
  PyObject *__pyx_v_top_ask_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_top_bid_ask_from_price_samples", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *)__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1635, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1644
 *         """
 *         # Incorporate the past bid & ask price samples.
 *         current_top_bid_price, current_top_ask_price = self.c_get_top_bid_ask(market_pair)             # <<<<<<<<<<<<<<
 * 
 *         bid_price_samples, ask_price_samples = self.c_get_suggested_price_samples(market_pair)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_top_bid_ask(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1644, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 1644, __pyx_L1_error)
  }
  __pyx_v_current_top_bid_price = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_current_top_ask_price = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1646
 *         current_top_bid_price, current_top_ask_price = self.c_get_top_bid_ask(market_pair)
 * 
 *         bid_price_samples, ask_price_samples = self.c_get_suggested_price_samples(market_pair)             # <<<<<<<<<<<<<<
 * 
 *         if not any(Decimal.is_nan(p) for p in bid_price_samples) and not Decimal.is_nan(current_top_bid_price):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_suggested_price_samples(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1646, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 1646, __pyx_L1_error)
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_bid_price_samples = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_ask_price_samples = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1648
 *         bid_price_samples, ask_price_samples = self.c_get_suggested_price_samples(market_pair)
 * 
 *         if not any(Decimal.is_nan(p) for p in bid_price_samples) and not Decimal.is_nan(current_top_bid_price):             # <<<<<<<<<<<<<<
 *             top_bid_price = max(list(bid_price_samples) + [current_top_bid_price])
 *         else:
 */
  __pyx_t_1 = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = ((!__pyx_t_5) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_v_current_top_bid_price) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_current_top_bid_price);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = ((!__pyx_t_6) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1649
 * 
 *         if not any(Decimal.is_nan(p) for p in bid_price_samples) and not Decimal.is_nan(current_top_bid_price):
 *             top_bid_price = max(list(bid_price_samples) + [current_top_bid_price])             # <<<<<<<<<<<<<<
 *         else:
 *             top_bid_price = current_top_bid_price
 */
    __pyx_t_2 = PySequence_List(__pyx_cur_scope->__pyx_v_bid_price_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_current_top_bid_price);
    __Pyx_GIVEREF(__pyx_v_current_top_bid_price);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_current_top_bid_price);
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_top_bid_price = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1648
 *         bid_price_samples, ask_price_samples = self.c_get_suggested_price_samples(market_pair)
 * 
 *         if not any(Decimal.is_nan(p) for p in bid_price_samples) and not Decimal.is_nan(current_top_bid_price):             # <<<<<<<<<<<<<<
 *             top_bid_price = max(list(bid_price_samples) + [current_top_bid_price])
 *         else:
 */
    goto __pyx_L3;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1651
 *             top_bid_price = max(list(bid_price_samples) + [current_top_bid_price])
 *         else:
 *             top_bid_price = current_top_bid_price             # <<<<<<<<<<<<<<
 * 
 *         if not any(Decimal.is_nan(p) for p in ask_price_samples) and not Decimal.is_nan(current_top_ask_price):
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_current_top_bid_price);
    __pyx_v_top_bid_price = __pyx_v_current_top_bid_price;
  }
  __pyx_L3:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1653
 *             top_bid_price = current_top_bid_price
 * 
 *         if not any(Decimal.is_nan(p) for p in ask_price_samples) and not Decimal.is_nan(current_top_ask_price):             # <<<<<<<<<<<<<<
 *             top_ask_price = min(list(ask_price_samples) + [current_top_ask_price])
 *         else:
 */
  __pyx_t_3 = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36c_get_top_bid_ask_from_price_samples_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_Generator_Next(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = ((!__pyx_t_5) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L7_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_current_top_ask_price) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_current_top_ask_price);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = ((!__pyx_t_6) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_4) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1654
 * 
 *         if not any(Decimal.is_nan(p) for p in ask_price_samples) and not Decimal.is_nan(current_top_ask_price):
 *             top_ask_price = min(list(ask_price_samples) + [current_top_ask_price])             # <<<<<<<<<<<<<<
 *         else:
 *             top_ask_price = current_top_ask_price
 */
    __pyx_t_1 = PySequence_List(__pyx_cur_scope->__pyx_v_ask_price_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_current_top_ask_price);
    __Pyx_GIVEREF(__pyx_v_current_top_ask_price);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_current_top_ask_price);
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_top_ask_price = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1653
 *             top_bid_price = current_top_bid_price
 * 
 *         if not any(Decimal.is_nan(p) for p in ask_price_samples) and not Decimal.is_nan(current_top_ask_price):             # <<<<<<<<<<<<<<
 *             top_ask_price = min(list(ask_price_samples) + [current_top_ask_price])
 *         else:
 */
    goto __pyx_L6;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1656
 *             top_ask_price = min(list(ask_price_samples) + [current_top_ask_price])
 *         else:
 *             top_ask_price = current_top_ask_price             # <<<<<<<<<<<<<<
 * 
 *         return top_bid_price, top_ask_price
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_current_top_ask_price);
    __pyx_v_top_ask_price = __pyx_v_current_top_ask_price;
  }
  __pyx_L6:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1658
 *             top_ask_price = current_top_ask_price
 * 
 *         return top_bid_price, top_ask_price             # <<<<<<<<<<<<<<
 * 
 *     cdef bint c_check_if_still_profitable(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_top_bid_price);
  __Pyx_GIVEREF(__pyx_v_top_bid_price);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_top_bid_price);
  __Pyx_INCREF(__pyx_v_top_ask_price);
  __Pyx_GIVEREF(__pyx_v_top_ask_price);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_top_ask_price);
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1635
 *                 ask_price_samples_deque.popleft()
 * 
 *     cdef tuple c_get_top_bid_ask_from_price_samples(self,             # <<<<<<<<<<<<<<
 *                                                     object market_pair):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_get_top_bid_ask_from_price_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_current_top_bid_price);
  __Pyx_XDECREF(__pyx_v_current_top_ask_price);
  __Pyx_XDECREF(__pyx_v_top_bid_price);
  __Pyx_XDECREF(__pyx_v_top_ask_price);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1660
 *         return top_bid_price, top_ask_price
 * 
 *     cdef bint c_check_if_still_profitable(self,             # <<<<<<<<<<<<<<
 *                                           object market_pair,
 *                                           LimitOrder active_order,
 */

static int __pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_still_profitable(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order, PyObject *__pyx_v_current_hedging_price) {
  int __pyx_v_is_buy;
  PyObject *__pyx_v_limit_order_type_str = 0;
  PyObject *__pyx_v_order_price = 0;
  PyObject *__pyx_v_cancel_order_threshold = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_check_if_still_profitable", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1677
 *         """
 *         cdef:
 *             bint is_buy = active_order.is_buy             # <<<<<<<<<<<<<<
 *             str limit_order_type_str = "bid" if is_buy else "ask"
 *             object order_price = active_order.price
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_is_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_is_buy = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1678
 *         cdef:
 *             bint is_buy = active_order.is_buy
 *             str limit_order_type_str = "bid" if is_buy else "ask"             # <<<<<<<<<<<<<<
 *             object order_price = active_order.price
 *             object cancel_order_threshold
 */
  if ((__pyx_v_is_buy != 0)) {
    __Pyx_INCREF(__pyx_n_u_bid);
    __pyx_t_1 = __pyx_n_u_bid;
  } else {
    __Pyx_INCREF(__pyx_n_u_ask);
    __pyx_t_1 = __pyx_n_u_ask;
  }
  __pyx_v_limit_order_type_str = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1679
 *             bint is_buy = active_order.is_buy
 *             str limit_order_type_str = "bid" if is_buy else "ask"
 *             object order_price = active_order.price             # <<<<<<<<<<<<<<
 *             object cancel_order_threshold
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1682
 *             object cancel_order_threshold
 * 
 *         if not self._active_order_canceling:             # <<<<<<<<<<<<<<
 *             cancel_order_threshold = self._cancel_order_threshold
 *         else:
 */
  __pyx_t_2 = ((!(__pyx_v_self->_active_order_canceling != 0)) != 0);
  if (__pyx_t_2) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1683
 * 
 *         if not self._active_order_canceling:
 *             cancel_order_threshold = self._cancel_order_threshold             # <<<<<<<<<<<<<<
 *         else:
 *             cancel_order_threshold = self._min_profitability
 */
    __pyx_t_1 = __pyx_v_self->_cancel_order_threshold;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_cancel_order_threshold = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1682
 *             object cancel_order_threshold
 * 
 *         if not self._active_order_canceling:             # <<<<<<<<<<<<<<
 *             cancel_order_threshold = self._cancel_order_threshold
 *         else:
 */
    goto __pyx_L3;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1685
 *             cancel_order_threshold = self._cancel_order_threshold
 *         else:
 *             cancel_order_threshold = self._min_profitability             # <<<<<<<<<<<<<<
 * 
 *         if current_hedging_price is None:
 */
  /*else*/ {
    __pyx_t_1 = __pyx_v_self->_min_profitability;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_cancel_order_threshold = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1687
 *             cancel_order_threshold = self._min_profitability
 * 
 *         if current_hedging_price is None:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:
 *                 self.log_with_clock(
 */
  __pyx_t_2 = (__pyx_v_current_hedging_price == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1688
 * 
 *         if current_hedging_price is None:
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
    __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_REMOVING_ORDER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_And(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1689
 *         if current_hedging_price is None:
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1690
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "
 *                     f"{order_price:.8g} {market_pair.maker.quote_asset} is no longer profitable. "
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_INFO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1691
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "             # <<<<<<<<<<<<<<
 *                     f"{order_price:.8g} {market_pair.maker.quote_asset} is no longer profitable. "
 *                     f"Removing the order."
 */
      __pyx_t_1 = PyTuple_New(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = 0;
      __pyx_t_8 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__24);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u_Limit);
      __pyx_t_7 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_Limit);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Limit);
      __pyx_t_9 = __Pyx_PyUnicode_Unicode(__pyx_v_limit_order_type_str); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u_order_at);
      __pyx_t_7 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_order_at);
      PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_order_at);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1692
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "
 *                     f"{order_price:.8g} {market_pair.maker.quote_asset} is no longer profitable. "             # <<<<<<<<<<<<<<
 *                     f"Removing the order."
 *                 )
 */
      __pyx_t_9 = __Pyx_PyObject_Format(__pyx_v_order_price, __pyx_kp_u_8g); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__23);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_no_longer_profitable_Removin);
      __pyx_t_7 += 45;
      __Pyx_GIVEREF(__pyx_kp_u_is_no_longer_profitable_Removin);
      PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_is_no_longer_profitable_Removin);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1691
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "             # <<<<<<<<<<<<<<
 *                     f"{order_price:.8g} {market_pair.maker.quote_asset} is no longer profitable. "
 *                     f"Removing the order."
 */
      __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_1, 9, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_6, __pyx_t_9};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1689, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_6, __pyx_t_9};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1689, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_9);
        __pyx_t_6 = 0;
        __pyx_t_9 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1688
 * 
 *         if current_hedging_price is None:
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1695
 *                     f"Removing the order."
 *                 )
 *             self.c_cancel_order(market_pair, active_order.client_order_id)             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 1695, __pyx_L1_error)
    __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, ((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1696
 *                 )
 *             self.c_cancel_order(market_pair, active_order.client_order_id)
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         if ((is_buy and current_hedging_price < order_price * (1 + cancel_order_threshold)) or
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1687
 *             cancel_order_threshold = self._min_profitability
 * 
 *         if current_hedging_price is None:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:
 *                 self.log_with_clock(
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1698
 *             return False
 * 
 *         if ((is_buy and current_hedging_price < order_price * (1 + cancel_order_threshold)) or             # <<<<<<<<<<<<<<
 *                 (not is_buy and order_price < current_hedging_price * (1 + cancel_order_threshold))):
 * 
 */
  __pyx_t_2 = (__pyx_v_is_buy != 0);
  if (!__pyx_t_2) {
    goto __pyx_L8_next_or;
  } else {
  }
  __pyx_t_4 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_cancel_order_threshold, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_order_price, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_current_hedging_price, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_L8_next_or:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1699
 * 
 *         if ((is_buy and current_hedging_price < order_price * (1 + cancel_order_threshold)) or
 *                 (not is_buy and order_price < current_hedging_price * (1 + cancel_order_threshold))):             # <<<<<<<<<<<<<<
 * 
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:
 */
  __pyx_t_2 = ((!(__pyx_v_is_buy != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_cancel_order_threshold, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_current_hedging_price, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_order_price, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1698
 *             return False
 * 
 *         if ((is_buy and current_hedging_price < order_price * (1 + cancel_order_threshold)) or             # <<<<<<<<<<<<<<
 *                 (not is_buy and order_price < current_hedging_price * (1 + cancel_order_threshold))):
 * 
 */
  if (__pyx_t_3) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1701
 *                 (not is_buy and order_price < current_hedging_price * (1 + cancel_order_threshold))):
 * 
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
    __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_REMOVING_ORDER); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = PyNumber_And(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__pyx_t_3) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1702
 * 
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1702, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1703
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "
 *                     f"{order_price:.8g} {market_pair.maker.quote_asset} is no longer profitable. "
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1704
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "             # <<<<<<<<<<<<<<
 *                     f"{order_price:.8g} {market_pair.maker.quote_asset} is no longer profitable. "
 *                     f"Removing the order."
 */
      __pyx_t_4 = PyTuple_New(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = 0;
      __pyx_t_8 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u__24);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_Limit);
      __pyx_t_7 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_Limit);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Limit);
      __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_limit_order_type_str); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_order_at);
      __pyx_t_7 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_order_at);
      PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_order_at);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1705
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "
 *                     f"{order_price:.8g} {market_pair.maker.quote_asset} is no longer profitable. "             # <<<<<<<<<<<<<<
 *                     f"Removing the order."
 *                 )
 */
      __pyx_t_6 = __Pyx_PyObject_Format(__pyx_v_order_price, __pyx_kp_u_8g); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__23);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__23);
      PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__23);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_no_longer_profitable_Removin);
      __pyx_t_7 += 45;
      __Pyx_GIVEREF(__pyx_kp_u_is_no_longer_profitable_Removin);
      PyTuple_SET_ITEM(__pyx_t_4, 8, __pyx_kp_u_is_no_longer_profitable_Removin);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1704
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Limit {limit_order_type_str} order at "             # <<<<<<<<<<<<<<
 *                     f"{order_price:.8g} {market_pair.maker.quote_asset} is no longer profitable. "
 *                     f"Removing the order."
 */
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 9, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_9, __pyx_t_6};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1702, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_9, __pyx_t_6};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1702, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_11, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_11, __pyx_t_6);
        __pyx_t_9 = 0;
        __pyx_t_6 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1701
 *                 (not is_buy and order_price < current_hedging_price * (1 + cancel_order_threshold))):
 * 
 *             if self._logging_options & self.OPTION_LOG_REMOVING_ORDER:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1708
 *                     f"Removing the order."
 *                 )
 *             self.c_cancel_order(market_pair, active_order.client_order_id)             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 1708, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, ((PyObject*)__pyx_t_10)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1709
 *                 )
 *             self.c_cancel_order(market_pair, active_order.client_order_id)
 *             return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1698
 *             return False
 * 
 *         if ((is_buy and current_hedging_price < order_price * (1 + cancel_order_threshold)) or             # <<<<<<<<<<<<<<
 *                 (not is_buy and order_price < current_hedging_price * (1 + cancel_order_threshold))):
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1710
 *             self.c_cancel_order(market_pair, active_order.client_order_id)
 *             return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef bint c_check_if_sufficient_balance(self, object market_pair, LimitOrder active_order): #could be changed by the eralier code in lenes 884
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1660
 *         return top_bid_price, top_ask_price
 * 
 *     cdef bint c_check_if_still_profitable(self,             # <<<<<<<<<<<<<<
 *                                           object market_pair,
 *                                           LimitOrder active_order,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_if_still_profitable", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_limit_order_type_str);
  __Pyx_XDECREF(__pyx_v_order_price);
  __Pyx_XDECREF(__pyx_v_cancel_order_threshold);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1712
 *         return True
 * 
 *     cdef bint c_check_if_sufficient_balance(self, object market_pair, LimitOrder active_order): #could be changed by the eralier code in lenes 884             # <<<<<<<<<<<<<<
 *         """
 *         Check whether there's enough asset balance for a currently active limit order. If there's not enough asset
 */

static int __pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_sufficient_balance(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_active_order) {
  int __pyx_v_is_buy;
  CYTHON_UNUSED PyObject *__pyx_v_order_price = 0;
  PyObject *__pyx_v_user_order = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_taker_trading_pair = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quote_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_taker_slippage_adjustment_factor = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_maker_balance_in_quote = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_taker_price = NULL;
  PyObject *__pyx_v_taker_balance = NULL;
  PyObject *__pyx_v_order_amount = NULL;
  PyObject *__pyx_v_quantized_size_limit = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  double __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_UCS4 __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_check_if_sufficient_balance", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1725
 *         """
 *         cdef:
 *             bint is_buy = active_order.is_buy             # <<<<<<<<<<<<<<
 *             object order_price = active_order.price
 *             object user_order = self.c_get_adjusted_limit_order_size(market_pair)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_is_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_is_buy = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1726
 *         cdef:
 *             bint is_buy = active_order.is_buy
 *             object order_price = active_order.price             # <<<<<<<<<<<<<<
 *             object user_order = self.c_get_adjusted_limit_order_size(market_pair)
 *             ExchangeBase maker_market = market_pair.maker.market
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1727
 *             bint is_buy = active_order.is_buy
 *             object order_price = active_order.price
 *             object user_order = self.c_get_adjusted_limit_order_size(market_pair)             # <<<<<<<<<<<<<<
 *             ExchangeBase maker_market = market_pair.maker.market
 *             ExchangeBase taker_market = market_pair.taker.market
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_adjusted_limit_order_size(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_user_order = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1728
 *             object order_price = active_order.price
 *             object user_order = self.c_get_adjusted_limit_order_size(market_pair)
 *             ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *             ExchangeBase taker_market = market_pair.taker.market
 *             object order_size_limit
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1728, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1729
 *             object user_order = self.c_get_adjusted_limit_order_size(market_pair)
 *             ExchangeBase maker_market = market_pair.maker.market
 *             ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *             object order_size_limit
 *             str taker_trading_pair = market_pair.taker.trading_pair
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1729, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1731
 *             ExchangeBase taker_market = market_pair.taker.market
 *             object order_size_limit
 *             str taker_trading_pair = market_pair.taker.trading_pair             # <<<<<<<<<<<<<<
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 1731, __pyx_L1_error)
  __pyx_v_taker_trading_pair = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1734
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 * 
 *         if is_buy: #active order is a buy, check if there is enough sell balance on taker
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1733, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_1,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1733, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_1,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
    __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 6) < 0) __PYX_ERR(0, 1733, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1733, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1733
 *             str taker_trading_pair = market_pair.taker.trading_pair
 * 
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *             self.get_taker_to_maker_conversion_rate()
 * 
 */
  __pyx_v_quote_pair = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_quote_rate_source = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_quote_rate = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_pair = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate_source = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_base_rate = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1736
 *             self.get_taker_to_maker_conversion_rate()
 * 
 *         if is_buy: #active order is a buy, check if there is enough sell balance on taker             # <<<<<<<<<<<<<<
 * 
 *             taker_slippage_adjustment_factor = Decimal("1") - self._slippage_buffer
 */
  __pyx_t_2 = (__pyx_v_is_buy != 0);
  if (__pyx_t_2) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1738
 *         if is_buy: #active order is a buy, check if there is enough sell balance on taker
 * 
 *             taker_slippage_adjustment_factor = Decimal("1") - self._slippage_buffer             # <<<<<<<<<<<<<<
 * 
 *             maker_balance_in_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_1);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_3, __pyx_v_self->_slippage_buffer); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_taker_slippage_adjustment_factor = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1740
 *             taker_slippage_adjustment_factor = Decimal("1") - self._slippage_buffer
 * 
 *             maker_balance_in_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)             # <<<<<<<<<<<<<<
 * 
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 1740, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_maker_balance_in_quote = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1742
 *             maker_balance_in_quote = maker_market.c_get_available_balance(market_pair.maker.quote_asset)
 * 
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)             # <<<<<<<<<<<<<<
 *             #had to be converted to base rate for taker_price calculations
 * 
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_adjusted_limit_order_size(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_user_order, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1745
 *             #had to be converted to base rate for taker_price calculations
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, ((user_order/base_rate)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1746
 * 
 *             try:
 *               taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, ((user_order/base_rate)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price             # <<<<<<<<<<<<<<
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero
 */
        __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_user_order, __pyx_v_base_rate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_int_1);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_100);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Add(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Multiply(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_quote_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 0, __pyx_t_14)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1746, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_6)->result_price;
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_taker_price = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1745
 *             #had to be converted to base rate for taker_price calculations
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, ((user_order/base_rate)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:
 */
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L11_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1747
 *             try:
 *               taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, ((user_order/base_rate)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                 assert user_order == s_decimal_zero
 *                 return s_decimal_zero
 */
      __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
      if (__pyx_t_15) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_if_sufficient_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_6, &__pyx_t_8) < 0) __PYX_ERR(0, 1747, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_8);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1748
 *               taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, ((user_order/base_rate)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero             # <<<<<<<<<<<<<<
 *                 return s_decimal_zero
 * 
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1748, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_5 = PyObject_RichCompare(__pyx_v_user_order, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1748, __pyx_L8_except_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1748, __pyx_L8_except_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_2)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 1748, __pyx_L8_except_error)
          }
        }
        #endif

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1749
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero
 *                 return s_decimal_zero             # <<<<<<<<<<<<<<
 * 
 *             #Base converion: taker balance is in BTC, multiply this by the taker price, then you have an usdt amount you can buy, then convert the usdt to an FRONT amount. needs to be converted to an FRONT amount (maker to taker = * rate) (taker to maker = / rate)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1749, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1749, __pyx_L8_except_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __pyx_t_2;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_except_return;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1745
 *             #had to be converted to base rate for taker_price calculations
 * 
 *             try:             # <<<<<<<<<<<<<<
 *               taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, False, ((user_order/base_rate)*(Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:
 */
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L9_except_return:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L0;
      __pyx_L11_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1753
 *             #Base converion: taker balance is in BTC, multiply this by the taker price, then you have an usdt amount you can buy, then convert the usdt to an FRONT amount. needs to be converted to an FRONT amount (maker to taker = * rate) (taker to maker = / rate)
 *             # quote converions: taker balance in SHR is the max sellable, convert this to
 *             taker_balance = ((taker_market.c_get_available_balance(market_pair.taker.base_asset) * \             # <<<<<<<<<<<<<<
 *                                 self._order_size_taker_balance_factor) * base_rate)
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 1753, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_6)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1754
 *             # quote converions: taker balance in SHR is the max sellable, convert this to
 *             taker_balance = ((taker_market.c_get_available_balance(market_pair.taker.base_asset) * \
 *                                 self._order_size_taker_balance_factor) * base_rate)             # <<<<<<<<<<<<<<
 * 
 *             order_amount = min(taker_balance, user_order)
 */
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_8, __pyx_v_self->_order_size_taker_balance_factor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Multiply(__pyx_t_6, __pyx_v_base_rate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_taker_balance = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1756
 *                                 self._order_size_taker_balance_factor) * base_rate)
 * 
 *             order_amount = min(taker_balance, user_order)             # <<<<<<<<<<<<<<
 * 
 *             quantized_size_limit = maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, order_amount)
 */
    __Pyx_INCREF(__pyx_v_user_order);
    __pyx_t_8 = __pyx_v_user_order;
    __Pyx_INCREF(__pyx_v_taker_balance);
    __pyx_t_6 = __pyx_v_taker_balance;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_8, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1756, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1756, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_7 = __pyx_t_8;
    } else {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = __pyx_t_6;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __pyx_t_7;
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_order_amount = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1758
 *             order_amount = min(taker_balance, user_order)
 * 
 *             quantized_size_limit = maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, order_amount)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1758, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_7), __pyx_v_order_amount, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_quantized_size_limit = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1736
 *             self.get_taker_to_maker_conversion_rate()
 * 
 *         if is_buy: #active order is a buy, check if there is enough sell balance on taker             # <<<<<<<<<<<<<<
 * 
 *             taker_slippage_adjustment_factor = Decimal("1") - self._slippage_buffer
 */
    goto __pyx_L5;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1762
 * 
 *         else: #active order is a sell, check if there is enough buy balance on taker
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
  /*else*/ {
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_adjusted_limit_order_size(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_user_order, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1764
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, ((user_order/base_rate) * (Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1765
 * 
 *             try:
 *                 taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, ((user_order/base_rate) * (Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price             # <<<<<<<<<<<<<<
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero
 */
        __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_v_user_order, __pyx_v_base_rate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_1);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_int_100) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_100);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_self->_top_depth_tolerance_taker, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_quote_volume(__pyx_v_taker_market, __pyx_v_taker_trading_pair, 1, __pyx_t_14)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1765, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_5)->result_price;
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_taker_price = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1764
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, ((user_order/base_rate) * (Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:
 */
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L19_try_end;
      __pyx_L14_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1766
 *             try:
 *                 taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, ((user_order/base_rate) * (Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:             # <<<<<<<<<<<<<<
 *                 assert user_order == s_decimal_zero
 *                 return s_decimal_zero
 */
      __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ZeroDivisionError);
      if (__pyx_t_15) {
        __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_if_sufficient_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_8) < 0) __PYX_ERR(0, 1766, __pyx_L16_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_8);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1767
 *                 taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, ((user_order/base_rate) * (Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero             # <<<<<<<<<<<<<<
 *                 return s_decimal_zero
 * 
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1767, __pyx_L16_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = PyObject_RichCompare(__pyx_v_user_order, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1767, __pyx_L16_except_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1767, __pyx_L16_except_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 1767, __pyx_L16_except_error)
          }
        }
        #endif

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1768
 *             except ZeroDivisionError:
 *                 assert user_order == s_decimal_zero
 *                 return s_decimal_zero             # <<<<<<<<<<<<<<
 * 
 *             taker_slippage_adjustment_factor = Decimal("1") + self._slippage_buffer
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1768, __pyx_L16_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1768, __pyx_L16_except_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L17_except_return;
      }
      goto __pyx_L16_except_error;
      __pyx_L16_except_error:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1764
 *             user_order = self.c_get_adjusted_limit_order_size(market_pair)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 taker_price = taker_market.c_get_price_for_quote_volume(taker_trading_pair, True, ((user_order/base_rate) * (Decimal(1)+(self._top_depth_tolerance_taker/Decimal(100))))).result_price
 *             except ZeroDivisionError:
 */
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L17_except_return:;
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      goto __pyx_L0;
      __pyx_L19_try_end:;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1770
 *                 return s_decimal_zero
 * 
 *             taker_slippage_adjustment_factor = Decimal("1") + self._slippage_buffer             # <<<<<<<<<<<<<<
 *             taker_balance = (((taker_market.c_get_available_balance(market_pair.taker.quote_asset) * \
 *                 self._order_size_taker_balance_factor) / (self.c_calculate_effective_hedging_price(market_pair, False, Decimal(user_order)))) * quote_rate)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_8 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_u_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_1);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_8, __pyx_v_self->_slippage_buffer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_taker_slippage_adjustment_factor = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1771
 * 
 *             taker_slippage_adjustment_factor = Decimal("1") + self._slippage_buffer
 *             taker_balance = (((taker_market.c_get_available_balance(market_pair.taker.quote_asset) * \             # <<<<<<<<<<<<<<
 *                 self._order_size_taker_balance_factor) / (self.c_calculate_effective_hedging_price(market_pair, False, Decimal(user_order)))) * quote_rate)
 *             order_amount = min(taker_balance, user_order)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_8)->tp_name), 0))) __PYX_ERR(0, 1771, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_8)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1772
 *             taker_slippage_adjustment_factor = Decimal("1") + self._slippage_buffer
 *             taker_balance = (((taker_market.c_get_available_balance(market_pair.taker.quote_asset) * \
 *                 self._order_size_taker_balance_factor) / (self.c_calculate_effective_hedging_price(market_pair, False, Decimal(user_order)))) * quote_rate)             # <<<<<<<<<<<<<<
 *             order_amount = min(taker_balance, user_order)
 *             quantized_size_limit = maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, order_amount)
 */
    __pyx_t_8 = PyNumber_Multiply(__pyx_t_5, __pyx_v_self->_order_size_taker_balance_factor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_user_order) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_user_order);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __pyx_v_quote_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_taker_balance = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1773
 *             taker_balance = (((taker_market.c_get_available_balance(market_pair.taker.quote_asset) * \
 *                 self._order_size_taker_balance_factor) / (self.c_calculate_effective_hedging_price(market_pair, False, Decimal(user_order)))) * quote_rate)
 *             order_amount = min(taker_balance, user_order)             # <<<<<<<<<<<<<<
 *             quantized_size_limit = maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, order_amount)
 * 
 */
    __Pyx_INCREF(__pyx_v_user_order);
    __pyx_t_6 = __pyx_v_user_order;
    __Pyx_INCREF(__pyx_v_taker_balance);
    __pyx_t_5 = __pyx_v_taker_balance;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1773, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_8 = __pyx_t_6;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_8 = __pyx_t_5;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_t_8;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_order_amount = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1774
 *                 self._order_size_taker_balance_factor) / (self.c_calculate_effective_hedging_price(market_pair, False, Decimal(user_order)))) * quote_rate)
 *             order_amount = min(taker_balance, user_order)
 *             quantized_size_limit = maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, order_amount)             # <<<<<<<<<<<<<<
 * 
 *         if active_order.quantity > quantized_size_limit:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_8)->tp_name), 0))) __PYX_ERR(0, 1774, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_8), __pyx_v_order_amount, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_quantized_size_limit = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __pyx_L5:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1776
 *             quantized_size_limit = maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, order_amount)
 * 
 *         if active_order.quantity > quantized_size_limit:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                 self.log_with_clock(
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_quantity); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_6, __pyx_v_quantized_size_limit, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_2) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1777
 * 
 *         if active_order.quantity > quantized_size_limit:
 *             if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
    __pyx_t_8 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_ADJUST_ORDER); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_And(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1778
 *         if active_order.quantity > quantized_size_limit:
 *             if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                 self.log_with_clock(             # <<<<<<<<<<<<<<
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Order size limit ({quantized_size_limit}) "
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1779
 *             if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                 self.log_with_clock(
 *                     logging.INFO,             # <<<<<<<<<<<<<<
 *                     f"({market_pair.maker.trading_pair}) Order size limit ({quantized_size_limit}) "
 *                     f"is now less than the current active order amount ({active_order.quantity:.10g}). "
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_logging); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_INFO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1780
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Order size limit ({quantized_size_limit}) "             # <<<<<<<<<<<<<<
 *                     f"is now less than the current active order amount ({active_order.quantity:.10g}). "
 *                     f"Going to adjust the order. Taker_balance calculation {taker_balance}, taker balance in quote: {(taker_market.c_get_available_balance(market_pair.taker.quote_asset) * self._order_size_taker_balance_factor)}, Order size taker balance factor{self._order_size_taker_balance_factor} user order: {user_order}, effective hedging price {(self.c_calculate_effective_hedging_price(market_pair, False, user_order) * (1 + self._min_profitability))} ."
 */
      __pyx_t_8 = PyTuple_New(17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_16 = 0;
      __pyx_t_17 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_16 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u__24);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_17;
      __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u_Order_size_limit);
      __pyx_t_16 += 20;
      __Pyx_GIVEREF(__pyx_kp_u_Order_size_limit);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_Order_size_limit);
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_quantized_size_limit, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_17;
      __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u_is_now_less_than_the_current_ac);
      __pyx_t_16 += 52;
      __Pyx_GIVEREF(__pyx_kp_u_is_now_less_than_the_current_ac);
      PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u_is_now_less_than_the_current_ac);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1781
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Order size limit ({quantized_size_limit}) "
 *                     f"is now less than the current active order amount ({active_order.quantity:.10g}). "             # <<<<<<<<<<<<<<
 *                     f"Going to adjust the order. Taker_balance calculation {taker_balance}, taker balance in quote: {(taker_market.c_get_available_balance(market_pair.taker.quote_asset) * self._order_size_taker_balance_factor)}, Order size taker balance factor{self._order_size_taker_balance_factor} user order: {user_order}, effective hedging price {(self.c_calculate_effective_hedging_price(market_pair, False, user_order) * (1 + self._min_profitability))} ."
 *                 )
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_quantity); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_7, __pyx_kp_u_10g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_17;
      __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_Going_to_adjust_the_order_Taker);
      __pyx_t_16 += 56;
      __Pyx_GIVEREF(__pyx_kp_u_Going_to_adjust_the_order_Taker);
      PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_kp_u_Going_to_adjust_the_order_Taker);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1782
 *                     f"({market_pair.maker.trading_pair}) Order size limit ({quantized_size_limit}) "
 *                     f"is now less than the current active order amount ({active_order.quantity:.10g}). "
 *                     f"Going to adjust the order. Taker_balance calculation {taker_balance}, taker balance in quote: {(taker_market.c_get_available_balance(market_pair.taker.quote_asset) * self._order_size_taker_balance_factor)}, Order size taker balance factor{self._order_size_taker_balance_factor} user order: {user_order}, effective hedging price {(self.c_calculate_effective_hedging_price(market_pair, False, user_order) * (1 + self._min_profitability))} ."             # <<<<<<<<<<<<<<
 *                 )
 *             self.c_cancel_order(market_pair, active_order.client_order_id)
 */
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_taker_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_17;
      __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 7, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_taker_balance_in_quote);
      __pyx_t_16 += 26;
      __Pyx_GIVEREF(__pyx_kp_u_taker_balance_in_quote);
      PyTuple_SET_ITEM(__pyx_t_8, 8, __pyx_kp_u_taker_balance_in_quote);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 1782, __pyx_L1_error)
      __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_7)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Multiply(__pyx_t_4, __pyx_v_self->_order_size_taker_balance_factor); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_17;
      __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 9, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_Order_size_taker_balance_factor);
      __pyx_t_16 += 33;
      __Pyx_GIVEREF(__pyx_kp_u_Order_size_taker_balance_factor);
      PyTuple_SET_ITEM(__pyx_t_8, 10, __pyx_kp_u_Order_size_taker_balance_factor);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_order_size_taker_balance_factor, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_17;
      __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 11, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_user_order);
      __pyx_t_16 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_user_order);
      PyTuple_SET_ITEM(__pyx_t_8, 12, __pyx_kp_u_user_order);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_user_order, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_17;
      __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 13, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_effective_hedging_price);
      __pyx_t_16 += 26;
      __Pyx_GIVEREF(__pyx_kp_u_effective_hedging_price);
      PyTuple_SET_ITEM(__pyx_t_8, 14, __pyx_kp_u_effective_hedging_price);
      __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_v_user_order); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_min_profitability, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_17 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_17) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_17;
      __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 15, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u__27);
      __pyx_t_16 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__27);
      PyTuple_SET_ITEM(__pyx_t_8, 16, __pyx_kp_u__27);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1780
 *                 self.log_with_clock(
 *                     logging.INFO,
 *                     f"({market_pair.maker.trading_pair}) Order size limit ({quantized_size_limit}) "             # <<<<<<<<<<<<<<
 *                     f"is now less than the current active order amount ({active_order.quantity:.10g}). "
 *                     f"Going to adjust the order. Taker_balance calculation {taker_balance}, taker balance in quote: {(taker_market.c_get_available_balance(market_pair.taker.quote_asset) * self._order_size_taker_balance_factor)}, Order size taker balance factor{self._order_size_taker_balance_factor} user order: {user_order}, effective hedging price {(self.c_calculate_effective_hedging_price(market_pair, False, user_order) * (1 + self._min_profitability))} ."
 */
      __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_8, 17, __pyx_t_16, __pyx_t_17); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1780, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_15 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_15 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_3, __pyx_t_7};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1778, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_3, __pyx_t_7};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1778, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_15, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_15, __pyx_t_7);
        __pyx_t_3 = 0;
        __pyx_t_7 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1777
 * 
 *         if active_order.quantity > quantized_size_limit:
 *             if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(
 *                     logging.INFO,
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1784
 *                     f"Going to adjust the order. Taker_balance calculation {taker_balance}, taker balance in quote: {(taker_market.c_get_available_balance(market_pair.taker.quote_asset) * self._order_size_taker_balance_factor)}, Order size taker balance factor{self._order_size_taker_balance_factor} user order: {user_order}, effective hedging price {(self.c_calculate_effective_hedging_price(market_pair, False, user_order) * (1 + self._min_profitability))} ."
 *                 )
 *             self.c_cancel_order(market_pair, active_order.client_order_id)             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_active_order), __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 1784, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, ((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1785
 *                 )
 *             self.c_cancel_order(market_pair, active_order.client_order_id)
 *             return False             # <<<<<<<<<<<<<<
 *         else:
 *             return True
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1776
 *             quantized_size_limit = maker_market.c_quantize_order_amount(market_pair.maker.trading_pair, order_amount)
 * 
 *         if active_order.quantity > quantized_size_limit:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_ADJUST_ORDER:
 *                 self.log_with_clock(
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1787
 *             return False
 *         else:
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     cdef c_place_top_maker(self, market_pair):
 */
  /*else*/ {
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1712
 *         return True
 * 
 *     cdef bint c_check_if_sufficient_balance(self, object market_pair, LimitOrder active_order): #could be changed by the eralier code in lenes 884             # <<<<<<<<<<<<<<
 *         """
 *         Check whether there's enough asset balance for a currently active limit order. If there's not enough asset
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_if_sufficient_balance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_price);
  __Pyx_XDECREF(__pyx_v_user_order);
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_taker_trading_pair);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_taker_slippage_adjustment_factor);
  __Pyx_XDECREF(__pyx_v_maker_balance_in_quote);
  __Pyx_XDECREF(__pyx_v_taker_price);
  __Pyx_XDECREF(__pyx_v_taker_balance);
  __Pyx_XDECREF(__pyx_v_order_amount);
  __Pyx_XDECREF(__pyx_v_quantized_size_limit);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1789
 *             return True
 * 
 *     cdef c_place_top_maker(self, market_pair):             # <<<<<<<<<<<<<<
 *       cdef:
 *         ExchangeBase maker_market = market_pair.maker.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_top_maker(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_maker_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_taker_market = 0;
  PyObject *__pyx_v_total_base_balance = 0;
  PyObject *__pyx_v_pref_base_min_actual = 0;
  PyObject *__pyx_v_order_size_base = 0;
  PyObject *__pyx_v_top_bid_price = NULL;
  PyObject *__pyx_v_top_ask_price = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_market_tuple = NULL;
  PyObject *__pyx_v_limit_orders = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_place_top_maker", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1791
 *     cdef c_place_top_maker(self, market_pair):
 *       cdef:
 *         ExchangeBase maker_market = market_pair.maker.market             # <<<<<<<<<<<<<<
 *         ExchangeBase taker_market = market_pair.taker.market
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1791, __pyx_L1_error)
  __pyx_v_maker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1792
 *       cdef:
 *         ExchangeBase maker_market = market_pair.maker.market
 *         ExchangeBase taker_market = market_pair.taker.market             # <<<<<<<<<<<<<<
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *         object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1792, __pyx_L1_error)
  __pyx_v_taker_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1793
 *         ExchangeBase maker_market = market_pair.maker.market
 *         ExchangeBase taker_market = market_pair.taker.market
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)             # <<<<<<<<<<<<<<
 *         object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *         object order_size_base = abs(pref_base_min_actual)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1793, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_taker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_taker_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 1793, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_maker_market), ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_total_base_balance = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1794
 *         ExchangeBase taker_market = market_pair.taker.market
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *         object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)             # <<<<<<<<<<<<<<
 *         object order_size_base = abs(pref_base_min_actual)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_target_base_balance, __pyx_v_total_base_balance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pref_base_min_actual = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1795
 *         object total_base_balance = taker_market.c_get_balance(market_pair.taker.base_asset) + maker_market.c_get_balance(market_pair.maker.base_asset)
 *         object pref_base_min_actual = Decimal(self._target_base_balance - total_base_balance)
 *         object order_size_base = abs(pref_base_min_actual)             # <<<<<<<<<<<<<<
 * 
 *       if self._maker_order_update:
 */
  __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_v_pref_base_min_actual); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_order_size_base = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1797
 *         object order_size_base = abs(pref_base_min_actual)
 * 
 *       if self._maker_order_update:             # <<<<<<<<<<<<<<
 *         top_bid_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,
 *                                                             False,
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_self->_maker_order_update); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1797, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1798
 * 
 *       if self._maker_order_update:
 *         top_bid_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,             # <<<<<<<<<<<<<<
 *                                                             False,
 *                                                             self._top_depth_tolerance).result_price
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1798, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1800
 *         top_bid_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,
 *                                                             False,
 *                                                             self._top_depth_tolerance).result_price             # <<<<<<<<<<<<<<
 *         #here we can add top depth_bias_switch
 *         # Use ask entries in maker order book
 */
    __pyx_t_3 = __pyx_v_self->_top_depth_tolerance;
    __Pyx_INCREF(__pyx_t_3);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1798
 * 
 *       if self._maker_order_update:
 *         top_bid_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,             # <<<<<<<<<<<<<<
 *                                                             False,
 *                                                             self._top_depth_tolerance).result_price
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_volume(__pyx_v_maker_market, ((PyObject*)__pyx_t_2), 0, __pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1800
 *         top_bid_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,
 *                                                             False,
 *                                                             self._top_depth_tolerance).result_price             # <<<<<<<<<<<<<<
 *         #here we can add top depth_bias_switch
 *         # Use ask entries in maker order book
 */
    __pyx_t_3 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_1)->result_price;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_top_bid_price = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1803
 *         #here we can add top depth_bias_switch
 *         # Use ask entries in maker order book
 *         top_ask_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,             # <<<<<<<<<<<<<<
 *                                                             True,
 *                                                             self._top_depth_tolerance).result_price
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 1803, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1805
 *         top_ask_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,
 *                                                             True,
 *                                                             self._top_depth_tolerance).result_price             # <<<<<<<<<<<<<<
 * 
 *         market_tuple = market_pair.maker
 */
    __pyx_t_3 = __pyx_v_self->_top_depth_tolerance;
    __Pyx_INCREF(__pyx_t_3);

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1803
 *         #here we can add top depth_bias_switch
 *         # Use ask entries in maker order book
 *         top_ask_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,             # <<<<<<<<<<<<<<
 *                                                             True,
 *                                                             self._top_depth_tolerance).result_price
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_maker_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_price_for_volume(__pyx_v_maker_market, ((PyObject*)__pyx_t_1), 1, __pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1805
 *         top_ask_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,
 *                                                             True,
 *                                                             self._top_depth_tolerance).result_price             # <<<<<<<<<<<<<<
 * 
 *         market_tuple = market_pair.maker
 */
    __pyx_t_3 = ((struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *)__pyx_t_2)->result_price;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_top_ask_price = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1807
 *                                                             self._top_depth_tolerance).result_price
 * 
 *         market_tuple = market_pair.maker             # <<<<<<<<<<<<<<
 *         limit_orders = self._sb_order_tracker.c_get_limit_orders()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_market_tuple = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1808
 * 
 *         market_tuple = market_pair.maker
 *         limit_orders = self._sb_order_tracker.c_get_limit_orders()             # <<<<<<<<<<<<<<
 * 
 *         if self._current_timestamp > self._top_maker_cancel_timer:
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_orders(__pyx_v_self->__pyx_base._sb_order_tracker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_limit_orders = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1810
 *         limit_orders = self._sb_order_tracker.c_get_limit_orders()
 * 
 *         if self._current_timestamp > self._top_maker_cancel_timer:             # <<<<<<<<<<<<<<
 *           self.c_cancel_all_maker_limit_orders(market_pair)
 *           self.log_with_clock(
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_self->_top_maker_cancel_timer, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1810, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1810, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1811
 * 
 *         if self._current_timestamp > self._top_maker_cancel_timer:
 *           self.c_cancel_all_maker_limit_orders(market_pair)             # <<<<<<<<<<<<<<
 *           self.log_with_clock(
 *               logging.INFO,
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_all_maker_limit_orders(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1812
 *         if self._current_timestamp > self._top_maker_cancel_timer:
 *           self.c_cancel_all_maker_limit_orders(market_pair)
 *           self.log_with_clock(             # <<<<<<<<<<<<<<
 *               logging.INFO,
 *               f"timer over, cancelled all"
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1813
 *           self.c_cancel_all_maker_limit_orders(market_pair)
 *           self.log_with_clock(
 *               logging.INFO,             # <<<<<<<<<<<<<<
 *               f"timer over, cancelled all"
 *           )
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_INFO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, __pyx_kp_u_timer_over_cancelled_all};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1812, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, __pyx_kp_u_timer_over_cancelled_all};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1812, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1812, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
        __Pyx_INCREF(__pyx_kp_u_timer_over_cancelled_all);
        __Pyx_GIVEREF(__pyx_kp_u_timer_over_cancelled_all);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_kp_u_timer_over_cancelled_all);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1812, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1816
 *               f"timer over, cancelled all"
 *           )
 *           self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_self->_top_maker_cancel_seconds); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_top_maker_cancel_timer);
      __Pyx_DECREF(__pyx_v_self->_top_maker_cancel_timer);
      __pyx_v_self->_top_maker_cancel_timer = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1810
 *         limit_orders = self._sb_order_tracker.c_get_limit_orders()
 * 
 *         if self._current_timestamp > self._top_maker_cancel_timer:             # <<<<<<<<<<<<<<
 *           self.c_cancel_all_maker_limit_orders(market_pair)
 *           self.log_with_clock(
 */
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1819
 * 
 * 
 *         if len(limit_orders) > 1:             # <<<<<<<<<<<<<<
 *           self.c_cancel_all_maker_limit_orders(market_pair)
 *           self.log_with_clock(
 */
    if (unlikely(__pyx_v_limit_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1819, __pyx_L1_error)
    }
    __pyx_t_8 = PyDict_Size(__pyx_v_limit_orders); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1819, __pyx_L1_error)
    __pyx_t_5 = ((__pyx_t_8 > 1) != 0);
    if (__pyx_t_5) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1820
 * 
 *         if len(limit_orders) > 1:
 *           self.c_cancel_all_maker_limit_orders(market_pair)             # <<<<<<<<<<<<<<
 *           self.log_with_clock(
 *               logging.INFO,
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_all_maker_limit_orders(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1821
 *         if len(limit_orders) > 1:
 *           self.c_cancel_all_maker_limit_orders(market_pair)
 *           self.log_with_clock(             # <<<<<<<<<<<<<<
 *               logging.INFO,
 *               f"too many orders, cancelled all "
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1822
 *           self.c_cancel_all_maker_limit_orders(market_pair)
 *           self.log_with_clock(
 *               logging.INFO,             # <<<<<<<<<<<<<<
 *               f"too many orders, cancelled all "
 *           )
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_logging); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_INFO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_kp_u_too_many_orders_cancelled_all};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1821, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_4, __pyx_kp_u_too_many_orders_cancelled_all};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1821, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, __pyx_t_4);
        __Pyx_INCREF(__pyx_kp_u_too_many_orders_cancelled_all);
        __Pyx_GIVEREF(__pyx_kp_u_too_many_orders_cancelled_all);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, __pyx_kp_u_too_many_orders_cancelled_all);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1819
 * 
 * 
 *         if len(limit_orders) > 1:             # <<<<<<<<<<<<<<
 *           self.c_cancel_all_maker_limit_orders(market_pair)
 *           self.log_with_clock(
 */
      goto __pyx_L5;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1827
 * 
 *         else:
 *           if len(limit_orders) == 0 and pref_base_min_actual > 0: #need to buy             # <<<<<<<<<<<<<<
 *             self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(top_bid_price))
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 */
    /*else*/ {
      if (unlikely(__pyx_v_limit_orders == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 1827, __pyx_L1_error)
      }
      __pyx_t_8 = PyDict_Size(__pyx_v_limit_orders); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1827, __pyx_L1_error)
      __pyx_t_9 = ((__pyx_t_8 == 0) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_pref_base_min_actual, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_t_9;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1828
 *         else:
 *           if len(limit_orders) == 0 and pref_base_min_actual > 0: #need to buy
 *             self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(top_bid_price))             # <<<<<<<<<<<<<<
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 *             self.log_with_clock(
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_top_bid_price) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_top_bid_price);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_3, 0, __pyx_v_order_size_base, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1829
 *           if len(limit_orders) == 0 and pref_base_min_actual > 0: #need to buy
 *             self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(top_bid_price))
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds             # <<<<<<<<<<<<<<
 *             self.log_with_clock(
 *               logging.INFO,
 */
        __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1829, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_self->_top_maker_cancel_seconds); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1829, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GIVEREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_v_self->_top_maker_cancel_timer);
        __Pyx_DECREF(__pyx_v_self->_top_maker_cancel_timer);
        __pyx_v_self->_top_maker_cancel_timer = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1830
 *             self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(top_bid_price))
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 *             self.log_with_clock(             # <<<<<<<<<<<<<<
 *               logging.INFO,
 *               f"buy fixing maker order top bid {top_bid_price}, top_ask {top_ask_price} self._top_maker_cancel_timer{self._top_maker_cancel_timer} self._top_maker_cancel_seconds{self._top_maker_cancel_seconds} "
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1830, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1831
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 *             self.log_with_clock(
 *               logging.INFO,             # <<<<<<<<<<<<<<
 *               f"buy fixing maker order top bid {top_bid_price}, top_ask {top_ask_price} self._top_maker_cancel_timer{self._top_maker_cancel_timer} self._top_maker_cancel_seconds{self._top_maker_cancel_seconds} "
 *               )
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logging); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_INFO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1831, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1832
 *             self.log_with_clock(
 *               logging.INFO,
 *               f"buy fixing maker order top bid {top_bid_price}, top_ask {top_ask_price} self._top_maker_cancel_timer{self._top_maker_cancel_timer} self._top_maker_cancel_seconds{self._top_maker_cancel_seconds} "             # <<<<<<<<<<<<<<
 *               )
 * 
 */
        __pyx_t_3 = PyTuple_New(9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = 0;
        __pyx_t_10 = 127;
        __Pyx_INCREF(__pyx_kp_u_buy_fixing_maker_order_top_bid);
        __pyx_t_8 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_buy_fixing_maker_order_top_bid);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_buy_fixing_maker_order_top_bid);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_top_bid_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_top_ask);
        __pyx_t_8 += 10;
        __Pyx_GIVEREF(__pyx_kp_u_top_ask);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_top_ask);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_top_ask_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_self__top_maker_cancel_timer);
        __pyx_t_8 += 29;
        __Pyx_GIVEREF(__pyx_kp_u_self__top_maker_cancel_timer);
        PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_self__top_maker_cancel_timer);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_top_maker_cancel_timer, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u_self__top_maker_cancel_seconds);
        __pyx_t_8 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_self__top_maker_cancel_seconds);
        PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u_self__top_maker_cancel_seconds);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_top_maker_cancel_seconds, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_8 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_kp_u__23);
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 9, __pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1832, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_4, __pyx_t_7};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1830, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_4, __pyx_t_7};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1830, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_11 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1830, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (__pyx_t_3) {
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3); __pyx_t_3 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_6, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_6, __pyx_t_7);
          __pyx_t_4 = 0;
          __pyx_t_7 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1830, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1827
 * 
 *         else:
 *           if len(limit_orders) == 0 and pref_base_min_actual > 0: #need to buy             # <<<<<<<<<<<<<<
 *             self.c_place_order(market_pair, True, market_pair.maker, False, order_size_base, Decimal(top_bid_price))
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 */
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1835
 *               )
 * 
 *           if len(limit_orders) == 0 and pref_base_min_actual < 0: #need to sell             # <<<<<<<<<<<<<<
 *             self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(top_ask_price))
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 */
      if (unlikely(__pyx_v_limit_orders == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 1835, __pyx_L1_error)
      }
      __pyx_t_8 = PyDict_Size(__pyx_v_limit_orders); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1835, __pyx_L1_error)
      __pyx_t_9 = ((__pyx_t_8 == 0) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_5 = __pyx_t_9;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_pref_base_min_actual, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1835, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __pyx_t_9;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1836
 * 
 *           if len(limit_orders) == 0 and pref_base_min_actual < 0: #need to sell
 *             self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(top_ask_price))             # <<<<<<<<<<<<<<
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 *             self.log_with_clock(
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_7, __pyx_v_top_ask_price) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_top_ask_price);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_2, 0, __pyx_v_order_size_base, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1837
 *           if len(limit_orders) == 0 and pref_base_min_actual < 0: #need to sell
 *             self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(top_ask_price))
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds             # <<<<<<<<<<<<<<
 *             self.log_with_clock(
 *               logging.INFO,
 */
        __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_1 = PyNumber_Add(__pyx_t_11, __pyx_v_self->_top_maker_cancel_seconds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_v_self->_top_maker_cancel_timer);
        __Pyx_DECREF(__pyx_v_self->_top_maker_cancel_timer);
        __pyx_v_self->_top_maker_cancel_timer = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1838
 *             self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(top_ask_price))
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 *             self.log_with_clock(             # <<<<<<<<<<<<<<
 *               logging.INFO,
 *               f"sell fixing maker order top bid {top_bid_price}, top_ask {top_ask_price} self._top_maker_cancel_timer{self._top_maker_cancel_timer} self._top_maker_cancel_seconds{self._top_maker_cancel_seconds} "
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1839
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 *             self.log_with_clock(
 *               logging.INFO,             # <<<<<<<<<<<<<<
 *               f"sell fixing maker order top bid {top_bid_price}, top_ask {top_ask_price} self._top_maker_cancel_timer{self._top_maker_cancel_timer} self._top_maker_cancel_seconds{self._top_maker_cancel_seconds} "
 *           )
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1839, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_INFO); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1839, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1840
 *             self.log_with_clock(
 *               logging.INFO,
 *               f"sell fixing maker order top bid {top_bid_price}, top_ask {top_ask_price} self._top_maker_cancel_timer{self._top_maker_cancel_timer} self._top_maker_cancel_seconds{self._top_maker_cancel_seconds} "             # <<<<<<<<<<<<<<
 *           )
 * 
 */
        __pyx_t_2 = PyTuple_New(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = 0;
        __pyx_t_10 = 127;
        __Pyx_INCREF(__pyx_kp_u_sell_fixing_maker_order_top_bid);
        __pyx_t_8 += 32;
        __Pyx_GIVEREF(__pyx_kp_u_sell_fixing_maker_order_top_bid);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_sell_fixing_maker_order_top_bid);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_top_bid_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_10;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_top_ask);
        __pyx_t_8 += 10;
        __Pyx_GIVEREF(__pyx_kp_u_top_ask);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_top_ask);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_top_ask_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_10;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_self__top_maker_cancel_timer);
        __pyx_t_8 += 29;
        __Pyx_GIVEREF(__pyx_kp_u_self__top_maker_cancel_timer);
        PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_self__top_maker_cancel_timer);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_top_maker_cancel_timer, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_10;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u_self__top_maker_cancel_seconds);
        __pyx_t_8 += 31;
        __Pyx_GIVEREF(__pyx_kp_u_self__top_maker_cancel_seconds);
        PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_kp_u_self__top_maker_cancel_seconds);
        __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->_top_maker_cancel_seconds, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_10;
        __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_kp_u__23);
        __pyx_t_8 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__23);
        PyTuple_SET_ITEM(__pyx_t_2, 8, __pyx_kp_u__23);
        __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_2, 9, __pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_7, __pyx_t_4};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_7, __pyx_t_4};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_t_4);
          __pyx_t_7 = 0;
          __pyx_t_4 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1838, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1835
 *               )
 * 
 *           if len(limit_orders) == 0 and pref_base_min_actual < 0: #need to sell             # <<<<<<<<<<<<<<
 *             self.c_place_order(market_pair, False, market_pair.maker, False, order_size_base, Decimal(top_ask_price))
 *             self._top_maker_cancel_timer = self._current_timestamp + self._top_maker_cancel_seconds
 */
      }
    }
    __pyx_L5:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1797
 *         object order_size_base = abs(pref_base_min_actual)
 * 
 *       if self._maker_order_update:             # <<<<<<<<<<<<<<
 *         top_bid_price = maker_market.c_get_price_for_volume(market_pair.maker.trading_pair,
 *                                                             False,
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1789
 *             return True
 * 
 *     cdef c_place_top_maker(self, market_pair):             # <<<<<<<<<<<<<<
 *       cdef:
 *         ExchangeBase maker_market = market_pair.maker.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_place_top_maker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_maker_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_taker_market);
  __Pyx_XDECREF(__pyx_v_total_base_balance);
  __Pyx_XDECREF(__pyx_v_pref_base_min_actual);
  __Pyx_XDECREF(__pyx_v_order_size_base);
  __Pyx_XDECREF(__pyx_v_top_bid_price);
  __Pyx_XDECREF(__pyx_v_top_ask_price);
  __Pyx_XDECREF(__pyx_v_market_tuple);
  __Pyx_XDECREF(__pyx_v_limit_orders);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1844
 * 
 * 
 *     def market_conversion_rate(self) -> Decimal:             # <<<<<<<<<<<<<<
 *         """
 *         Return price conversion rate for a taker market (to convert it into maker base asset value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_31market_conversion_rate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_30market_conversion_rate[] = "\n        Return price conversion rate for a taker market (to convert it into maker base asset value)\n        ";
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_31market_conversion_rate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("market_conversion_rate (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_30market_conversion_rate(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_30market_conversion_rate(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("market_conversion_rate", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1848
 *         Return price conversion rate for a taker market (to convert it into maker base asset value)
 *         """
 *         _, _, quote_rate, _, _, base_rate = self.get_taker_to_maker_conversion_rate()             # <<<<<<<<<<<<<<
 *         return quote_rate / base_rate
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_taker_to_maker_conversion_ra); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1848, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1848, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
    __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 6) < 0) __PYX_ERR(0, 1848, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1848, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v__, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_4;
  __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v__, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v__, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_v_base_rate = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1849
 *         """
 *         _, _, quote_rate, _, _, base_rate = self.get_taker_to_maker_conversion_rate()
 *         return quote_rate / base_rate             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_quote_rate, __pyx_v_base_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1844
 * 
 * 
 *     def market_conversion_rate(self) -> Decimal:             # <<<<<<<<<<<<<<
 *         """
 *         Return price conversion rate for a taker market (to convert it into maker base asset value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.market_conversion_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1852
 * 
 * 
 *     cdef c_check_and_create_new_orders(self, object market_pair, bint has_active_bid, bint has_active_ask):             # <<<<<<<<<<<<<<
 *             """
 *             Check and account for all applicable conditions for creating new limit orders (e.g. profitability, what's the
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_and_create_new_orders(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_has_active_bid, int __pyx_v_has_active_ask) {
  PyObject *__pyx_v_effective_hedging_price = 0;
  PyObject *__pyx_v_bid_size = NULL;
  PyObject *__pyx_v_bid_price = NULL;
  PyObject *__pyx_v_effective_hedging_price_adjusted = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_order_id = NULL;
  PyObject *__pyx_v_ask_size = NULL;
  PyObject *__pyx_v_ask_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_check_and_create_new_orders", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1866
 * 
 *             # if there is no active bid, place bid again
 *             if not has_active_bid:             # <<<<<<<<<<<<<<
 *                 bid_size = self.c_get_market_making_size(market_pair, True)
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_has_active_bid != 0)) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1867
 *             # if there is no active bid, place bid again
 *             if not has_active_bid:
 *                 bid_size = self.c_get_market_making_size(market_pair, True)             # <<<<<<<<<<<<<<
 * 
 *                 if bid_size > self._min_order_amount:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_making_size(__pyx_v_self, __pyx_v_market_pair, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_bid_size = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1869
 *                 bid_size = self.c_get_market_making_size(market_pair, True)
 * 
 *                 if bid_size > self._min_order_amount:             # <<<<<<<<<<<<<<
 * 
 *                     bid_price = self.c_get_market_making_price(market_pair, True, bid_size)
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_bid_size, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1869, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1869, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1871
 *                 if bid_size > self._min_order_amount:
 * 
 *                     bid_price = self.c_get_market_making_price(market_pair, True, bid_size)             # <<<<<<<<<<<<<<
 * 
 *                     if not Decimal.is_nan(bid_price):
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_making_price(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_v_bid_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1871, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_bid_price = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1873
 *                     bid_price = self.c_get_market_making_price(market_pair, True, bid_size)
 * 
 *                     if not Decimal.is_nan(bid_price):             # <<<<<<<<<<<<<<
 *                         effective_hedging_price = self.c_calculate_effective_hedging_price(
 *                             market_pair,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_bid_price) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_bid_price);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1873, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = ((!__pyx_t_1) != 0);
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1874
 * 
 *                     if not Decimal.is_nan(bid_price):
 *                         effective_hedging_price = self.c_calculate_effective_hedging_price(             # <<<<<<<<<<<<<<
 *                             market_pair,
 *                             True,
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_v_bid_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_v_effective_hedging_price = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1879
 *                             bid_size
 *                         )
 *                         effective_hedging_price_adjusted = effective_hedging_price / self.market_conversion_rate()             # <<<<<<<<<<<<<<
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                             self.log_with_clock(
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_effective_hedging_price, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_effective_hedging_price_adjusted = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1880
 *                         )
 *                         effective_hedging_price_adjusted = effective_hedging_price / self.market_conversion_rate()
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                             self.log_with_clock(
 *                                 logging.INFO,
 */
        __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_CREATE_ORDER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyNumber_And(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1880, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1881
 *                         effective_hedging_price_adjusted = effective_hedging_price / self.market_conversion_rate()
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                             self.log_with_clock(             # <<<<<<<<<<<<<<
 *                                 logging.INFO,
 *                                 f"({market_pair.maker.trading_pair}) Creating limit bid order for "
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1881, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1882
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                             self.log_with_clock(
 *                                 logging.INFO,             # <<<<<<<<<<<<<<
 *                                 f"({market_pair.maker.trading_pair}) Creating limit bid order for "
 *                                 f"{bid_size} {market_pair.maker.base_asset} at "
 */
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1882, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1882, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1883
 *                             self.log_with_clock(
 *                                 logging.INFO,
 *                                 f"({market_pair.maker.trading_pair}) Creating limit bid order for "             # <<<<<<<<<<<<<<
 *                                 f"{bid_size} {market_pair.maker.base_asset} at "
 *                                 f"{bid_price} {market_pair.maker.quote_asset}. "
 */
          __pyx_t_4 = PyTuple_New(23); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = 0;
          __pyx_t_8 = 127;
          __Pyx_INCREF(__pyx_kp_u__24);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__24);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u__24);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_Creating_limit_bid_order_for);
          __pyx_t_7 += 31;
          __Pyx_GIVEREF(__pyx_kp_u_Creating_limit_bid_order_for);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Creating_limit_bid_order_for);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1884
 *                                 logging.INFO,
 *                                 f"({market_pair.maker.trading_pair}) Creating limit bid order for "
 *                                 f"{bid_size} {market_pair.maker.base_asset} at "             # <<<<<<<<<<<<<<
 *                                 f"{bid_price} {market_pair.maker.quote_asset}. "
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "
 */
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_bid_size, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1884, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u__23);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1884, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1884, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1884, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_at);
          __pyx_t_7 += 4;
          __Pyx_GIVEREF(__pyx_kp_u_at);
          PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_at);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1885
 *                                 f"({market_pair.maker.trading_pair}) Creating limit bid order for "
 *                                 f"{bid_size} {market_pair.maker.base_asset} at "
 *                                 f"{bid_price} {market_pair.maker.quote_asset}. "             # <<<<<<<<<<<<<<
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "
 *                                 f"(Rate adjusted: {effective_hedging_price_adjusted:.10f} {market_pair.taker.quote_asset})."
 */
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_bid_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1885, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_4, 8, __pyx_kp_u__23);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1885, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1885, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1885, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 9, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_Current_hedging_price);
          __pyx_t_7 += 25;
          __Pyx_GIVEREF(__pyx_kp_u_Current_hedging_price);
          PyTuple_SET_ITEM(__pyx_t_4, 10, __pyx_kp_u_Current_hedging_price);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1886
 *                                 f"{bid_size} {market_pair.maker.base_asset} at "
 *                                 f"{bid_price} {market_pair.maker.quote_asset}. "
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "             # <<<<<<<<<<<<<<
 *                                 f"(Rate adjusted: {effective_hedging_price_adjusted:.10f} {market_pair.taker.quote_asset})."
 *                                 f"(Min_profitability is: {(self._min_profitability)*100:.10f} actual is: {(((effective_hedging_price - bid_price)/bid_price) * 100)} (Taker - Maker / Taker))."
 */
          __pyx_t_9 = __Pyx_PyObject_Format(__pyx_v_effective_hedging_price, __pyx_kp_u_10f); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1886, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 11, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_4, 12, __pyx_kp_u__23);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1886, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1886, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1886, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 13, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_Rate_adjusted);
          __pyx_t_7 += 17;
          __Pyx_GIVEREF(__pyx_kp_u_Rate_adjusted);
          PyTuple_SET_ITEM(__pyx_t_4, 14, __pyx_kp_u_Rate_adjusted);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1887
 *                                 f"{bid_price} {market_pair.maker.quote_asset}. "
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "
 *                                 f"(Rate adjusted: {effective_hedging_price_adjusted:.10f} {market_pair.taker.quote_asset})."             # <<<<<<<<<<<<<<
 *                                 f"(Min_profitability is: {(self._min_profitability)*100:.10f} actual is: {(((effective_hedging_price - bid_price)/bid_price) * 100)} (Taker - Maker / Taker))."
 *                             )
 */
          __pyx_t_9 = __Pyx_PyObject_Format(__pyx_v_effective_hedging_price_adjusted, __pyx_kp_u_10f); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 15, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_4, 16, __pyx_kp_u__23);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 17, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_Min_profitability_is);
          __pyx_t_7 += 25;
          __Pyx_GIVEREF(__pyx_kp_u_Min_profitability_is);
          PyTuple_SET_ITEM(__pyx_t_4, 18, __pyx_kp_u_Min_profitability_is);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1888
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "
 *                                 f"(Rate adjusted: {effective_hedging_price_adjusted:.10f} {market_pair.taker.quote_asset})."
 *                                 f"(Min_profitability is: {(self._min_profitability)*100:.10f} actual is: {(((effective_hedging_price - bid_price)/bid_price) * 100)} (Taker - Maker / Taker))."             # <<<<<<<<<<<<<<
 *                             )
 *                         order_id = self.c_place_order(market_pair, True, market_pair.maker, True, bid_size, bid_price)
 */
          __pyx_t_9 = PyNumber_Multiply(__pyx_v_self->_min_profitability, __pyx_int_100); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1888, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_Format(__pyx_t_9, __pyx_kp_u_10f); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1888, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_4, 19, __pyx_t_10);
          __pyx_t_10 = 0;
          __Pyx_INCREF(__pyx_kp_u_actual_is);
          __pyx_t_7 += 12;
          __Pyx_GIVEREF(__pyx_kp_u_actual_is);
          PyTuple_SET_ITEM(__pyx_t_4, 20, __pyx_kp_u_actual_is);
          __pyx_t_10 = PyNumber_Subtract(__pyx_v_effective_hedging_price, __pyx_v_bid_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1888, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_v_bid_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1888, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyNumber_Multiply(__pyx_t_9, __pyx_int_100); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1888, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1888, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 21, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_Taker_Maker_Taker);
          __pyx_t_7 += 26;
          __Pyx_GIVEREF(__pyx_kp_u_Taker_Maker_Taker);
          PyTuple_SET_ITEM(__pyx_t_4, 22, __pyx_kp_u_Taker_Maker_Taker);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1883
 *                             self.log_with_clock(
 *                                 logging.INFO,
 *                                 f"({market_pair.maker.trading_pair}) Creating limit bid order for "             # <<<<<<<<<<<<<<
 *                                 f"{bid_size} {market_pair.maker.base_asset} at "
 *                                 f"{bid_price} {market_pair.maker.quote_asset}. "
 */
          __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_4, 23, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1883, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          __pyx_t_11 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_11 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_9};
            __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1881, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_9};
            __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1881, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else
          #endif
          {
            __pyx_t_10 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1881, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (__pyx_t_4) {
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __pyx_t_4 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_6);
            PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_9);
            __pyx_t_6 = 0;
            __pyx_t_9 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1881, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1880
 *                         )
 *                         effective_hedging_price_adjusted = effective_hedging_price / self.market_conversion_rate()
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                             self.log_with_clock(
 *                                 logging.INFO,
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1890
 *                                 f"(Min_profitability is: {(self._min_profitability)*100:.10f} actual is: {(((effective_hedging_price - bid_price)/bid_price) * 100)} (Taker - Maker / Taker))."
 *                             )
 *                         order_id = self.c_place_order(market_pair, True, market_pair.maker, True, bid_size, bid_price)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1890, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 1, __pyx_t_3, 1, __pyx_v_bid_size, __pyx_v_bid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1890, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_order_id = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1873
 *                     bid_price = self.c_get_market_making_price(market_pair, True, bid_size)
 * 
 *                     if not Decimal.is_nan(bid_price):             # <<<<<<<<<<<<<<
 *                         effective_hedging_price = self.c_calculate_effective_hedging_price(
 *                             market_pair,
 */
        goto __pyx_L5;
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1892
 *                         order_id = self.c_place_order(market_pair, True, market_pair.maker, True, bid_size, bid_price)
 *                     else:
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:             # <<<<<<<<<<<<<<
 *                             self.log_with_clock(
 *                                 logging.WARNING,
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1892, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_NULL_ORDER_SIZE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1892, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = PyNumber_And(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1892, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1892, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1893
 *                     else:
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 *                             self.log_with_clock(             # <<<<<<<<<<<<<<
 *                                 logging.WARNING,
 *                                 f"({market_pair.maker.trading_pair})"
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1893, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1894
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 *                             self.log_with_clock(
 *                                 logging.WARNING,             # <<<<<<<<<<<<<<
 *                                 f"({market_pair.maker.trading_pair})"
 *                                 f"Order book on taker is too thin to place order for size: {bid_size}"
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1894, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_WARNING); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1894, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1895
 *                             self.log_with_clock(
 *                                 logging.WARNING,
 *                                 f"({market_pair.maker.trading_pair})"             # <<<<<<<<<<<<<<
 *                                 f"Order book on taker is too thin to place order for size: {bid_size}"
 *                                 f"Reduce order_size_portfolio_ratio_limit"
 */
          __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1895, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = 0;
          __pyx_t_8 = 127;
          __Pyx_INCREF(__pyx_kp_u__24);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__24);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u__24);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1895, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1895, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1895, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_Order_book_on_taker_is_too_thin);
          __pyx_t_7 += 58;
          __Pyx_GIVEREF(__pyx_kp_u_Order_book_on_taker_is_too_thin);
          PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_Order_book_on_taker_is_too_thin);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1896
 *                                 logging.WARNING,
 *                                 f"({market_pair.maker.trading_pair})"
 *                                 f"Order book on taker is too thin to place order for size: {bid_size}"             # <<<<<<<<<<<<<<
 *                                 f"Reduce order_size_portfolio_ratio_limit"
 *                             )
 */
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_bid_size, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1896, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_Reduce_order_size_portfolio_rati);
          __pyx_t_7 += 39;
          __Pyx_GIVEREF(__pyx_kp_u_Reduce_order_size_portfolio_rati);
          PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_Reduce_order_size_portfolio_rati);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1895
 *                             self.log_with_clock(
 *                                 logging.WARNING,
 *                                 f"({market_pair.maker.trading_pair})"             # <<<<<<<<<<<<<<
 *                                 f"Order book on taker is too thin to place order for size: {bid_size}"
 *                                 f"Reduce order_size_portfolio_ratio_limit"
 */
          __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1895, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          __pyx_t_11 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_11 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_9, __pyx_t_6};
            __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1893, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_9, __pyx_t_6};
            __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1893, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          } else
          #endif
          {
            __pyx_t_4 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1893, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (__pyx_t_2) {
              __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_11, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_6);
            PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_11, __pyx_t_6);
            __pyx_t_9 = 0;
            __pyx_t_6 = 0;
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1893, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1892
 *                         order_id = self.c_place_order(market_pair, True, market_pair.maker, True, bid_size, bid_price)
 *                     else:
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:             # <<<<<<<<<<<<<<
 *                             self.log_with_clock(
 *                                 logging.WARNING,
 */
        }
      }
      __pyx_L5:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1869
 *                 bid_size = self.c_get_market_making_size(market_pair, True)
 * 
 *                 if bid_size > self._min_order_amount:             # <<<<<<<<<<<<<<
 * 
 *                     bid_price = self.c_get_market_making_price(market_pair, True, bid_size)
 */
      goto __pyx_L4;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1900
 *                             )
 *                 else:
 *                     if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:             # <<<<<<<<<<<<<<
 *                         self.log_with_clock(
 *                             logging.WARNING,
 */
    /*else*/ {
      __pyx_t_10 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1900, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_NULL_ORDER_SIZE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1900, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyNumber_And(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1900, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1901
 *                 else:
 *                     if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 *                         self.log_with_clock(             # <<<<<<<<<<<<<<
 *                             logging.WARNING,
 *                             f"({market_pair.maker.trading_pair}) Attempting to place a limit bid but the "
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1902
 *                     if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 *                         self.log_with_clock(
 *                             logging.WARNING,             # <<<<<<<<<<<<<<
 *                             f"({market_pair.maker.trading_pair}) Attempting to place a limit bid but the "
 *                             f"bid size is 0. Skipping. Check available balance."
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_logging); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1902, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_WARNING); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1902, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1903
 *                         self.log_with_clock(
 *                             logging.WARNING,
 *                             f"({market_pair.maker.trading_pair}) Attempting to place a limit bid but the "             # <<<<<<<<<<<<<<
 *                             f"bid size is 0. Skipping. Check available balance."
 *                         )
 */
        __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_7 = 0;
        __pyx_t_8 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_7 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u__24);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_Attempting_to_place_a_limit_bid);
        __pyx_t_7 += 91;
        __Pyx_GIVEREF(__pyx_kp_u_Attempting_to_place_a_limit_bid);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_Attempting_to_place_a_limit_bid);
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_11 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_11 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_6, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1901, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_6, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1901, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1901, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (__pyx_t_10) {
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10); __pyx_t_10 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_11, __pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_11, __pyx_t_9);
          __pyx_t_6 = 0;
          __pyx_t_9 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1901, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1900
 *                             )
 *                 else:
 *                     if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:             # <<<<<<<<<<<<<<
 *                         self.log_with_clock(
 *                             logging.WARNING,
 */
      }
    }
    __pyx_L4:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1866
 * 
 *             # if there is no active bid, place bid again
 *             if not has_active_bid:             # <<<<<<<<<<<<<<
 *                 bid_size = self.c_get_market_making_size(market_pair, True)
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1907
 *                         )
 *             # if there is no active ask, place ask again
 *             if not has_active_ask:             # <<<<<<<<<<<<<<
 *                 ask_size = self.c_get_market_making_size(market_pair, False)
 * 
 */
  __pyx_t_5 = ((!(__pyx_v_has_active_ask != 0)) != 0);
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1908
 *             # if there is no active ask, place ask again
 *             if not has_active_ask:
 *                 ask_size = self.c_get_market_making_size(market_pair, False)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_making_size(__pyx_v_self, __pyx_v_market_pair, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_ask_size = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1911
 * 
 * 
 *                 if ask_size > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                     ask_price = self.c_get_market_making_price(market_pair, False, ask_size)
 *                     if not Decimal.is_nan(ask_price):
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_ask_size, __pyx_v_self->_min_order_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1911, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1911, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1912
 * 
 *                 if ask_size > self._min_order_amount:
 *                     ask_price = self.c_get_market_making_price(market_pair, False, ask_size)             # <<<<<<<<<<<<<<
 *                     if not Decimal.is_nan(ask_price):
 *                         effective_hedging_price = self.c_calculate_effective_hedging_price(
 */
      __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_making_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_v_ask_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1912, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_ask_price = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1913
 *                 if ask_size > self._min_order_amount:
 *                     ask_price = self.c_get_market_making_price(market_pair, False, ask_size)
 *                     if not Decimal.is_nan(ask_price):             # <<<<<<<<<<<<<<
 *                         effective_hedging_price = self.c_calculate_effective_hedging_price(
 *                             market_pair,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1913, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_is_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1913, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_ask_price) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_ask_price);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1913, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1913, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = ((!__pyx_t_5) != 0);
      if (__pyx_t_1) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1914
 *                     ask_price = self.c_get_market_making_price(market_pair, False, ask_size)
 *                     if not Decimal.is_nan(ask_price):
 *                         effective_hedging_price = self.c_calculate_effective_hedging_price(             # <<<<<<<<<<<<<<
 *                             market_pair,
 *                             False,
 */
        __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_effective_hedging_price(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_v_ask_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1914, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_effective_hedging_price, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1919
 *                             ask_size
 *                         )
 *                         effective_hedging_price_adjusted = effective_hedging_price / self.market_conversion_rate()             # <<<<<<<<<<<<<<
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                             self.log_with_clock(
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_effective_hedging_price, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_effective_hedging_price_adjusted, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1920
 *                         )
 *                         effective_hedging_price_adjusted = effective_hedging_price / self.market_conversion_rate()
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                             self.log_with_clock(
 *                                 logging.INFO,
 */
        __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1920, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_CREATE_ORDER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1920, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyNumber_And(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1920, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1920, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_1) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1921
 *                         effective_hedging_price_adjusted = effective_hedging_price / self.market_conversion_rate()
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                             self.log_with_clock(             # <<<<<<<<<<<<<<
 *                                 logging.INFO,
 *                                 f"({market_pair.maker.trading_pair}) Creating limit ask order for "
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1921, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1922
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                             self.log_with_clock(
 *                                 logging.INFO,             # <<<<<<<<<<<<<<
 *                                 f"({market_pair.maker.trading_pair}) Creating limit ask order for "
 *                                 f"{ask_size} {market_pair.maker.base_asset} at "
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1922, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_INFO); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1922, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1923
 *                             self.log_with_clock(
 *                                 logging.INFO,
 *                                 f"({market_pair.maker.trading_pair}) Creating limit ask order for "             # <<<<<<<<<<<<<<
 *                                 f"{ask_size} {market_pair.maker.base_asset} at "
 *                                 f"{ask_price} {market_pair.maker.quote_asset}. "
 */
          __pyx_t_2 = PyTuple_New(23); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1923, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_7 = 0;
          __pyx_t_8 = 127;
          __Pyx_INCREF(__pyx_kp_u__24);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__24);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u__24);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1923, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1923, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1923, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_Creating_limit_ask_order_for);
          __pyx_t_7 += 31;
          __Pyx_GIVEREF(__pyx_kp_u_Creating_limit_ask_order_for);
          PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_Creating_limit_ask_order_for);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1924
 *                                 logging.INFO,
 *                                 f"({market_pair.maker.trading_pair}) Creating limit ask order for "
 *                                 f"{ask_size} {market_pair.maker.base_asset} at "             # <<<<<<<<<<<<<<
 *                                 f"{ask_price} {market_pair.maker.quote_asset}. "
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "
 */
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_ask_size, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1924, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__23);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1924, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1924, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1924, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_at);
          __pyx_t_7 += 4;
          __Pyx_GIVEREF(__pyx_kp_u_at);
          PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_kp_u_at);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1925
 *                                 f"({market_pair.maker.trading_pair}) Creating limit ask order for "
 *                                 f"{ask_size} {market_pair.maker.base_asset} at "
 *                                 f"{ask_price} {market_pair.maker.quote_asset}. "             # <<<<<<<<<<<<<<
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "
 *                                 f"(Rate adjusted: {effective_hedging_price_adjusted:.10f} {market_pair.taker.quote_asset})."
 */
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_ask_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1925, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_2, 8, __pyx_kp_u__23);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1925, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1925, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1925, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 9, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_Current_hedging_price);
          __pyx_t_7 += 25;
          __Pyx_GIVEREF(__pyx_kp_u_Current_hedging_price);
          PyTuple_SET_ITEM(__pyx_t_2, 10, __pyx_kp_u_Current_hedging_price);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1926
 *                                 f"{ask_size} {market_pair.maker.base_asset} at "
 *                                 f"{ask_price} {market_pair.maker.quote_asset}. "
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "             # <<<<<<<<<<<<<<
 *                                 f"(Rate adjusted: {effective_hedging_price_adjusted:.10f} {market_pair.taker.quote_asset})."
 *                                 f"(Min_profitability is: {(self._min_profitability)*100:.10f} actual is: {(((ask_price - effective_hedging_price)/ask_price) * 100)} (Maker - Taker / Taker))."
 */
          __pyx_t_6 = __Pyx_PyObject_Format(__pyx_v_effective_hedging_price, __pyx_kp_u_10f); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1926, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 11, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_2, 12, __pyx_kp_u__23);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1926, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1926, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1926, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 13, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_Rate_adjusted);
          __pyx_t_7 += 17;
          __Pyx_GIVEREF(__pyx_kp_u_Rate_adjusted);
          PyTuple_SET_ITEM(__pyx_t_2, 14, __pyx_kp_u_Rate_adjusted);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1927
 *                                 f"{ask_price} {market_pair.maker.quote_asset}. "
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "
 *                                 f"(Rate adjusted: {effective_hedging_price_adjusted:.10f} {market_pair.taker.quote_asset})."             # <<<<<<<<<<<<<<
 *                                 f"(Min_profitability is: {(self._min_profitability)*100:.10f} actual is: {(((ask_price - effective_hedging_price)/ask_price) * 100)} (Maker - Taker / Taker))."
 *                             )
 */
          __pyx_t_6 = __Pyx_PyObject_Format(__pyx_v_effective_hedging_price_adjusted, __pyx_kp_u_10f); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1927, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 15, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u__23);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__23);
          PyTuple_SET_ITEM(__pyx_t_2, 16, __pyx_kp_u__23);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_taker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1927, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1927, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1927, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 17, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_Min_profitability_is);
          __pyx_t_7 += 25;
          __Pyx_GIVEREF(__pyx_kp_u_Min_profitability_is);
          PyTuple_SET_ITEM(__pyx_t_2, 18, __pyx_kp_u_Min_profitability_is);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1928
 *                                 f"Current hedging price: {effective_hedging_price:.10f} {market_pair.maker.quote_asset} "
 *                                 f"(Rate adjusted: {effective_hedging_price_adjusted:.10f} {market_pair.taker.quote_asset})."
 *                                 f"(Min_profitability is: {(self._min_profitability)*100:.10f} actual is: {(((ask_price - effective_hedging_price)/ask_price) * 100)} (Maker - Taker / Taker))."             # <<<<<<<<<<<<<<
 *                             )
 *                         order_id = self.c_place_order(market_pair, False, market_pair.maker, True, ask_size, ask_price)
 */
          __pyx_t_6 = PyNumber_Multiply(__pyx_v_self->_min_profitability, __pyx_int_100); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1928, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_kp_u_10f); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1928, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_2, 19, __pyx_t_10);
          __pyx_t_10 = 0;
          __Pyx_INCREF(__pyx_kp_u_actual_is);
          __pyx_t_7 += 12;
          __Pyx_GIVEREF(__pyx_kp_u_actual_is);
          PyTuple_SET_ITEM(__pyx_t_2, 20, __pyx_kp_u_actual_is);
          __pyx_t_10 = PyNumber_Subtract(__pyx_v_ask_price, __pyx_v_effective_hedging_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1928, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_v_ask_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1928, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyNumber_Multiply(__pyx_t_6, __pyx_int_100); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1928, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1928, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_2, 21, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_Maker_Taker_Taker);
          __pyx_t_7 += 26;
          __Pyx_GIVEREF(__pyx_kp_u_Maker_Taker_Taker);
          PyTuple_SET_ITEM(__pyx_t_2, 22, __pyx_kp_u_Maker_Taker_Taker);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1923
 *                             self.log_with_clock(
 *                                 logging.INFO,
 *                                 f"({market_pair.maker.trading_pair}) Creating limit ask order for "             # <<<<<<<<<<<<<<
 *                                 f"{ask_size} {market_pair.maker.base_asset} at "
 *                                 f"{ask_price} {market_pair.maker.quote_asset}. "
 */
          __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 23, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1923, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          __pyx_t_11 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_11 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_9, __pyx_t_6};
            __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1921, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
            PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_9, __pyx_t_6};
            __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1921, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          } else
          #endif
          {
            __pyx_t_10 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1921, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (__pyx_t_2) {
              __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __pyx_t_2 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_6);
            PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_6);
            __pyx_t_9 = 0;
            __pyx_t_6 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1921, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1920
 *                         )
 *                         effective_hedging_price_adjusted = effective_hedging_price / self.market_conversion_rate()
 *                         if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                             self.log_with_clock(
 *                                 logging.INFO,
 */
        }

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1930
 *                                 f"(Min_profitability is: {(self._min_profitability)*100:.10f} actual is: {(((ask_price - effective_hedging_price)/ask_price) * 100)} (Maker - Taker / Taker))."
 *                             )
 *                         order_id = self.c_place_order(market_pair, False, market_pair.maker, True, ask_size, ask_price)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_place_order(__pyx_v_self, __pyx_v_market_pair, 0, __pyx_t_3, 1, __pyx_v_ask_size, __pyx_v_ask_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_order_id, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1913
 *                 if ask_size > self._min_order_amount:
 *                     ask_price = self.c_get_market_making_price(market_pair, False, ask_size)
 *                     if not Decimal.is_nan(ask_price):             # <<<<<<<<<<<<<<
 *                         effective_hedging_price = self.c_calculate_effective_hedging_price(
 *                             market_pair,
 */
        goto __pyx_L11;
      }

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1932
 *                         order_id = self.c_place_order(market_pair, False, market_pair.maker, True, ask_size, ask_price)
 *                     else:
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:             # <<<<<<<<<<<<<<
 *                             self.log_with_clock(
 *                                 logging.WARNING,
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1932, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_NULL_ORDER_SIZE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1932, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = PyNumber_And(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1932, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1932, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_1) {

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1933
 *                     else:
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 *                             self.log_with_clock(             # <<<<<<<<<<<<<<
 *                                 logging.WARNING,
 *                                 f"({market_pair.maker.trading_pair})"
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1933, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1934
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 *                             self.log_with_clock(
 *                                 logging.WARNING,             # <<<<<<<<<<<<<<
 *                                 f"({market_pair.maker.trading_pair})"
 *                                 f"Order book on taker is too thin to place order for size: {ask_size}"
 */
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1934, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_WARNING); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1934, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1935
 *                             self.log_with_clock(
 *                                 logging.WARNING,
 *                                 f"({market_pair.maker.trading_pair})"             # <<<<<<<<<<<<<<
 *                                 f"Order book on taker is too thin to place order for size: {ask_size}"
 *                                 f"Reduce order_size_portfolio_ratio_limit"
 */
          __pyx_t_4 = PyTuple_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1935, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = 0;
          __pyx_t_8 = 127;
          __Pyx_INCREF(__pyx_kp_u__24);
          __pyx_t_7 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__24);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u__24);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1935, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1935, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1935, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_Order_book_on_taker_is_too_thin);
          __pyx_t_7 += 58;
          __Pyx_GIVEREF(__pyx_kp_u_Order_book_on_taker_is_too_thin);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Order_book_on_taker_is_too_thin);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1936
 *                                 logging.WARNING,
 *                                 f"({market_pair.maker.trading_pair})"
 *                                 f"Order book on taker is too thin to place order for size: {ask_size}"             # <<<<<<<<<<<<<<
 *                                 f"Reduce order_size_portfolio_ratio_limit"
 *                             )
 */
          __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_ask_size, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1936, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
          __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_INCREF(__pyx_kp_u_Reduce_order_size_portfolio_rati);
          __pyx_t_7 += 39;
          __Pyx_GIVEREF(__pyx_kp_u_Reduce_order_size_portfolio_rati);
          PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_Reduce_order_size_portfolio_rati);

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1935
 *                             self.log_with_clock(
 *                                 logging.WARNING,
 *                                 f"({market_pair.maker.trading_pair})"             # <<<<<<<<<<<<<<
 *                                 f"Order book on taker is too thin to place order for size: {ask_size}"
 *                                 f"Reduce order_size_portfolio_ratio_limit"
 */
          __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1935, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          __pyx_t_11 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_11 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_9};
            __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1933, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_9};
            __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1933, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else
          #endif
          {
            __pyx_t_2 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1933, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            if (__pyx_t_4) {
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_6);
            PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_11, __pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_11, __pyx_t_9);
            __pyx_t_6 = 0;
            __pyx_t_9 = 0;
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1933, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1932
 *                         order_id = self.c_place_order(market_pair, False, market_pair.maker, True, ask_size, ask_price)
 *                     else:
 *                         if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:             # <<<<<<<<<<<<<<
 *                             self.log_with_clock(
 *                                 logging.WARNING,
 */
        }
      }
      __pyx_L11:;

      /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1911
 * 
 * 
 *                 if ask_size > self._min_order_amount:             # <<<<<<<<<<<<<<
 *                     ask_price = self.c_get_market_making_price(market_pair, False, ask_size)
 *                     if not Decimal.is_nan(ask_price):
 */
      goto __pyx_L10;
    }

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1940
 *                             )
 *                 else:
 *                     if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:             # <<<<<<<<<<<<<<
 *                         self.log_with_clock(
 *                             logging.WARNING,
 */
    /*else*/ {
      __pyx_t_10 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1940, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_NULL_ORDER_SIZE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1940, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_And(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1940, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1940, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1941
 *                 else:
 *                     if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 *                         self.log_with_clock(             # <<<<<<<<<<<<<<
 *                             logging.WARNING,
 *                             f"({market_pair.maker.trading_pair}) Attempting to place a limit ask but the "
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1941, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1942
 *                     if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:
 *                         self.log_with_clock(
 *                             logging.WARNING,             # <<<<<<<<<<<<<<
 *                             f"({market_pair.maker.trading_pair}) Attempting to place a limit ask but the "
 *                             f"ask size is 0. Skipping. Check available balance."
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_logging); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1942, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_WARNING); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1942, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1943
 *                         self.log_with_clock(
 *                             logging.WARNING,
 *                             f"({market_pair.maker.trading_pair}) Attempting to place a limit ask but the "             # <<<<<<<<<<<<<<
 *                             f"ask size is 0. Skipping. Check available balance."
 *                         )
 */
        __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1943, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_7 = 0;
        __pyx_t_8 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_7 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u__24);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_maker); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1943, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1943, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1943, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_INCREF(__pyx_kp_u_Attempting_to_place_a_limit_ask);
        __pyx_t_7 += 91;
        __Pyx_GIVEREF(__pyx_kp_u_Attempting_to_place_a_limit_ask);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_Attempting_to_place_a_limit_ask);
        __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1943, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_11 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_11 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_9, __pyx_t_6};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1941, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_9, __pyx_t_6};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1941, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1941, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (__pyx_t_10) {
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_10); __pyx_t_10 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_11, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_11, __pyx_t_6);
          __pyx_t_9 = 0;
          __pyx_t_6 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1941, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1940
 *                             )
 *                 else:
 *                     if self._logging_options & self.OPTION_LOG_NULL_ORDER_SIZE:             # <<<<<<<<<<<<<<
 *                         self.log_with_clock(
 *                             logging.WARNING,
 */
      }
    }
    __pyx_L10:;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1907
 *                         )
 *             # if there is no active ask, place ask again
 *             if not has_active_ask:             # <<<<<<<<<<<<<<
 *                 ask_size = self.c_get_market_making_size(market_pair, False)
 * 
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1852
 * 
 * 
 *     cdef c_check_and_create_new_orders(self, object market_pair, bint has_active_bid, bint has_active_ask):             # <<<<<<<<<<<<<<
 *             """
 *             Check and account for all applicable conditions for creating new limit orders (e.g. profitability, what's the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_check_and_create_new_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_effective_hedging_price);
  __Pyx_XDECREF(__pyx_v_bid_size);
  __Pyx_XDECREF(__pyx_v_bid_price);
  __Pyx_XDECREF(__pyx_v_effective_hedging_price_adjusted);
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_ask_size);
  __Pyx_XDECREF(__pyx_v_ask_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1947
 *                         )
 * 
 *     cdef str c_place_order(self,             # <<<<<<<<<<<<<<
 *                            object market_pair,
 *                            bint is_buy,
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair, int __pyx_v_is_buy, PyObject *__pyx_v_market, int __pyx_v_record_maker, PyObject *__pyx_v_amount, PyObject *__pyx_v_price) {
  PyObject *__pyx_v_order_id = 0;
  double __pyx_v_expiration_seconds;
  PyObject *__pyx_v_market_info = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market __pyx_t_6;
  struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_place_order", 0);
  __Pyx_INCREF(__pyx_v_price);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1958
 *         cdef:
 *             str order_id
 *             double expiration_seconds = NaN             # <<<<<<<<<<<<<<
 *             object market_info = market
 *             object order_type = OrderType.LIMIT
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expiration_seconds = __pyx_t_2;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1959
 *             str order_id
 *             double expiration_seconds = NaN
 *             object market_info = market             # <<<<<<<<<<<<<<
 *             object order_type = OrderType.LIMIT
 * 
 */
  __Pyx_INCREF(__pyx_v_market);
  __pyx_v_market_info = __pyx_v_market;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1960
 *             double expiration_seconds = NaN
 *             object market_info = market
 *             object order_type = OrderType.LIMIT             # <<<<<<<<<<<<<<
 * 
 *         if order_type is OrderType.MARKET:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_order_type = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1962
 *             object order_type = OrderType.LIMIT
 * 
 *         if order_type is OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             price = s_decimal_nan
 *         if not self._active_order_canceling:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = (__pyx_v_order_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1963
 * 
 *         if order_type is OrderType.MARKET:
 *             price = s_decimal_nan             # <<<<<<<<<<<<<<
 *         if not self._active_order_canceling:
 *             expiration_seconds = self._limit_order_min_expiration
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_price, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1962
 *             object order_type = OrderType.LIMIT
 * 
 *         if order_type is OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             price = s_decimal_nan
 *         if not self._active_order_canceling:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1964
 *         if order_type is OrderType.MARKET:
 *             price = s_decimal_nan
 *         if not self._active_order_canceling:             # <<<<<<<<<<<<<<
 *             expiration_seconds = self._limit_order_min_expiration
 *         if is_buy:
 */
  __pyx_t_5 = ((!(__pyx_v_self->_active_order_canceling != 0)) != 0);
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1965
 *             price = s_decimal_nan
 *         if not self._active_order_canceling:
 *             expiration_seconds = self._limit_order_min_expiration             # <<<<<<<<<<<<<<
 *         if is_buy:
 *             order_id = StrategyBase.c_buy_with_specific_market(self, market_info, amount,
 */
    __pyx_t_2 = __pyx_v_self->_limit_order_min_expiration;
    __pyx_v_expiration_seconds = __pyx_t_2;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1964
 *         if order_type is OrderType.MARKET:
 *             price = s_decimal_nan
 *         if not self._active_order_canceling:             # <<<<<<<<<<<<<<
 *             expiration_seconds = self._limit_order_min_expiration
 *         if is_buy:
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1966
 *         if not self._active_order_canceling:
 *             expiration_seconds = self._limit_order_min_expiration
 *         if is_buy:             # <<<<<<<<<<<<<<
 *             order_id = StrategyBase.c_buy_with_specific_market(self, market_info, amount,
 *                                                                order_type=order_type, price=price,
 */
  __pyx_t_5 = (__pyx_v_is_buy != 0);
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1967
 *             expiration_seconds = self._limit_order_min_expiration
 *         if is_buy:
 *             order_id = StrategyBase.c_buy_with_specific_market(self, market_info, amount,             # <<<<<<<<<<<<<<
 *                                                                order_type=order_type, price=price,
 *                                                                expiration_seconds=expiration_seconds)
 */
    __pyx_t_6.__pyx_n = 3;
    __pyx_t_6.order_type = __pyx_v_order_type;
    __pyx_t_6.price = __pyx_v_price;
    __pyx_t_6.expiration_seconds = __pyx_v_expiration_seconds;
    __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->c_buy_with_specific_market(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_info, __pyx_v_amount, &__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_order_id = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1966
 *         if not self._active_order_canceling:
 *             expiration_seconds = self._limit_order_min_expiration
 *         if is_buy:             # <<<<<<<<<<<<<<
 *             order_id = StrategyBase.c_buy_with_specific_market(self, market_info, amount,
 *                                                                order_type=order_type, price=price,
 */
    goto __pyx_L5;
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1971
 *                                                                expiration_seconds=expiration_seconds)
 *         else:
 *             order_id = StrategyBase.c_sell_with_specific_market(self, market_info, amount,             # <<<<<<<<<<<<<<
 *                                                                 order_type=order_type, price=price,
 *                                                                 expiration_seconds=expiration_seconds)
 */
  /*else*/ {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1973
 *             order_id = StrategyBase.c_sell_with_specific_market(self, market_info, amount,
 *                                                                 order_type=order_type, price=price,
 *                                                                 expiration_seconds=expiration_seconds)             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_add_create_order_pending(order_id)
 *         self._market_pair_tracker.c_start_tracking_order_id(order_id, market_info.market, market_pair)
 */
    __pyx_t_7.__pyx_n = 3;
    __pyx_t_7.order_type = __pyx_v_order_type;
    __pyx_t_7.price = __pyx_v_price;
    __pyx_t_7.expiration_seconds = __pyx_v_expiration_seconds;
    __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->c_sell_with_specific_market(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_info, __pyx_v_amount, &__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_order_id = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L5:;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1974
 *                                                                 order_type=order_type, price=price,
 *                                                                 expiration_seconds=expiration_seconds)
 *         self._sb_order_tracker.c_add_create_order_pending(order_id)             # <<<<<<<<<<<<<<
 *         self._market_pair_tracker.c_start_tracking_order_id(order_id, market_info.market, market_pair)
 *         if record_maker: #only record maker orders that are filled for MM, not for fixing balance
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_add_create_order_pending(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1975
 *                                                                 expiration_seconds=expiration_seconds)
 *         self._sb_order_tracker.c_add_create_order_pending(order_id)
 *         self._market_pair_tracker.c_start_tracking_order_id(order_id, market_info.market, market_pair)             # <<<<<<<<<<<<<<
 *         if record_maker: #only record maker orders that are filled for MM, not for fixing balance
 *             self._maker_order_ids.append(order_id)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_v_self->_market_pair_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_order_id(__pyx_v_self->_market_pair_tracker, __pyx_v_order_id, __pyx_t_1, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1976
 *         self._sb_order_tracker.c_add_create_order_pending(order_id)
 *         self._market_pair_tracker.c_start_tracking_order_id(order_id, market_info.market, market_pair)
 *         if record_maker: #only record maker orders that are filled for MM, not for fixing balance             # <<<<<<<<<<<<<<
 *             self._maker_order_ids.append(order_id)
 *         return order_id
 */
  __pyx_t_5 = (__pyx_v_record_maker != 0);
  if (__pyx_t_5) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1977
 *         self._market_pair_tracker.c_start_tracking_order_id(order_id, market_info.market, market_pair)
 *         if record_maker: #only record maker orders that are filled for MM, not for fixing balance
 *             self._maker_order_ids.append(order_id)             # <<<<<<<<<<<<<<
 *         return order_id
 * 
 */
    if (unlikely(__pyx_v_self->_maker_order_ids == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 1977, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_self->_maker_order_ids, __pyx_v_order_id); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1977, __pyx_L1_error)

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1976
 *         self._sb_order_tracker.c_add_create_order_pending(order_id)
 *         self._market_pair_tracker.c_start_tracking_order_id(order_id, market_info.market, market_pair)
 *         if record_maker: #only record maker orders that are filled for MM, not for fixing balance             # <<<<<<<<<<<<<<
 *             self._maker_order_ids.append(order_id)
 *         return order_id
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1978
 *         if record_maker: #only record maker orders that are filled for MM, not for fixing balance
 *             self._maker_order_ids.append(order_id)
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel_order(self, object market_pair, str order_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1947
 *                         )
 * 
 *     cdef str c_place_order(self,             # <<<<<<<<<<<<<<
 *                            object market_pair,
 *                            bint is_buy,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_place_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_market_info);
  __Pyx_XDECREF(__pyx_v_order_type);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1980
 *         return order_id
 * 
 *     cdef c_cancel_order(self, object market_pair, str order_id):             # <<<<<<<<<<<<<<
 *         market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *         StrategyBase.c_cancel_order(self, market_trading_pair_tuple, order_id)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_v_market_trading_pair_tuple = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_cancel_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1981
 * 
 *     cdef c_cancel_order(self, object market_pair, str order_id):
 *         market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 *         StrategyBase.c_cancel_order(self, market_trading_pair_tuple, order_id)
 *     # ----------------------------------------------------------------------------------------------------------
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_trading_pair_tuple = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1982
 *     cdef c_cancel_order(self, object market_pair, str order_id):
 *         market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *         StrategyBase.c_cancel_order(self, market_trading_pair_tuple, order_id)             # <<<<<<<<<<<<<<
 *     # ----------------------------------------------------------------------------------------------------------
 *     # </editor-fold>
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuple, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1980
 *         return order_id
 * 
 *     cdef c_cancel_order(self, object market_pair, str order_id):             # <<<<<<<<<<<<<<
 *         market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *         StrategyBase.c_cancel_order(self, market_trading_pair_tuple, order_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market_trading_pair_tuple);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1989
 *     # Override the stop tracking entry points to include the market pair tracker as well.
 *     # ----------------------------------------------------------------------------------------------------------
 *     cdef c_stop_tracking_limit_order(self, object market_trading_pair_tuple, str order_id):             # <<<<<<<<<<<<<<
 *         self._market_pair_tracker.c_stop_tracking_order_id(order_id)
 *         StrategyBase.c_stop_tracking_limit_order(self, market_trading_pair_tuple, order_id)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_stop_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_stop_tracking_limit_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1990
 *     # ----------------------------------------------------------------------------------------------------------
 *     cdef c_stop_tracking_limit_order(self, object market_trading_pair_tuple, str order_id):
 *         self._market_pair_tracker.c_stop_tracking_order_id(order_id)             # <<<<<<<<<<<<<<
 *         StrategyBase.c_stop_tracking_limit_order(self, market_trading_pair_tuple, order_id)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_v_self->_market_pair_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_order_id(__pyx_v_self->_market_pair_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1991
 *     cdef c_stop_tracking_limit_order(self, object market_trading_pair_tuple, str order_id):
 *         self._market_pair_tracker.c_stop_tracking_order_id(order_id)
 *         StrategyBase.c_stop_tracking_limit_order(self, market_trading_pair_tuple, order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_stop_tracking_market_order(self, object market_trading_pair_tuple, str order_id):
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->c_stop_tracking_limit_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuple, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1989
 *     # Override the stop tracking entry points to include the market pair tracker as well.
 *     # ----------------------------------------------------------------------------------------------------------
 *     cdef c_stop_tracking_limit_order(self, object market_trading_pair_tuple, str order_id):             # <<<<<<<<<<<<<<
 *         self._market_pair_tracker.c_stop_tracking_order_id(order_id)
 *         StrategyBase.c_stop_tracking_limit_order(self, market_trading_pair_tuple, order_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_stop_tracking_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1993
 *         StrategyBase.c_stop_tracking_limit_order(self, market_trading_pair_tuple, order_id)
 * 
 *     cdef c_stop_tracking_market_order(self, object market_trading_pair_tuple, str order_id):             # <<<<<<<<<<<<<<
 *         self._market_pair_tracker.c_stop_tracking_order_id(order_id)
 *         StrategyBase.c_stop_tracking_market_order(self, market_trading_pair_tuple, order_id)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_stop_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_stop_tracking_market_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1994
 * 
 *     cdef c_stop_tracking_market_order(self, object market_trading_pair_tuple, str order_id):
 *         self._market_pair_tracker.c_stop_tracking_order_id(order_id)             # <<<<<<<<<<<<<<
 *         StrategyBase.c_stop_tracking_market_order(self, market_trading_pair_tuple, order_id)
 *     # ----------------------------------------------------------------------------------------------------------
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)__pyx_v_self->_market_pair_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_order_id(__pyx_v_self->_market_pair_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1995
 *     cdef c_stop_tracking_market_order(self, object market_trading_pair_tuple, str order_id):
 *         self._market_pair_tracker.c_stop_tracking_order_id(order_id)
 *         StrategyBase.c_stop_tracking_market_order(self, market_trading_pair_tuple, order_id)             # <<<<<<<<<<<<<<
 *     # ----------------------------------------------------------------------------------------------------------
 *     # </editor-fold>
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->c_stop_tracking_market_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuple, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1993
 *         StrategyBase.c_stop_tracking_limit_order(self, market_trading_pair_tuple, order_id)
 * 
 *     cdef c_stop_tracking_market_order(self, object market_trading_pair_tuple, str order_id):             # <<<<<<<<<<<<<<
 *         self._market_pair_tracker.c_stop_tracking_order_id(order_id)
 *         StrategyBase.c_stop_tracking_market_order(self, market_trading_pair_tuple, order_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_stop_tracking_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2000
 * 
 *     # Removes orders from pending_create
 *     cdef c_did_create_buy_order(self, object order_created_event):             # <<<<<<<<<<<<<<
 *         order_id = order_created_event.order_id
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_create_buy_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_created_event) {
  PyObject *__pyx_v_order_id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_create_buy_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2001
 *     # Removes orders from pending_create
 *     cdef c_did_create_buy_order(self, object order_created_event):
 *         order_id = order_created_event.order_id             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_created_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_id = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2002
 *     cdef c_did_create_buy_order(self, object order_created_event):
 *         order_id = order_created_event.order_id
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_create_sell_order(self, object order_created_event):
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_order_id))||((__pyx_v_order_id) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_order_id)->tp_name), 0))) __PYX_ERR(0, 2002, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_remove_create_order_pending(__pyx_v_self->__pyx_base._sb_order_tracker, ((PyObject*)__pyx_v_order_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2000
 * 
 *     # Removes orders from pending_create
 *     cdef c_did_create_buy_order(self, object order_created_event):             # <<<<<<<<<<<<<<
 *         order_id = order_created_event.order_id
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_did_create_buy_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2004
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 * 
 *     cdef c_did_create_sell_order(self, object order_created_event):             # <<<<<<<<<<<<<<
 *         order_id = order_created_event.order_id
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_create_sell_order(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_created_event) {
  PyObject *__pyx_v_order_id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_create_sell_order", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2005
 * 
 *     cdef c_did_create_sell_order(self, object order_created_event):
 *         order_id = order_created_event.order_id             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_created_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_id = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2006
 *     cdef c_did_create_sell_order(self, object order_created_event):
 *         order_id = order_created_event.order_id
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)             # <<<<<<<<<<<<<<
 * 
 *     def notify_hb_app(self, msg: str):
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_order_id))||((__pyx_v_order_id) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_order_id)->tp_name), 0))) __PYX_ERR(0, 2006, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_remove_create_order_pending(__pyx_v_self->__pyx_base._sb_order_tracker, ((PyObject*)__pyx_v_order_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2004
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 * 
 *     cdef c_did_create_sell_order(self, object order_created_event):             # <<<<<<<<<<<<<<
 *         order_id = order_created_event.order_id
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.c_did_create_sell_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2008
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_33notify_hb_app(PyObject *__pyx_v_self, PyObject *__pyx_v_msg); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_33notify_hb_app(PyObject *__pyx_v_self, PyObject *__pyx_v_msg) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("notify_hb_app (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_msg), (&PyUnicode_Type), 1, "msg", 1))) __PYX_ERR(0, 2008, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_32notify_hb_app(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), ((PyObject*)__pyx_v_msg));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_32notify_hb_app(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("notify_hb_app", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2009
 * 
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:             # <<<<<<<<<<<<<<
 *             super().notify_hb_app(msg)
 */
  __pyx_t_1 = (__pyx_v_self->_hb_app_notification != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2010
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)             # <<<<<<<<<<<<<<
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy));
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_notify_hb_app); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_msg);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2009
 * 
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:             # <<<<<<<<<<<<<<
 *             super().notify_hb_app(msg)
 */
  }

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2008
 *         self._sb_order_tracker.c_remove_create_order_pending(order_id)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.notify_hb_app", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_34__reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 882, __pyx_L3_error)

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 888, __pyx_L3_error)

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 894, __pyx_L3_error)

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *p;
  PyObject *o = __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy;
  p->_maker_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_taker_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_anti_hysteresis_timers = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_min_profitability = Py_None; Py_INCREF(Py_None);
  p->_third_market = Py_None; Py_INCREF(Py_None);
  p->_order_size_taker_volume_factor = Py_None; Py_INCREF(Py_None);
  p->_balance_fix_maker = Py_None; Py_INCREF(Py_None);
  p->_order_size_taker_balance_factor = Py_None; Py_INCREF(Py_None);
  p->_order_size_portfolio_ratio_limit = Py_None; Py_INCREF(Py_None);
  p->_order_size_maker_balance_factor = Py_None; Py_INCREF(Py_None);
  p->_triangular_switch = Py_None; Py_INCREF(Py_None);
  p->_order_amount = Py_None; Py_INCREF(Py_None);
  p->_target_base_balance = Py_None; Py_INCREF(Py_None);
  p->_maker_order_update = Py_None; Py_INCREF(Py_None);
  p->_top_maker_cancel_seconds = Py_None; Py_INCREF(Py_None);
  p->_top_maker_cancel_timer = Py_None; Py_INCREF(Py_None);
  p->_slippage_buffer_fix = Py_None; Py_INCREF(Py_None);
  p->_waiting_time = Py_None; Py_INCREF(Py_None);
  p->_fix_counter = Py_None; Py_INCREF(Py_None);
  p->_filled_order_delay_seconds = Py_None; Py_INCREF(Py_None);
  p->_filled_order_delay_timer = Py_None; Py_INCREF(Py_None);
  p->_cancel_order_threshold = Py_None; Py_INCREF(Py_None);
  p->_triangular_arbitrage = Py_None; Py_INCREF(Py_None);
  p->_top_depth_tolerance = Py_None; Py_INCREF(Py_None);
  p->_top_depth_tolerance_taker = Py_None; Py_INCREF(Py_None);
  p->_cancel_timer = Py_None; Py_INCREF(Py_None);
  p->_counter = Py_None; Py_INCREF(Py_None);
  p->_restore_timer = Py_None; Py_INCREF(Py_None);
  p->_cancel_order_timer_seconds = Py_None; Py_INCREF(Py_None);
  p->_order_fill_buy_events = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_order_fill_sell_events = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_suggested_price_samples = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_market_pairs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_market_pair_tracker = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)Py_None); Py_INCREF(Py_None);
  p->_taker_to_maker_base_conversion_rate = Py_None; Py_INCREF(Py_None);
  p->_taker_to_maker_quote_conversion_rate = Py_None; Py_INCREF(Py_None);
  p->_slippage_buffer = Py_None; Py_INCREF(Py_None);
  p->_min_order_amount = Py_None; Py_INCREF(Py_None);
  p->_maker_order_ids = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_maker_markets);
  Py_CLEAR(p->_taker_markets);
  Py_CLEAR(p->_anti_hysteresis_timers);
  Py_CLEAR(p->_min_profitability);
  Py_CLEAR(p->_third_market);
  Py_CLEAR(p->_order_size_taker_volume_factor);
  Py_CLEAR(p->_balance_fix_maker);
  Py_CLEAR(p->_order_size_taker_balance_factor);
  Py_CLEAR(p->_order_size_portfolio_ratio_limit);
  Py_CLEAR(p->_order_size_maker_balance_factor);
  Py_CLEAR(p->_triangular_switch);
  Py_CLEAR(p->_order_amount);
  Py_CLEAR(p->_target_base_balance);
  Py_CLEAR(p->_maker_order_update);
  Py_CLEAR(p->_top_maker_cancel_seconds);
  Py_CLEAR(p->_top_maker_cancel_timer);
  Py_CLEAR(p->_slippage_buffer_fix);
  Py_CLEAR(p->_waiting_time);
  Py_CLEAR(p->_fix_counter);
  Py_CLEAR(p->_filled_order_delay_seconds);
  Py_CLEAR(p->_filled_order_delay_timer);
  Py_CLEAR(p->_cancel_order_threshold);
  Py_CLEAR(p->_triangular_arbitrage);
  Py_CLEAR(p->_top_depth_tolerance);
  Py_CLEAR(p->_top_depth_tolerance_taker);
  Py_CLEAR(p->_cancel_timer);
  Py_CLEAR(p->_counter);
  Py_CLEAR(p->_restore_timer);
  Py_CLEAR(p->_cancel_order_timer_seconds);
  Py_CLEAR(p->_order_fill_buy_events);
  Py_CLEAR(p->_order_fill_sell_events);
  Py_CLEAR(p->_suggested_price_samples);
  Py_CLEAR(p->_market_pairs);
  Py_CLEAR(p->_market_pair_tracker);
  Py_CLEAR(p->_taker_to_maker_base_conversion_rate);
  Py_CLEAR(p->_taker_to_maker_quote_conversion_rate);
  Py_CLEAR(p->_slippage_buffer);
  Py_CLEAR(p->_min_order_amount);
  Py_CLEAR(p->_maker_order_ids);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);
}

static int __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)o;
  e = ((likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) ? ((__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_traverse) ? __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy)); if (e) return e;
  if (p->_maker_markets) {
    e = (*v)(p->_maker_markets, a); if (e) return e;
  }
  if (p->_taker_markets) {
    e = (*v)(p->_taker_markets, a); if (e) return e;
  }
  if (p->_anti_hysteresis_timers) {
    e = (*v)(p->_anti_hysteresis_timers, a); if (e) return e;
  }
  if (p->_min_profitability) {
    e = (*v)(p->_min_profitability, a); if (e) return e;
  }
  if (p->_third_market) {
    e = (*v)(p->_third_market, a); if (e) return e;
  }
  if (p->_order_size_taker_volume_factor) {
    e = (*v)(p->_order_size_taker_volume_factor, a); if (e) return e;
  }
  if (p->_balance_fix_maker) {
    e = (*v)(p->_balance_fix_maker, a); if (e) return e;
  }
  if (p->_order_size_taker_balance_factor) {
    e = (*v)(p->_order_size_taker_balance_factor, a); if (e) return e;
  }
  if (p->_order_size_portfolio_ratio_limit) {
    e = (*v)(p->_order_size_portfolio_ratio_limit, a); if (e) return e;
  }
  if (p->_order_size_maker_balance_factor) {
    e = (*v)(p->_order_size_maker_balance_factor, a); if (e) return e;
  }
  if (p->_triangular_switch) {
    e = (*v)(p->_triangular_switch, a); if (e) return e;
  }
  if (p->_order_amount) {
    e = (*v)(p->_order_amount, a); if (e) return e;
  }
  if (p->_target_base_balance) {
    e = (*v)(p->_target_base_balance, a); if (e) return e;
  }
  if (p->_maker_order_update) {
    e = (*v)(p->_maker_order_update, a); if (e) return e;
  }
  if (p->_top_maker_cancel_seconds) {
    e = (*v)(p->_top_maker_cancel_seconds, a); if (e) return e;
  }
  if (p->_top_maker_cancel_timer) {
    e = (*v)(p->_top_maker_cancel_timer, a); if (e) return e;
  }
  if (p->_slippage_buffer_fix) {
    e = (*v)(p->_slippage_buffer_fix, a); if (e) return e;
  }
  if (p->_waiting_time) {
    e = (*v)(p->_waiting_time, a); if (e) return e;
  }
  if (p->_fix_counter) {
    e = (*v)(p->_fix_counter, a); if (e) return e;
  }
  if (p->_filled_order_delay_seconds) {
    e = (*v)(p->_filled_order_delay_seconds, a); if (e) return e;
  }
  if (p->_filled_order_delay_timer) {
    e = (*v)(p->_filled_order_delay_timer, a); if (e) return e;
  }
  if (p->_cancel_order_threshold) {
    e = (*v)(p->_cancel_order_threshold, a); if (e) return e;
  }
  if (p->_triangular_arbitrage) {
    e = (*v)(p->_triangular_arbitrage, a); if (e) return e;
  }
  if (p->_top_depth_tolerance) {
    e = (*v)(p->_top_depth_tolerance, a); if (e) return e;
  }
  if (p->_top_depth_tolerance_taker) {
    e = (*v)(p->_top_depth_tolerance_taker, a); if (e) return e;
  }
  if (p->_cancel_timer) {
    e = (*v)(p->_cancel_timer, a); if (e) return e;
  }
  if (p->_counter) {
    e = (*v)(p->_counter, a); if (e) return e;
  }
  if (p->_restore_timer) {
    e = (*v)(p->_restore_timer, a); if (e) return e;
  }
  if (p->_cancel_order_timer_seconds) {
    e = (*v)(p->_cancel_order_timer_seconds, a); if (e) return e;
  }
  if (p->_order_fill_buy_events) {
    e = (*v)(p->_order_fill_buy_events, a); if (e) return e;
  }
  if (p->_order_fill_sell_events) {
    e = (*v)(p->_order_fill_sell_events, a); if (e) return e;
  }
  if (p->_suggested_price_samples) {
    e = (*v)(p->_suggested_price_samples, a); if (e) return e;
  }
  if (p->_market_pairs) {
    e = (*v)(p->_market_pairs, a); if (e) return e;
  }
  if (p->_market_pair_tracker) {
    e = (*v)(((PyObject *)p->_market_pair_tracker), a); if (e) return e;
  }
  if (p->_taker_to_maker_base_conversion_rate) {
    e = (*v)(p->_taker_to_maker_base_conversion_rate, a); if (e) return e;
  }
  if (p->_taker_to_maker_quote_conversion_rate) {
    e = (*v)(p->_taker_to_maker_quote_conversion_rate, a); if (e) return e;
  }
  if (p->_slippage_buffer) {
    e = (*v)(p->_slippage_buffer, a); if (e) return e;
  }
  if (p->_min_order_amount) {
    e = (*v)(p->_min_order_amount, a); if (e) return e;
  }
  if (p->_maker_order_ids) {
    e = (*v)(p->_maker_order_ids, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *)o;
  if (likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) { if (__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_clear) __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);
  tmp = ((PyObject*)p->_maker_markets);
  p->_maker_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_taker_markets);
  p->_taker_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_anti_hysteresis_timers);
  p->_anti_hysteresis_timers = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_min_profitability);
  p->_min_profitability = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_third_market);
  p->_third_market = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_size_taker_volume_factor);
  p->_order_size_taker_volume_factor = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_balance_fix_maker);
  p->_balance_fix_maker = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_size_taker_balance_factor);
  p->_order_size_taker_balance_factor = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_size_portfolio_ratio_limit);
  p->_order_size_portfolio_ratio_limit = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_size_maker_balance_factor);
  p->_order_size_maker_balance_factor = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_triangular_switch);
  p->_triangular_switch = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_amount);
  p->_order_amount = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_target_base_balance);
  p->_target_base_balance = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_maker_order_update);
  p->_maker_order_update = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_top_maker_cancel_seconds);
  p->_top_maker_cancel_seconds = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_top_maker_cancel_timer);
  p->_top_maker_cancel_timer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_slippage_buffer_fix);
  p->_slippage_buffer_fix = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_waiting_time);
  p->_waiting_time = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_fix_counter);
  p->_fix_counter = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_filled_order_delay_seconds);
  p->_filled_order_delay_seconds = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_filled_order_delay_timer);
  p->_filled_order_delay_timer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_cancel_order_threshold);
  p->_cancel_order_threshold = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_triangular_arbitrage);
  p->_triangular_arbitrage = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_top_depth_tolerance);
  p->_top_depth_tolerance = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_top_depth_tolerance_taker);
  p->_top_depth_tolerance_taker = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_cancel_timer);
  p->_cancel_timer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_counter);
  p->_counter = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_restore_timer);
  p->_restore_timer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_cancel_order_timer_seconds);
  p->_cancel_order_timer_seconds = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_fill_buy_events);
  p->_order_fill_buy_events = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_fill_sell_events);
  p->_order_fill_sell_events = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_suggested_price_samples);
  p->_suggested_price_samples = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_market_pairs);
  p->_market_pairs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_market_pair_tracker);
  p->_market_pair_tracker = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_taker_to_maker_base_conversion_rate);
  p->_taker_to_maker_base_conversion_rate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_taker_to_maker_quote_conversion_rate);
  p->_taker_to_maker_quote_conversion_rate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_slippage_buffer);
  p->_slippage_buffer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_min_order_amount);
  p->_min_order_amount = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_maker_order_ids);
  p->_maker_order_ids = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_order_amount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_12order_amount_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_min_profitability(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17min_profitability_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_active_limit_orders_all(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23active_limit_orders_all_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_active_limit_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19active_limit_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_cached_limit_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19cached_limit_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_active_bids(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_bids_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_active_asks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11active_asks_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_logging_options(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_logging_options(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15logging_options_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy[] = {
  {"logger", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_1logger, METH_NOARGS, 0},
  {"init_params", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_3init_params, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_2init_params},
  {"get_taker_to_maker_conversion_rate", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_5get_taker_to_maker_conversion_rate, METH_NOARGS, __pyx_doc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_4get_taker_to_maker_conversion_rate},
  {"log_conversion_rates", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_7log_conversion_rates, METH_NOARGS, 0},
  {"oracle_status_df", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_9oracle_status_df, METH_NOARGS, 0},
  {"fix_counter_status_df", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_11fix_counter_status_df, METH_NOARGS, 0},
  {"format_status", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_13format_status, METH_NOARGS, 0},
  {"get_order_size_after_portfolio_ratio_limit", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_15get_order_size_after_portfolio_ratio_limit, METH_O, 0},
  {"get_market_making_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_17get_market_making_size, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_market_making_price", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_19get_market_making_price, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_adjusted_limit_order_size", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_21get_adjusted_limit_order_size, METH_O, 0},
  {"get_effective_hedging_price", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_23get_effective_hedging_price, METH_VARARGS|METH_KEYWORDS, 0},
  {"check_if_still_profitable", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_25check_if_still_profitable, METH_VARARGS|METH_KEYWORDS, 0},
  {"check_if_sufficient_balance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_27check_if_sufficient_balance, METH_VARARGS|METH_KEYWORDS, 0},
  {"has_active_taker_order", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_29has_active_taker_order, METH_O, 0},
  {"market_conversion_rate", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_31market_conversion_rate, METH_NOARGS, __pyx_doc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_30market_conversion_rate},
  {"notify_hb_app", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_33notify_hb_app, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_35__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_37__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy[] = {
  {(char *)"order_amount", __pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_order_amount, 0, (char *)0, 0},
  {(char *)"min_profitability", __pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_min_profitability, 0, (char *)0, 0},
  {(char *)"active_limit_orders_all", __pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_active_limit_orders_all, 0, (char *)0, 0},
  {(char *)"active_limit_orders", __pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_active_limit_orders, 0, (char *)0, 0},
  {(char *)"cached_limit_orders", __pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_cached_limit_orders, 0, (char *)0, 0},
  {(char *)"active_bids", __pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_active_bids, 0, (char *)0, 0},
  {(char *)"active_asks", __pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_active_asks, 0, (char *)0, 0},
  {(char *)"logging_options", __pyx_getprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_logging_options, __pyx_setprop_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_logging_options, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.CrossExchangeMarketMakingStrategy", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *__pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples[8];
static int __pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples[--__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_ask_price_samples);
  Py_CLEAR(p->__pyx_v_bid_price_samples);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples)))) {
    __pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples[__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples++] = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *)o;
  if (p->__pyx_v_ask_price_samples) {
    e = (*v)(p->__pyx_v_ask_price_samples, a); if (e) return e;
  }
  if (p->__pyx_v_bid_price_samples) {
    e = (*v)(p->__pyx_v_bid_price_samples, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples *)o;
  tmp = ((PyObject*)p->__pyx_v_ask_price_samples);
  p->__pyx_v_ask_price_samples = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_bid_price_samples);
  p->__pyx_v_bid_price_samples = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.__pyx_scope_struct__c_get_top_bid_ask_from_price_samples", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *__pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr[--__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_p);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr[__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_p) {
    e = (*v)(p->__pyx_v_p, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *__pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr[--__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_p);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr[__pyx_freecount_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_p) {
    e = (*v)(p->__pyx_v_p, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making.__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cross_exchange_market_making(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cross_exchange_market_making},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cross_exchange_market_making",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_0_0, __pyx_k_0_0, sizeof(__pyx_k_0_0), 0, 1, 0, 0},
  {&__pyx_kp_u_0_05, __pyx_k_0_05, sizeof(__pyx_k_0_05), 0, 1, 0, 0},
  {&__pyx_kp_u_0_1667, __pyx_k_0_1667, sizeof(__pyx_k_0_1667), 0, 1, 0, 0},
  {&__pyx_kp_u_0_925, __pyx_k_0_925, sizeof(__pyx_k_0_925), 0, 1, 0, 0},
  {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {&__pyx_kp_u_10f, __pyx_k_10f, sizeof(__pyx_k_10f), 0, 1, 0, 0},
  {&__pyx_kp_u_10g, __pyx_k_10g, sizeof(__pyx_k_10g), 0, 1, 0, 0},
  {&__pyx_kp_u_8g, __pyx_k_8g, sizeof(__pyx_k_8g), 0, 1, 0, 0},
  {&__pyx_kp_u_AF, __pyx_k_AF, sizeof(__pyx_k_AF), 0, 1, 0, 0},
  {&__pyx_kp_u_AF_2, __pyx_k_AF_2, sizeof(__pyx_k_AF_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Active_orders, __pyx_k_Active_orders, sizeof(__pyx_k_Active_orders), 0, 1, 0, 0},
  {&__pyx_kp_u_Assets, __pyx_k_Assets, sizeof(__pyx_k_Assets), 0, 1, 0, 0},
  {&__pyx_kp_u_Attempting_to_place_a_limit_ask, __pyx_k_Attempting_to_place_a_limit_ask, sizeof(__pyx_k_Attempting_to_place_a_limit_ask), 0, 1, 0, 0},
  {&__pyx_kp_u_Attempting_to_place_a_limit_bid, __pyx_k_Attempting_to_place_a_limit_bid, sizeof(__pyx_k_Attempting_to_place_a_limit_bid), 0, 1, 0, 0},
  {&__pyx_n_s_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {&__pyx_kp_u_Balance_fix_counter, __pyx_k_Balance_fix_counter, sizeof(__pyx_k_Balance_fix_counter), 0, 1, 0, 0},
  {&__pyx_kp_u_Base_Balance, __pyx_k_Base_Balance, sizeof(__pyx_k_Base_Balance), 0, 1, 0, 0},
  {&__pyx_n_s_CANCEL_EXPIRY_DURATION, __pyx_k_CANCEL_EXPIRY_DURATION, sizeof(__pyx_k_CANCEL_EXPIRY_DURATION), 0, 0, 1, 1},
  {&__pyx_n_s_CONNECTED, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {&__pyx_kp_u_Creating_limit_ask_order_for, __pyx_k_Creating_limit_ask_order_for, sizeof(__pyx_k_Creating_limit_ask_order_for), 0, 1, 0, 0},
  {&__pyx_kp_u_Creating_limit_bid_order_for, __pyx_k_Creating_limit_bid_order_for, sizeof(__pyx_k_Creating_limit_bid_order_for), 0, 1, 0, 0},
  {&__pyx_n_s_CrossExchangeMarketMakingStrateg, __pyx_k_CrossExchangeMarketMakingStrateg, sizeof(__pyx_k_CrossExchangeMarketMakingStrateg), 0, 0, 1, 1},
  {&__pyx_n_s_CrossExchangeMarketMakingStrateg_2, __pyx_k_CrossExchangeMarketMakingStrateg_2, sizeof(__pyx_k_CrossExchangeMarketMakingStrateg_2), 0, 0, 1, 1},
  {&__pyx_n_s_CrossExchangeMarketPair, __pyx_k_CrossExchangeMarketPair, sizeof(__pyx_k_CrossExchangeMarketPair), 0, 0, 1, 1},
  {&__pyx_kp_u_Current_buy_order_price, __pyx_k_Current_buy_order_price, sizeof(__pyx_k_Current_buy_order_price), 0, 1, 0, 0},
  {&__pyx_kp_u_Current_hedging_price, __pyx_k_Current_hedging_price, sizeof(__pyx_k_Current_hedging_price), 0, 1, 0, 0},
  {&__pyx_kp_u_Current_maker_buy_fill_amount_o, __pyx_k_Current_maker_buy_fill_amount_o, sizeof(__pyx_k_Current_maker_buy_fill_amount_o), 0, 1, 0, 0},
  {&__pyx_kp_u_Current_maker_sell_fill_amount, __pyx_k_Current_maker_sell_fill_amount, sizeof(__pyx_k_Current_maker_sell_fill_amount), 0, 1, 0, 0},
  {&__pyx_kp_u_Current_sell_order_price, __pyx_k_Current_sell_order_price, sizeof(__pyx_k_Current_sell_order_price), 0, 1, 0, 0},
  {&__pyx_n_s_DEBUG, __pyx_k_DEBUG, sizeof(__pyx_k_DEBUG), 0, 0, 1, 1},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_kp_u_Determining_max_size_of_the_Make, __pyx_k_Determining_max_size_of_the_Make, sizeof(__pyx_k_Determining_max_size_of_the_Make), 0, 1, 0, 0},
  {&__pyx_kp_u_Determining_max_size_of_the_Make_2, __pyx_k_Determining_max_size_of_the_Make_2, sizeof(__pyx_k_Determining_max_size_of_the_Make_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Diff, __pyx_k_Diff, sizeof(__pyx_k_Diff), 0, 1, 0, 0},
  {&__pyx_n_s_ERROR, __pyx_k_ERROR, sizeof(__pyx_k_ERROR), 0, 0, 1, 1},
  {&__pyx_n_s_ExchangeBase, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {&__pyx_kp_u_Going_to_adjust_the_order_Taker, __pyx_k_Going_to_adjust_the_order_Taker, sizeof(__pyx_k_Going_to_adjust_the_order_Taker), 0, 1, 0, 0},
  {&__pyx_kp_u_Going_to_cancel_the_old_order_a, __pyx_k_Going_to_cancel_the_old_order_a, sizeof(__pyx_k_Going_to_cancel_the_old_order_a), 0, 1, 0, 0},
  {&__pyx_kp_u_Going_to_place_a_maker_buy_order, __pyx_k_Going_to_place_a_maker_buy_order, sizeof(__pyx_k_Going_to_place_a_maker_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Going_to_place_a_maker_sell_orde, __pyx_k_Going_to_place_a_maker_sell_orde, sizeof(__pyx_k_Going_to_place_a_maker_sell_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_Going_to_place_a_taker_buy_order, __pyx_k_Going_to_place_a_taker_buy_order, sizeof(__pyx_k_Going_to_place_a_taker_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Going_to_place_a_taker_sell_orde, __pyx_k_Going_to_place_a_taker_sell_orde, sizeof(__pyx_k_Going_to_place_a_taker_sell_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_Hedged_maker_buy_order_s_of, __pyx_k_Hedged_maker_buy_order_s_of, sizeof(__pyx_k_Hedged_maker_buy_order_s_of), 0, 1, 0, 0},
  {&__pyx_kp_u_Hedged_maker_sell_order_s_of, __pyx_k_Hedged_maker_sell_order_s_of, sizeof(__pyx_k_Hedged_maker_sell_order_s_of), 0, 1, 0, 0},
  {&__pyx_n_s_INFO, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Just_canceled_all_maker_order_an, __pyx_k_Just_canceled_all_maker_order_an, sizeof(__pyx_k_Just_canceled_all_maker_order_an), 0, 1, 0, 0},
  {&__pyx_kp_u_Just_canceled_all_maker_orders_t, __pyx_k_Just_canceled_all_maker_orders_t, sizeof(__pyx_k_Just_canceled_all_maker_orders_t), 0, 1, 0, 0},
  {&__pyx_kp_u_Just_canceled_all_orders_to_res, __pyx_k_Just_canceled_all_orders_to_res, sizeof(__pyx_k_Just_canceled_all_orders_to_res), 0, 1, 0, 0},
  {&__pyx_n_s_LIMIT, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {&__pyx_kp_u_Limit, __pyx_k_Limit, sizeof(__pyx_k_Limit), 0, 1, 0, 0},
  {&__pyx_n_s_LimitOrder, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {&__pyx_kp_u_M_Buy_Min_P, __pyx_k_M_Buy_Min_P, sizeof(__pyx_k_M_Buy_Min_P), 0, 1, 0, 0},
  {&__pyx_kp_u_M_Buy_Min_P_2, __pyx_k_M_Buy_Min_P_2, sizeof(__pyx_k_M_Buy_Min_P_2), 0, 1, 0, 0},
  {&__pyx_kp_u_M_Sell_Min_P, __pyx_k_M_Sell_Min_P, sizeof(__pyx_k_M_Sell_Min_P), 0, 1, 0, 0},
  {&__pyx_kp_u_M_Sell_Min_P_2, __pyx_k_M_Sell_Min_P_2, sizeof(__pyx_k_M_Sell_Min_P_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_BUY_order, __pyx_k_Maker_BUY_order, sizeof(__pyx_k_Maker_BUY_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_Quote_balance, __pyx_k_Maker_Quote_balance, sizeof(__pyx_k_Maker_Quote_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_Taker_Taker, __pyx_k_Maker_Taker_Taker, sizeof(__pyx_k_Maker_Taker_Taker), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_buy_order, __pyx_k_Maker_buy_order, sizeof(__pyx_k_Maker_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_buy_order_of, __pyx_k_Maker_buy_order_of, sizeof(__pyx_k_Maker_buy_order_of), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_enough_base_balance, __pyx_k_Maker_enough_base_balance, sizeof(__pyx_k_Maker_enough_base_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_enough_quote_balance, __pyx_k_Maker_enough_quote_balance, sizeof(__pyx_k_Maker_enough_quote_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_sell_order, __pyx_k_Maker_sell_order, sizeof(__pyx_k_Maker_sell_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_sell_order_2, __pyx_k_Maker_sell_order_2, sizeof(__pyx_k_Maker_sell_order_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_sell_order_of, __pyx_k_Maker_sell_order_of, sizeof(__pyx_k_Maker_sell_order_of), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets, __pyx_k_Markets, sizeof(__pyx_k_Markets), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets_are_not_ready_No_market, __pyx_k_Markets_are_not_ready_No_market, sizeof(__pyx_k_Markets_are_not_ready_No_market), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets_are_ready_Trading_starte, __pyx_k_Markets_are_ready_Trading_starte, sizeof(__pyx_k_Markets_are_ready_Trading_starte), 0, 1, 0, 0},
  {&__pyx_kp_u_Max_P, __pyx_k_Max_P, sizeof(__pyx_k_Max_P), 0, 1, 0, 0},
  {&__pyx_kp_u_Max_P_2, __pyx_k_Max_P_2, sizeof(__pyx_k_Max_P_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Max_P_3, __pyx_k_Max_P_3, sizeof(__pyx_k_Max_P_3), 0, 1, 0, 0},
  {&__pyx_kp_u_Max_size_based_on_taker_balance, __pyx_k_Max_size_based_on_taker_balance, sizeof(__pyx_k_Max_size_based_on_taker_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Max_size_of_the_order, __pyx_k_Max_size_of_the_order, sizeof(__pyx_k_Max_size_of_the_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Min_profitability_is, __pyx_k_Min_profitability_is, sizeof(__pyx_k_Min_profitability_is), 0, 1, 0, 0},
  {&__pyx_n_s_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {&__pyx_n_s_NetworkStatus, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_No_active_maker_orders, __pyx_k_No_active_maker_orders, sizeof(__pyx_k_No_active_maker_orders), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_kp_u_Not_enough_base_balance_to_sell, __pyx_k_Not_enough_base_balance_to_sell, sizeof(__pyx_k_Not_enough_base_balance_to_sell), 0, 1, 0, 0},
  {&__pyx_kp_u_Not_enough_quote_balance_to_buy, __pyx_k_Not_enough_quote_balance_to_buy, sizeof(__pyx_k_Not_enough_quote_balance_to_buy), 0, 1, 0, 0},
  {&__pyx_kp_u_OP, __pyx_k_OP, sizeof(__pyx_k_OP), 0, 1, 0, 0},
  {&__pyx_n_s_OPTION_LOG_ADJUST_ORDER, __pyx_k_OPTION_LOG_ADJUST_ORDER, sizeof(__pyx_k_OPTION_LOG_ADJUST_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_ALL, __pyx_k_OPTION_LOG_ALL, sizeof(__pyx_k_OPTION_LOG_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_CREATE_ORDER, __pyx_k_OPTION_LOG_CREATE_ORDER, sizeof(__pyx_k_OPTION_LOG_CREATE_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED, __pyx_k_OPTION_LOG_MAKER_ORDER_FILLED, sizeof(__pyx_k_OPTION_LOG_MAKER_ORDER_FILLED), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_MAKER_ORDER_HEDGED, __pyx_k_OPTION_LOG_MAKER_ORDER_HEDGED, sizeof(__pyx_k_OPTION_LOG_MAKER_ORDER_HEDGED), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_NULL_ORDER_SIZE, __pyx_k_OPTION_LOG_NULL_ORDER_SIZE, sizeof(__pyx_k_OPTION_LOG_NULL_ORDER_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_REMOVING_ORDER, __pyx_k_OPTION_LOG_REMOVING_ORDER, sizeof(__pyx_k_OPTION_LOG_REMOVING_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_STATUS_REPORT, __pyx_k_OPTION_LOG_STATUS_REPORT, sizeof(__pyx_k_OPTION_LOG_STATUS_REPORT), 0, 0, 1, 1},
  {&__pyx_kp_u_OP_2, __pyx_k_OP_2, sizeof(__pyx_k_OP_2), 0, 1, 0, 0},
  {&__pyx_n_s_ORDER_ADJUST_SAMPLE_INTERVAL, __pyx_k_ORDER_ADJUST_SAMPLE_INTERVAL, sizeof(__pyx_k_ORDER_ADJUST_SAMPLE_INTERVAL), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_ADJUST_SAMPLE_WINDOW, __pyx_k_ORDER_ADJUST_SAMPLE_WINDOW, sizeof(__pyx_k_ORDER_ADJUST_SAMPLE_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_Optional, __pyx_k_Optional, sizeof(__pyx_k_Optional), 0, 0, 1, 1},
  {&__pyx_n_s_OrderIDMarketPairTracker, __pyx_k_OrderIDMarketPairTracker, sizeof(__pyx_k_OrderIDMarketPairTracker), 0, 0, 1, 1},
  {&__pyx_n_s_OrderType, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {&__pyx_kp_u_Order_book_on_taker_is_too_thin, __pyx_k_Order_book_on_taker_is_too_thin, sizeof(__pyx_k_Order_book_on_taker_is_too_thin), 0, 1, 0, 0},
  {&__pyx_kp_u_Order_size_base, __pyx_k_Order_size_base, sizeof(__pyx_k_Order_size_base), 0, 1, 0, 0},
  {&__pyx_kp_u_Order_size_in_quote, __pyx_k_Order_size_in_quote, sizeof(__pyx_k_Order_size_in_quote), 0, 1, 0, 0},
  {&__pyx_kp_u_Order_size_limit, __pyx_k_Order_size_limit, sizeof(__pyx_k_Order_size_limit), 0, 1, 0, 0},
  {&__pyx_kp_u_Order_size_taker_balance_factor, __pyx_k_Order_size_taker_balance_factor, sizeof(__pyx_k_Order_size_taker_balance_factor), 0, 1, 0, 0},
  {&__pyx_n_u_Pair, __pyx_k_Pair, sizeof(__pyx_k_Pair), 0, 1, 0, 1},
  {&__pyx_n_s_PerformanceMetrics, __pyx_k_PerformanceMetrics, sizeof(__pyx_k_PerformanceMetrics), 0, 0, 1, 1},
  {&__pyx_kp_u_Place_buy_order_on_taker_and_mak, __pyx_k_Place_buy_order_on_taker_and_mak, sizeof(__pyx_k_Place_buy_order_on_taker_and_mak), 0, 1, 0, 0},
  {&__pyx_kp_u_Place_buy_order_on_taker_and_mak_2, __pyx_k_Place_buy_order_on_taker_and_mak_2, sizeof(__pyx_k_Place_buy_order_on_taker_and_mak_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Place_buy_order_on_taker_and_mak_3, __pyx_k_Place_buy_order_on_taker_and_mak_3, sizeof(__pyx_k_Place_buy_order_on_taker_and_mak_3), 0, 1, 0, 0},
  {&__pyx_kp_u_Place_buy_order_on_taker_and_mak_4, __pyx_k_Place_buy_order_on_taker_and_mak_4, sizeof(__pyx_k_Place_buy_order_on_taker_and_mak_4), 0, 1, 0, 0},
  {&__pyx_kp_u_Place_sell_order_on_taker_and_ma, __pyx_k_Place_sell_order_on_taker_and_ma, sizeof(__pyx_k_Place_sell_order_on_taker_and_ma), 0, 1, 0, 0},
  {&__pyx_kp_u_Place_sell_order_on_taker_and_ma_2, __pyx_k_Place_sell_order_on_taker_and_ma_2, sizeof(__pyx_k_Place_sell_order_on_taker_and_ma_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Place_sell_order_on_taker_and_ma_3, __pyx_k_Place_sell_order_on_taker_and_ma_3, sizeof(__pyx_k_Place_sell_order_on_taker_and_ma_3), 0, 1, 0, 0},
  {&__pyx_kp_u_Price_for_quote_volume, __pyx_k_Price_for_quote_volume, sizeof(__pyx_k_Price_for_quote_volume), 0, 1, 0, 0},
  {&__pyx_kp_u_RA, __pyx_k_RA, sizeof(__pyx_k_RA), 0, 1, 0, 0},
  {&__pyx_n_u_Rate, __pyx_k_Rate, sizeof(__pyx_k_Rate), 0, 1, 0, 1},
  {&__pyx_n_s_RateOracle, __pyx_k_RateOracle, sizeof(__pyx_k_RateOracle), 0, 0, 1, 1},
  {&__pyx_kp_u_Rate_adjusted, __pyx_k_Rate_adjusted, sizeof(__pyx_k_Rate_adjusted), 0, 1, 0, 0},
  {&__pyx_kp_u_Rate_conversion, __pyx_k_Rate_conversion, sizeof(__pyx_k_Rate_conversion), 0, 1, 0, 0},
  {&__pyx_kp_u_Reduce_order_size_portfolio_rati, __pyx_k_Reduce_order_size_portfolio_rati, sizeof(__pyx_k_Reduce_order_size_portfolio_rati), 0, 1, 0, 0},
  {&__pyx_n_s_SHADOW_MAKER_ORDER_KEEP_ALIVE_DU, __pyx_k_SHADOW_MAKER_ORDER_KEEP_ALIVE_DU, sizeof(__pyx_k_SHADOW_MAKER_ORDER_KEEP_ALIVE_DU), 0, 0, 1, 1},
  {&__pyx_kp_u_Slippage_buffer_adjusted_order_p, __pyx_k_Slippage_buffer_adjusted_order_p, sizeof(__pyx_k_Slippage_buffer_adjusted_order_p), 0, 1, 0, 0},
  {&__pyx_n_u_Source, __pyx_k_Source, sizeof(__pyx_k_Source), 0, 1, 0, 1},
  {&__pyx_n_s_StrategyBase, __pyx_k_StrategyBase, sizeof(__pyx_k_StrategyBase), 0, 0, 1, 1},
  {&__pyx_kp_u_TT, __pyx_k_TT, sizeof(__pyx_k_TT), 0, 1, 0, 0},
  {&__pyx_kp_u_TT_2, __pyx_k_TT_2, sizeof(__pyx_k_TT_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Taker_Maker_Taker, __pyx_k_Taker_Maker_Taker, sizeof(__pyx_k_Taker_Maker_Taker), 0, 1, 0, 0},
  {&__pyx_kp_u_Taker_Quote_balance, __pyx_k_Taker_Quote_balance, sizeof(__pyx_k_Taker_Quote_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Taker_buy_order, __pyx_k_Taker_buy_order, sizeof(__pyx_k_Taker_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Taker_buy_order_2, __pyx_k_Taker_buy_order_2, sizeof(__pyx_k_Taker_buy_order_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Taker_enough_base_balance, __pyx_k_Taker_enough_base_balance, sizeof(__pyx_k_Taker_enough_base_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Taker_enough_quote_balance, __pyx_k_Taker_enough_quote_balance, sizeof(__pyx_k_Taker_enough_quote_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Taker_sell_order, __pyx_k_Taker_sell_order, sizeof(__pyx_k_Taker_sell_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Taker_sell_order_2, __pyx_k_Taker_sell_order_2, sizeof(__pyx_k_Taker_sell_order_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Taking_into_account_a_Base_rate, __pyx_k_Taking_into_account_a_Base_rate, sizeof(__pyx_k_Taking_into_account_a_Base_rate), 0, 1, 0, 0},
  {&__pyx_kp_u_Target_Balance, __pyx_k_Target_Balance, sizeof(__pyx_k_Target_Balance), 0, 1, 0, 0},
  {&__pyx_kp_u_The_current_limit_ask_order_for, __pyx_k_The_current_limit_ask_order_for, sizeof(__pyx_k_The_current_limit_ask_order_for), 0, 1, 0, 0},
  {&__pyx_kp_u_The_current_limit_bid_order_for, __pyx_k_The_current_limit_bid_order_for, sizeof(__pyx_k_The_current_limit_bid_order_for), 0, 1, 0, 0},
  {&__pyx_kp_u_The_in_flight_maker_order_in_for, __pyx_k_The_in_flight_maker_order_in_for, sizeof(__pyx_k_The_in_flight_maker_order_in_for), 0, 1, 0, 0},
  {&__pyx_kp_u_Timer_passed, __pyx_k_Timer_passed, sizeof(__pyx_k_Timer_passed), 0, 1, 0, 0},
  {&__pyx_kp_u_Total_Balance, __pyx_k_Total_Balance, sizeof(__pyx_k_Total_Balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Total_Base_Balance, __pyx_k_Total_Base_Balance, sizeof(__pyx_k_Total_Base_Balance), 0, 1, 0, 0},
  {&__pyx_n_s_TradeType, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Unexpected_error, __pyx_k_Unexpected_error, sizeof(__pyx_k_Unexpected_error), 0, 1, 0, 0},
  {&__pyx_n_u_Value, __pyx_k_Value, sizeof(__pyx_k_Value), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_WARNING, __pyx_k_WARNING, sizeof(__pyx_k_WARNING), 0, 0, 1, 1},
  {&__pyx_kp_u_WARNINGS, __pyx_k_WARNINGS, sizeof(__pyx_k_WARNINGS), 0, 1, 0, 0},
  {&__pyx_kp_u_WARNING_Some_markets_are_not_con, __pyx_k_WARNING_Some_markets_are_not_con, sizeof(__pyx_k_WARNING_Some_markets_are_not_con), 0, 1, 0, 0},
  {&__pyx_kp_u_We_will_place_a_third_leg, __pyx_k_We_will_place_a_third_leg, sizeof(__pyx_k_We_will_place_a_third_leg), 0, 1, 0, 0},
  {&__pyx_n_s_ZeroDivisionError, __pyx_k_ZeroDivisionError, sizeof(__pyx_k_ZeroDivisionError), 0, 0, 1, 1},
  {&__pyx_kp_u__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0, 0},
  {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
  {&__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
  {&__pyx_kp_u__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 1, 0, 0},
  {&__pyx_kp_u__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 1, 0, 0},
  {&__pyx_kp_u__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 1, 0, 0},
  {&__pyx_kp_u__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 0},
  {&__pyx_kp_u__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 1, 0, 0},
  {&__pyx_kp_u__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 0},
  {&__pyx_kp_u__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 1, 0, 0},
  {&__pyx_kp_u_a_Quote_rate_of, __pyx_k_a_Quote_rate_of, sizeof(__pyx_k_a_Quote_rate_of), 0, 1, 0, 0},
  {&__pyx_kp_u_a_Quote_rate_of_2, __pyx_k_a_Quote_rate_of_2, sizeof(__pyx_k_a_Quote_rate_of_2), 0, 1, 0, 0},
  {&__pyx_n_s_active_limit_orders, __pyx_k_active_limit_orders, sizeof(__pyx_k_active_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_active_limit_orders_all, __pyx_k_active_limit_orders_all, sizeof(__pyx_k_active_limit_orders_all), 0, 0, 1, 1},
  {&__pyx_n_s_active_order, __pyx_k_active_order, sizeof(__pyx_k_active_order), 0, 0, 1, 1},
  {&__pyx_n_s_active_order_canceling, __pyx_k_active_order_canceling, sizeof(__pyx_k_active_order_canceling), 0, 0, 1, 1},
  {&__pyx_kp_u_actual_is, __pyx_k_actual_is, sizeof(__pyx_k_actual_is), 0, 1, 0, 0},
  {&__pyx_n_s_adjust_order_enabled, __pyx_k_adjust_order_enabled, sizeof(__pyx_k_adjust_order_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_kp_u_and_a_Taker_price_of, __pyx_k_and_a_Taker_price_of, sizeof(__pyx_k_and_a_Taker_price_of), 0, 1, 0, 0},
  {&__pyx_n_s_anti_hysteresis_duration, __pyx_k_anti_hysteresis_duration, sizeof(__pyx_k_anti_hysteresis_duration), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_u_ask, __pyx_k_ask, sizeof(__pyx_k_ask), 0, 1, 0, 1},
  {&__pyx_kp_u_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 1, 0, 0},
  {&__pyx_n_s_balance_fix_maker, __pyx_k_balance_fix_maker, sizeof(__pyx_k_balance_fix_maker), 0, 0, 1, 1},
  {&__pyx_kp_u_balance_fixes, __pyx_k_balance_fixes, sizeof(__pyx_k_balance_fixes), 0, 1, 0, 0},
  {&__pyx_n_s_balance_warning, __pyx_k_balance_warning, sizeof(__pyx_k_balance_warning), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset_amount, __pyx_k_base_asset_amount, sizeof(__pyx_k_base_asset_amount), 0, 0, 1, 1},
  {&__pyx_n_s_base_currency, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {&__pyx_n_u_bid, __pyx_k_bid, sizeof(__pyx_k_bid), 0, 1, 0, 1},
  {&__pyx_kp_u_buy_fixing_maker_order_top_bid, __pyx_k_buy_fixing_maker_order_top_bid, sizeof(__pyx_k_buy_fixing_maker_order_top_bid), 0, 1, 0, 0},
  {&__pyx_n_u_buy_maker, __pyx_k_buy_maker, sizeof(__pyx_k_buy_maker), 0, 1, 0, 1},
  {&__pyx_n_u_buy_maker_taker, __pyx_k_buy_maker_taker, sizeof(__pyx_k_buy_maker_taker), 0, 1, 0, 1},
  {&__pyx_n_u_buy_taker, __pyx_k_buy_taker, sizeof(__pyx_k_buy_taker), 0, 1, 0, 1},
  {&__pyx_n_s_cancel_order_threshold, __pyx_k_cancel_order_threshold, sizeof(__pyx_k_cancel_order_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_order_timer, __pyx_k_cancel_order_timer, sizeof(__pyx_k_cancel_order_timer), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_order_timer_seconds, __pyx_k_cancel_order_timer_seconds, sizeof(__pyx_k_cancel_order_timer_seconds), 0, 0, 1, 1},
  {&__pyx_n_s_ceil, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
  {&__pyx_n_s_client_order_id, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_kp_u_conversion_rate, __pyx_k_conversion_rate, sizeof(__pyx_k_conversion_rate), 0, 1, 0, 0},
  {&__pyx_n_s_counter, __pyx_k_counter, sizeof(__pyx_k_counter), 0, 0, 1, 1},
  {&__pyx_n_s_cross_exchange_market_pair, __pyx_k_cross_exchange_market_pair, sizeof(__pyx_k_cross_exchange_market_pair), 0, 0, 1, 1},
  {&__pyx_n_s_current_hedging_price, __pyx_k_current_hedging_price, sizeof(__pyx_k_current_hedging_price), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
  {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {&__pyx_kp_u_does_not_correspond_to_any_whit, __pyx_k_does_not_correspond_to_any_whit, sizeof(__pyx_k_does_not_correspond_to_any_whit), 0, 1, 0, 0},
  {&__pyx_kp_u_effective_hedging_price, __pyx_k_effective_hedging_price, sizeof(__pyx_k_effective_hedging_price), 0, 1, 0, 0},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_exc_info, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {&__pyx_kp_u_filled, __pyx_k_filled, sizeof(__pyx_k_filled), 0, 1, 0, 0},
  {&__pyx_n_s_filled_order_delay, __pyx_k_filled_order_delay, sizeof(__pyx_k_filled_order_delay), 0, 0, 1, 1},
  {&__pyx_n_s_filled_order_delay_seconds, __pyx_k_filled_order_delay_seconds, sizeof(__pyx_k_filled_order_delay_seconds), 0, 0, 1, 1},
  {&__pyx_n_s_fix_counter, __pyx_k_fix_counter, sizeof(__pyx_k_fix_counter), 0, 0, 1, 1},
  {&__pyx_kp_u_fix_counter_is_now_at, __pyx_k_fix_counter_is_now_at, sizeof(__pyx_k_fix_counter_is_now_at), 0, 1, 0, 0},
  {&__pyx_n_s_fix_counter_status_df, __pyx_k_fix_counter_status_df, sizeof(__pyx_k_fix_counter_status_df), 0, 0, 1, 1},
  {&__pyx_n_u_fixed, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 1, 0, 1},
  {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {&__pyx_kp_u_for, __pyx_k_for, sizeof(__pyx_k_for), 0, 1, 0, 0},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_instance, __pyx_k_get_instance, sizeof(__pyx_k_get_instance), 0, 0, 1, 1},
  {&__pyx_n_s_get_mid_price, __pyx_k_get_mid_price, sizeof(__pyx_k_get_mid_price), 0, 0, 1, 1},
  {&__pyx_n_s_get_taker_to_maker_conversion_ra, __pyx_k_get_taker_to_maker_conversion_ra, sizeof(__pyx_k_get_taker_to_maker_conversion_ra), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_has_active_taker_order, __pyx_k_has_active_taker_order, sizeof(__pyx_k_has_active_taker_order), 0, 0, 1, 1},
  {&__pyx_kp_u_has_been_completely_filled, __pyx_k_has_been_completely_filled, sizeof(__pyx_k_has_been_completely_filled), 0, 1, 0, 0},
  {&__pyx_kp_u_has_been_completely_filled_2, __pyx_k_has_been_completely_filled_2, sizeof(__pyx_k_has_been_completely_filled_2), 0, 1, 0, 0},
  {&__pyx_n_s_hb_app_notification, __pyx_k_hb_app_notification, sizeof(__pyx_k_hb_app_notification), 0, 0, 1, 1},
  {&__pyx_kp_u_hedge_order_quantity, __pyx_k_hedge_order_quantity, sizeof(__pyx_k_hedge_order_quantity), 0, 1, 0, 0},
  {&__pyx_kp_u_hedge_order_quantity_2, __pyx_k_hedge_order_quantity_2, sizeof(__pyx_k_hedge_order_quantity_2), 0, 1, 0, 0},
  {&__pyx_n_s_hummingbot_client_performance, __pyx_k_hummingbot_client_performance, sizeof(__pyx_k_hummingbot_client_performance), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_limit, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_event_events, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_network_iterator, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_rate_oracle_rate, __pyx_k_hummingbot_core_rate_oracle_rate, sizeof(__pyx_k_hummingbot_core_rate_oracle_rate), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_cross_exchan, __pyx_k_hummingbot_strategy_cross_exchan, sizeof(__pyx_k_hummingbot_strategy_cross_exchan), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_strategy_bas, __pyx_k_hummingbot_strategy_strategy_bas, sizeof(__pyx_k_hummingbot_strategy_strategy_bas), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_intersection, __pyx_k_intersection, sizeof(__pyx_k_intersection), 0, 0, 1, 1},
  {&__pyx_n_s_is_bid, __pyx_k_is_bid, sizeof(__pyx_k_is_bid), 0, 0, 1, 1},
  {&__pyx_n_s_is_buy, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {&__pyx_kp_u_is_filled, __pyx_k_is_filled, sizeof(__pyx_k_is_filled), 0, 1, 0, 0},
  {&__pyx_kp_u_is_less_than_the_minimum_order, __pyx_k_is_less_than_the_minimum_order, sizeof(__pyx_k_is_less_than_the_minimum_order), 0, 1, 0, 0},
  {&__pyx_n_s_is_nan, __pyx_k_is_nan, sizeof(__pyx_k_is_nan), 0, 0, 1, 1},
  {&__pyx_kp_u_is_no_longer_profitable_Removin, __pyx_k_is_no_longer_profitable_Removin, sizeof(__pyx_k_is_no_longer_profitable_Removin), 0, 1, 0, 0},
  {&__pyx_kp_u_is_now_below_the_suggested_orde, __pyx_k_is_now_below_the_suggested_orde, sizeof(__pyx_k_is_now_below_the_suggested_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_is_now_less_than_the_current_ac, __pyx_k_is_now_less_than_the_current_ac, sizeof(__pyx_k_is_now_less_than_the_current_ac), 0, 1, 0, 0},
  {&__pyx_kp_u_is_placed_as_last_option, __pyx_k_is_placed_as_last_option, sizeof(__pyx_k_is_placed_as_last_option), 0, 1, 0, 0},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_keep_target_balance, __pyx_k_keep_target_balance, sizeof(__pyx_k_keep_target_balance), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_limit_order_min_expiration, __pyx_k_limit_order_min_expiration, sizeof(__pyx_k_limit_order_min_expiration), 0, 0, 1, 1},
  {&__pyx_n_s_log_conversion_rates, __pyx_k_log_conversion_rates, sizeof(__pyx_k_log_conversion_rates), 0, 0, 1, 1},
  {&__pyx_n_s_log_with_clock, __pyx_k_log_with_clock, sizeof(__pyx_k_log_with_clock), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_logging_options, __pyx_k_logging_options, sizeof(__pyx_k_logging_options), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maker, __pyx_k_maker, sizeof(__pyx_k_maker), 0, 0, 1, 1},
  {&__pyx_n_s_maker_order_update, __pyx_k_maker_order_update, sizeof(__pyx_k_maker_order_update), 0, 0, 1, 1},
  {&__pyx_n_s_market, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {&__pyx_n_s_market_conversion_rate, __pyx_k_market_conversion_rate, sizeof(__pyx_k_market_conversion_rate), 0, 0, 1, 1},
  {&__pyx_n_s_market_pair, __pyx_k_market_pair, sizeof(__pyx_k_market_pair), 0, 0, 1, 1},
  {&__pyx_n_s_market_pairs, __pyx_k_market_pairs, sizeof(__pyx_k_market_pairs), 0, 0, 1, 1},
  {&__pyx_kp_u_market_pairs_must_not_be_empty, __pyx_k_market_pairs_must_not_be_empty, sizeof(__pyx_k_market_pairs_must_not_be_empty), 0, 1, 0, 0},
  {&__pyx_n_s_market_status_data_frame, __pyx_k_market_status_data_frame, sizeof(__pyx_k_market_status_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_min_order_amount, __pyx_k_min_order_amount, sizeof(__pyx_k_min_order_amount), 0, 0, 1, 1},
  {&__pyx_n_s_min_profitability, __pyx_k_min_profitability, sizeof(__pyx_k_min_profitability), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_u_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {&__pyx_n_s_network_status, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {&__pyx_n_s_network_warning, __pyx_k_network_warning, sizeof(__pyx_k_network_warning), 0, 0, 1, 1},
  {&__pyx_n_s_notify_hb_app, __pyx_k_notify_hb_app, sizeof(__pyx_k_notify_hb_app), 0, 0, 1, 1},
  {&__pyx_n_s_notify_hb_app_with_timestamp, __pyx_k_notify_hb_app_with_timestamp, sizeof(__pyx_k_notify_hb_app_with_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_kp_u_on_taker_market_to_lock_in_prof, __pyx_k_on_taker_market_to_lock_in_prof, sizeof(__pyx_k_on_taker_market_to_lock_in_prof), 0, 1, 0, 0},
  {&__pyx_n_s_oracle_status_df, __pyx_k_oracle_status_df, sizeof(__pyx_k_oracle_status_df), 0, 0, 1, 1},
  {&__pyx_n_s_order_amount, __pyx_k_order_amount, sizeof(__pyx_k_order_amount), 0, 0, 1, 1},
  {&__pyx_kp_u_order_at, __pyx_k_order_at, sizeof(__pyx_k_order_at), 0, 1, 0, 0},
  {&__pyx_n_s_order_id, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_order_id_market_pair_tracker, __pyx_k_order_id_market_pair_tracker, sizeof(__pyx_k_order_id_market_pair_tracker), 0, 0, 1, 1},
  {&__pyx_kp_u_order_size_base, __pyx_k_order_size_base, sizeof(__pyx_k_order_size_base), 0, 1, 0, 0},
  {&__pyx_n_s_order_size_maker_balance_factor, __pyx_k_order_size_maker_balance_factor, sizeof(__pyx_k_order_size_maker_balance_factor), 0, 0, 1, 1},
  {&__pyx_n_s_order_size_portfolio_ratio_limit, __pyx_k_order_size_portfolio_ratio_limit, sizeof(__pyx_k_order_size_portfolio_ratio_limit), 0, 0, 1, 1},
  {&__pyx_kp_u_order_size_quantized_hedge_amou, __pyx_k_order_size_quantized_hedge_amou, sizeof(__pyx_k_order_size_quantized_hedge_amou), 0, 1, 0, 0},
  {&__pyx_kp_u_order_size_qunatized_hedge_amou, __pyx_k_order_size_qunatized_hedge_amou, sizeof(__pyx_k_order_size_qunatized_hedge_amou), 0, 1, 0, 0},
  {&__pyx_n_s_order_size_taker_balance_factor, __pyx_k_order_size_taker_balance_factor, sizeof(__pyx_k_order_size_taker_balance_factor), 0, 0, 1, 1},
  {&__pyx_kp_u_order_size_taker_balance_factor_2, __pyx_k_order_size_taker_balance_factor_2, sizeof(__pyx_k_order_size_taker_balance_factor_2), 0, 1, 0, 0},
  {&__pyx_n_s_order_size_taker_volume_factor, __pyx_k_order_size_taker_volume_factor, sizeof(__pyx_k_order_size_taker_volume_factor), 0, 0, 1, 1},
  {&__pyx_kp_u_order_size_taker_volume_factor_m, __pyx_k_order_size_taker_volume_factor_m, sizeof(__pyx_k_order_size_taker_volume_factor_m), 0, 1, 0, 0},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_popleft, __pyx_k_popleft, sizeof(__pyx_k_popleft), 0, 0, 1, 1},
  {&__pyx_kp_u_pref_min_acutal, __pyx_k_pref_min_acutal, sizeof(__pyx_k_pref_min_acutal), 0, 1, 0, 0},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_kp_u_price_for_quote_volume, __pyx_k_price_for_quote_volume, sizeof(__pyx_k_price_for_quote_volume), 0, 1, 0, 0},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_quantity, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 0, 1, 1},
  {&__pyx_n_s_quantize_order_price, __pyx_k_quantize_order_price, sizeof(__pyx_k_quantize_order_price), 0, 0, 1, 1},
  {&__pyx_kp_u_quantized_amount_before_convert, __pyx_k_quantized_amount_before_convert, sizeof(__pyx_k_quantized_amount_before_convert), 0, 1, 0, 0},
  {&__pyx_n_s_quote_asset, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {&__pyx_n_s_quote_currency, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {&__pyx_n_s_rate, __pyx_k_rate, sizeof(__pyx_k_rate), 0, 0, 1, 1},
  {&__pyx_n_s_ready, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_restore_timer, __pyx_k_restore_timer, sizeof(__pyx_k_restore_timer), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_nan, __pyx_k_s_decimal_nan, sizeof(__pyx_k_s_decimal_nan), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_zero, __pyx_k_s_decimal_zero, sizeof(__pyx_k_s_decimal_zero), 0, 0, 1, 1},
  {&__pyx_n_s_s_logger, __pyx_k_s_logger, sizeof(__pyx_k_s_logger), 0, 0, 1, 1},
  {&__pyx_kp_u_seconds, __pyx_k_seconds, sizeof(__pyx_k_seconds), 0, 1, 0, 0},
  {&__pyx_kp_u_seconds_current_value_of_Timer, __pyx_k_seconds_current_value_of_Timer, sizeof(__pyx_k_seconds_current_value_of_Timer), 0, 1, 0, 0},
  {&__pyx_kp_s_self__events_cannot_be_converted, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_u_self__top_maker_cancel_seconds, __pyx_k_self__top_maker_cancel_seconds, sizeof(__pyx_k_self__top_maker_cancel_seconds), 0, 1, 0, 0},
  {&__pyx_kp_u_self__top_maker_cancel_timer, __pyx_k_self__top_maker_cancel_timer, sizeof(__pyx_k_self__top_maker_cancel_timer), 0, 1, 0, 0},
  {&__pyx_kp_u_sell_fixing_maker_order_top_bid, __pyx_k_sell_fixing_maker_order_top_bid, sizeof(__pyx_k_sell_fixing_maker_order_top_bid), 0, 1, 0, 0},
  {&__pyx_n_u_sell_maker, __pyx_k_sell_maker, sizeof(__pyx_k_sell_maker), 0, 1, 0, 1},
  {&__pyx_n_u_sell_maker_taker, __pyx_k_sell_maker_taker, sizeof(__pyx_k_sell_maker_taker), 0, 1, 0, 1},
  {&__pyx_kp_u_sell_order_is_placed_on_the_mak, __pyx_k_sell_order_is_placed_on_the_mak, sizeof(__pyx_k_sell_order_is_placed_on_the_mak), 0, 1, 0, 0},
  {&__pyx_n_u_sell_taker, __pyx_k_sell_taker, sizeof(__pyx_k_sell_taker), 0, 1, 0, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shadow_limit_orders, __pyx_k_shadow_limit_orders, sizeof(__pyx_k_shadow_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_slippage_buffer, __pyx_k_slippage_buffer, sizeof(__pyx_k_slippage_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_slippage_buffer_fix, __pyx_k_slippage_buffer_fix, sizeof(__pyx_k_slippage_buffer_fix), 0, 0, 1, 1},
  {&__pyx_n_s_smart_round, __pyx_k_smart_round, sizeof(__pyx_k_smart_round), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_status_report_interval, __pyx_k_status_report_interval, sizeof(__pyx_k_status_report_interval), 0, 0, 1, 1},
  {&__pyx_kp_u_suggested_order_price, __pyx_k_suggested_order_price, sizeof(__pyx_k_suggested_order_price), 0, 1, 0, 0},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_taker, __pyx_k_taker, sizeof(__pyx_k_taker), 0, 0, 1, 1},
  {&__pyx_kp_u_taker_balance_in_quote, __pyx_k_taker_balance_in_quote, sizeof(__pyx_k_taker_balance_in_quote), 0, 1, 0, 0},
  {&__pyx_n_s_taker_to_maker_base_conversion_r, __pyx_k_taker_to_maker_base_conversion_r, sizeof(__pyx_k_taker_to_maker_base_conversion_r), 0, 0, 1, 1},
  {&__pyx_n_s_taker_to_maker_quote_conversion, __pyx_k_taker_to_maker_quote_conversion, sizeof(__pyx_k_taker_to_maker_quote_conversion), 0, 0, 1, 1},
  {&__pyx_kp_u_taker_top, __pyx_k_taker_top, sizeof(__pyx_k_taker_top), 0, 1, 0, 0},
  {&__pyx_n_s_target_base_balance, __pyx_k_target_base_balance, sizeof(__pyx_k_target_base_balance), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_third_market, __pyx_k_third_market, sizeof(__pyx_k_third_market), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_u_timer_over_cancelled_all, __pyx_k_timer_over_cancelled_all, sizeof(__pyx_k_timer_over_cancelled_all), 0, 1, 0, 0},
  {&__pyx_kp_u_to_buy, __pyx_k_to_buy, sizeof(__pyx_k_to_buy), 0, 1, 0, 0},
  {&__pyx_n_s_to_pandas, __pyx_k_to_pandas, sizeof(__pyx_k_to_pandas), 0, 0, 1, 1},
  {&__pyx_kp_u_to_sell, __pyx_k_to_sell, sizeof(__pyx_k_to_sell), 0, 1, 0, 0},
  {&__pyx_kp_u_to_sell_2, __pyx_k_to_sell_2, sizeof(__pyx_k_to_sell_2), 0, 1, 0, 0},
  {&__pyx_kp_u_too_many_orders_cancelled_all, __pyx_k_too_many_orders_cancelled_all, sizeof(__pyx_k_too_many_orders_cancelled_all), 0, 1, 0, 0},
  {&__pyx_kp_u_top_ask, __pyx_k_top_ask, sizeof(__pyx_k_top_ask), 0, 1, 0, 0},
  {&__pyx_n_s_top_depth_tolerance, __pyx_k_top_depth_tolerance, sizeof(__pyx_k_top_depth_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_top_depth_tolerance_taker, __pyx_k_top_depth_tolerance_taker, sizeof(__pyx_k_top_depth_tolerance_taker), 0, 0, 1, 1},
  {&__pyx_n_s_top_maker_cancel_seconds, __pyx_k_top_maker_cancel_seconds, sizeof(__pyx_k_top_maker_cancel_seconds), 0, 0, 1, 1},
  {&__pyx_n_s_top_maker_cancel_timer, __pyx_k_top_maker_cancel_timer, sizeof(__pyx_k_top_maker_cancel_timer), 0, 0, 1, 1},
  {&__pyx_n_s_trade_type, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_triangular_arbitrage, __pyx_k_triangular_arbitrage, sizeof(__pyx_k_triangular_arbitrage), 0, 0, 1, 1},
  {&__pyx_n_s_triangular_switch, __pyx_k_triangular_switch, sizeof(__pyx_k_triangular_switch), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_use_oracle_conversion_rate, __pyx_k_use_oracle_conversion_rate, sizeof(__pyx_k_use_oracle_conversion_rate), 0, 0, 1, 1},
  {&__pyx_kp_u_user_order, __pyx_k_user_order, sizeof(__pyx_k_user_order), 0, 1, 0, 0},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_waiting_time, __pyx_k_waiting_time, sizeof(__pyx_k_waiting_time), 0, 0, 1, 1},
  {&__pyx_n_s_wallet_balance_data_frame, __pyx_k_wallet_balance_data_frame, sizeof(__pyx_k_wallet_balance_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_kp_u_will_place_a_Maker_sell_order, __pyx_k_will_place_a_Maker_sell_order, sizeof(__pyx_k_will_place_a_Maker_sell_order), 0, 1, 0, 0},
  {&__pyx_kp_u_will_place_a_maker_buy_order, __pyx_k_will_place_a_maker_buy_order, sizeof(__pyx_k_will_place_a_maker_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_will_place_a_taker_buy_order, __pyx_k_will_place_a_taker_buy_order, sizeof(__pyx_k_will_place_a_taker_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_will_place_a_taker_sell_order, __pyx_k_will_place_a_taker_sell_order, sizeof(__pyx_k_will_place_a_taker_sell_order), 0, 1, 0, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 407, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 707, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 1087, __pyx_L1_error)
  __pyx_builtin_ZeroDivisionError = __Pyx_GetBuiltinName(__pyx_n_s_ZeroDivisionError); if (!__pyx_builtin_ZeroDivisionError) __PYX_ERR(0, 1132, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 1135, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 1649, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 2010, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 884, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":128
 *         """
 *         if len(market_pairs) < 0:
 *             raise ValueError(f"market_pairs must not be empty.")             # <<<<<<<<<<<<<<
 *         if not 0 <= order_size_taker_volume_factor <= 1:
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_market_pairs_must_not_be_empty); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":130
 *             raise ValueError(f"market_pairs must not be empty.")
 *         if not 0 <= order_size_taker_volume_factor <= 1:
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")             # <<<<<<<<<<<<<<
 *         if not 0 <= order_size_taker_balance_factor <= 1:
 *             raise ValueError(f"order_size_taker_balance_factor must be between 0 and 1.")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_order_size_taker_volume_factor_m); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":132
 *             raise ValueError(f"order_size_taker_volume_factor must be between 0 and 1.")
 *         if not 0 <= order_size_taker_balance_factor <= 1:
 *             raise ValueError(f"order_size_taker_balance_factor must be between 0 and 1.")             # <<<<<<<<<<<<<<
 * 
 *         self._market_pairs = {
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_order_size_taker_balance_factor_2); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_self__events_cannot_be_converted); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":4
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_self__events_cannot_be_converted); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":35
 * 
 * NaN = float("nan")
 * s_decimal_zero = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_nan = Decimal("nan")
 * s_logger = None
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":36
 * NaN = float("nan")
 * s_decimal_zero = Decimal(0)
 * s_decimal_nan = Decimal("nan")             # <<<<<<<<<<<<<<
 * s_logger = None
 * 
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_n_u_nan); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":67
 *                     third_market: [MarketTradingPairTuple],
 *                     min_profitability: Decimal,
 *                     order_amount: Optional[Decimal] = Decimal("0.0"),             # <<<<<<<<<<<<<<
 *                     order_size_taker_volume_factor: Decimal = Decimal("1"),
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_0_0); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":68
 *                     min_profitability: Decimal,
 *                     order_amount: Optional[Decimal] = Decimal("0.0"),
 *                     order_size_taker_volume_factor: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_maker_balance_factor: Decimal = Decimal("0.925"),
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_1); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":69
 *                     order_amount: Optional[Decimal] = Decimal("0.0"),
 *                     order_size_taker_volume_factor: Decimal = Decimal("1"),
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),             # <<<<<<<<<<<<<<
 *                     order_size_maker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_portfolio_ratio_limit: Decimal = Decimal("0.1667"),
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_0_925); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":71
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_maker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_portfolio_ratio_limit: Decimal = Decimal("0.1667"),             # <<<<<<<<<<<<<<
 *                     limit_order_min_expiration: float = 130.0,
 *                     adjust_order_enabled: bool = True,
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_0_1667); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":80
 *                     triangular_arbitrage: bool = False,
 *                     triangular_switch: bool = True,
 *                     cancel_order_threshold: Decimal = Decimal("0.05"),             # <<<<<<<<<<<<<<
 *                     top_depth_tolerance: Decimal = Decimal(0),
 *                     top_depth_tolerance_taker: Decimal = Decimal(0),
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_0_05); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_60_0 = PyFloat_FromDouble(60.0); if (unlikely(!__pyx_float_60_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9223372036854775807 = PyInt_FromString((char *)"9223372036854775807", 0, 0); if (unlikely(!__pyx_int_9223372036854775807)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.strategy.strategy_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.strategy.strategy_base", "StrategyBase", sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase = (struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy = &__pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.__pyx_base.c_start = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_start;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.__pyx_base.c_tick = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_tick;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.c_did_create_buy_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_create_buy_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.c_did_create_sell_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_create_sell_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.c_did_fill_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_fill_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.c_did_complete_buy_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_complete_buy_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.c_did_complete_sell_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_did_complete_sell_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.c_cancel_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.c_stop_tracking_limit_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_stop_tracking_limit_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.__pyx_base.c_stop_tracking_market_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_stop_tracking_market_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_process_market_pair = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_process_market_pair;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_check_and_hedge_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_and_hedge_orders;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_get_order_size_after_portfolio_ratio_limit = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_order_size_after_portfolio_ratio_limit;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_get_adjusted_limit_order_size = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_adjusted_limit_order_size;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_get_market_making_size = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_market_making_size;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_get_market_making_price = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_market_making_price;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_calculate_effective_hedging_price = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_calculate_effective_hedging_price;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_check_if_still_profitable = (int (*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_still_profitable;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_check_if_sufficient_balance = (int (*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_sufficient_balance;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_check_if_price_has_drifted = (int (*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_if_price_has_drifted;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_get_top_bid_ask = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_top_bid_ask;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_get_top_bid_ask_from_price_samples = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_top_bid_ask_from_price_samples;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_get_suggested_price_samples = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_get_suggested_price_samples;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_take_suggested_price_sample = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_take_suggested_price_sample;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_balance_fix_fix = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_balance_fix_fix;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_check_and_create_new_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int, int))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_and_create_new_orders;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_cancel_all_maker_limit_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_all_maker_limit_orders;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_place_top_maker = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_top_maker;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_cancel_all_taker_limit_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_cancel_all_taker_limit_orders;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_balance_fix_check = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_balance_fix_check;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_check_available_balance = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_check_available_balance;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_place_fixing_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_fixing_order;
  __pyx_vtable_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.c_place_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy *, PyObject *, int, PyObject *, int, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_33CrossExchangeMarketMakingStrategy_c_place_order;
  __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase;
  if (PyType_Ready(&__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.tp_dictoffset && __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CrossExchangeMarketMakingStrateg_2, (PyObject *)&__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  if (__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, __pyx_base.__pyx_base.__pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy = &__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy;
  if (PyType_Ready(&__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples) < 0) __PYX_ERR(0, 1635, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples.tp_dictoffset && __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples = &__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct__c_get_top_bid_ask_from_price_samples;
  if (PyType_Ready(&__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 1648, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr = &__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 1653, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr.tp_dictoffset && __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr = &__pyx_type_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making___pyx_scope_struct_2_genexpr;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.limit_order"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.limit_order", "LimitOrder", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder) __PYX_ERR(3, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder)) __PYX_ERR(3, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_listener"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_listener", "EventListener", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener) __PYX_ERR(4, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.pubsub"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_6pubsub_PubSub = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.pubsub", "PubSub", sizeof(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_6pubsub_PubSub) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_6pubsub_PubSub->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book_query_result"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "OrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult) __PYX_ERR(6, 3, __pyx_L1_error)
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "ClientOrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult) __PYX_ERR(6, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book", "OrderBook", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook) __PYX_ERR(8, 12, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook)) __PYX_ERR(8, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.clock"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5clock_Clock = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.clock", "Clock", sizeof(struct __pyx_obj_10hummingbot_4core_5clock_Clock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5clock_Clock) __PYX_ERR(9, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.time_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.time_iterator", "TimeIterator", sizeof(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator) __PYX_ERR(10, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator = (struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator)) __PYX_ERR(10, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.strategy.order_tracker"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker = __Pyx_ImportType(__pyx_t_1, "hummingbot.strategy.order_tracker", "OrderTracker", sizeof(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker) __PYX_ERR(11, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker = (struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.strategy.cross_exchange_market_making.order_id_market_pair_tracker"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker = __Pyx_ImportType(__pyx_t_1, "hummingbot.strategy.cross_exchange_market_making.order_id_market_pair_tracker", "OrderIDMarketPairTracker", sizeof(struct __pyx_obj_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker) __PYX_ERR(12, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker = (struct __pyx_vtabstruct_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_8strategy_28cross_exchange_market_making_28order_id_market_pair_tracker_OrderIDMarketPairTracker)) __PYX_ERR(12, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_reporter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_reporter", "EventReporter", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter) __PYX_ERR(13, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter)) __PYX_ERR(13, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_logger"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_logger", "EventLogger", sizeof(struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger) __PYX_ERR(14, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger = (struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger)) __PYX_ERR(14, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.network_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.network_iterator", "NetworkIterator", sizeof(struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator) __PYX_ERR(15, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator = (struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator)) __PYX_ERR(15, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.connector_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.connector_base", "ConnectorBase", sizeof(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase) __PYX_ERR(16, 5, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase = (struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase)) __PYX_ERR(16, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(17, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange_base", "ExchangeBase", sizeof(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase) __PYX_ERR(17, 10, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase = (struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase)) __PYX_ERR(17, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcross_exchange_market_making(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcross_exchange_market_making(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cross_exchange_market_making(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cross_exchange_market_making(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cross_exchange_market_making(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cross_exchange_market_making' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cross_exchange_market_making(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cross_exchange_market_making", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hummingbot__strategy__cross_exchange_market_making__cross_exchange_market_making) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making")) {
      if (unlikely(PyDict_SetItemString(modules, "hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":2
 * from collections import (
 *     defaultdict,             # <<<<<<<<<<<<<<
 *     deque
 * )
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_defaultdict);
  __Pyx_GIVEREF(__pyx_n_s_defaultdict);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_defaultdict);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_deque);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1
 * from collections import (             # <<<<<<<<<<<<<<
 *     defaultdict,
 *     deque
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_defaultdict, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":5
 *     deque
 * )
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * import logging
 * from math import (
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Decimal);
  __Pyx_GIVEREF(__pyx_n_s_Decimal);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Decimal);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":6
 * )
 * from decimal import Decimal
 * import logging             # <<<<<<<<<<<<<<
 * from math import (
 *     floor,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":8
 * import logging
 * from math import (
 *     floor,             # <<<<<<<<<<<<<<
 *     ceil
 * )
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_floor);
  __Pyx_GIVEREF(__pyx_n_s_floor);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_floor);
  __Pyx_INCREF(__pyx_n_s_ceil);
  __Pyx_GIVEREF(__pyx_n_s_ceil);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ceil);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":7
 * from decimal import Decimal
 * import logging
 * from math import (             # <<<<<<<<<<<<<<
 *     floor,
 *     ceil
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_floor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_floor, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ceil); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ceil, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":11
 *     ceil
 * )
 * from numpy import isnan             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from typing import (
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_isnan);
  __Pyx_GIVEREF(__pyx_n_s_isnan);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_isnan);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_isnan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isnan, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":12
 * )
 * from numpy import isnan
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from typing import (
 *     List,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pandas, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":14
 * import pandas as pd
 * from typing import (
 *     List,             # <<<<<<<<<<<<<<
 *     Tuple,
 *     Optional
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Tuple);
  __Pyx_INCREF(__pyx_n_s_Optional);
  __Pyx_GIVEREF(__pyx_n_s_Optional);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_Optional);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":13
 * from numpy import isnan
 * import pandas as pd
 * from typing import (             # <<<<<<<<<<<<<<
 *     List,
 *     Tuple,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Optional); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Optional, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":19
 * )
 * from hummingbot.core.clock cimport Clock
 * from hummingbot.core.event.events import TradeType             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.limit_order cimport LimitOrder
 * from hummingbot.core.data_type.limit_order import LimitOrder
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_TradeType);
  __Pyx_GIVEREF(__pyx_n_s_TradeType);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_TradeType);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeType, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":21
 * from hummingbot.core.event.events import TradeType
 * from hummingbot.core.data_type.limit_order cimport LimitOrder
 * from hummingbot.core.data_type.limit_order import LimitOrder             # <<<<<<<<<<<<<<
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.connector.exchange_base import ExchangeBase
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LimitOrder);
  __Pyx_GIVEREF(__pyx_n_s_LimitOrder);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LimitOrder);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_limit, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":22
 * from hummingbot.core.data_type.limit_order cimport LimitOrder
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.network_iterator import NetworkStatus             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NetworkStatus);
  __Pyx_GIVEREF(__pyx_n_s_NetworkStatus);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NetworkStatus);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_network_iterator, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NetworkStatus, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":23
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.connector.exchange_base import ExchangeBase             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.event.events import OrderType
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ExchangeBase);
  __Pyx_GIVEREF(__pyx_n_s_ExchangeBase);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ExchangeBase);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":25
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.event.events import OrderType             # <<<<<<<<<<<<<<
 * 
 * from hummingbot.strategy.strategy_base cimport StrategyBase
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_OrderType);
  __Pyx_GIVEREF(__pyx_n_s_OrderType);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_OrderType);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderType, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":28
 * 
 * from hummingbot.strategy.strategy_base cimport StrategyBase
 * from hummingbot.strategy.strategy_base import StrategyBase             # <<<<<<<<<<<<<<
 * from .cross_exchange_market_pair import CrossExchangeMarketPair
 * from .order_id_market_pair_tracker import OrderIDMarketPairTracker
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_StrategyBase);
  __Pyx_GIVEREF(__pyx_n_s_StrategyBase);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_StrategyBase);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_strategy_bas, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":29
 * from hummingbot.strategy.strategy_base cimport StrategyBase
 * from hummingbot.strategy.strategy_base import StrategyBase
 * from .cross_exchange_market_pair import CrossExchangeMarketPair             # <<<<<<<<<<<<<<
 * from .order_id_market_pair_tracker import OrderIDMarketPairTracker
 * from hummingbot.core.rate_oracle.rate_oracle import RateOracle
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CrossExchangeMarketPair);
  __Pyx_GIVEREF(__pyx_n_s_CrossExchangeMarketPair);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CrossExchangeMarketPair);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_cross_exchange_market_pair, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CrossExchangeMarketPair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CrossExchangeMarketPair, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":30
 * from hummingbot.strategy.strategy_base import StrategyBase
 * from .cross_exchange_market_pair import CrossExchangeMarketPair
 * from .order_id_market_pair_tracker import OrderIDMarketPairTracker             # <<<<<<<<<<<<<<
 * from hummingbot.core.rate_oracle.rate_oracle import RateOracle
 * from hummingbot.client.performance import PerformanceMetrics
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderIDMarketPairTracker);
  __Pyx_GIVEREF(__pyx_n_s_OrderIDMarketPairTracker);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderIDMarketPairTracker);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_order_id_market_pair_tracker, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":31
 * from .cross_exchange_market_pair import CrossExchangeMarketPair
 * from .order_id_market_pair_tracker import OrderIDMarketPairTracker
 * from hummingbot.core.rate_oracle.rate_oracle import RateOracle             # <<<<<<<<<<<<<<
 * from hummingbot.client.performance import PerformanceMetrics
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_RateOracle);
  __Pyx_GIVEREF(__pyx_n_s_RateOracle);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_RateOracle);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_rate_oracle_rate, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RateOracle, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":32
 * from .order_id_market_pair_tracker import OrderIDMarketPairTracker
 * from hummingbot.core.rate_oracle.rate_oracle import RateOracle
 * from hummingbot.client.performance import PerformanceMetrics             # <<<<<<<<<<<<<<
 * 
 * NaN = float("nan")
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PerformanceMetrics);
  __Pyx_GIVEREF(__pyx_n_s_PerformanceMetrics);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PerformanceMetrics);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_client_performance, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PerformanceMetrics, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":34
 * from hummingbot.client.performance import PerformanceMetrics
 * 
 * NaN = float("nan")             # <<<<<<<<<<<<<<
 * s_decimal_zero = Decimal(0)
 * s_decimal_nan = Decimal("nan")
 */
  __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_n_u_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NaN, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":35
 * 
 * NaN = float("nan")
 * s_decimal_zero = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_nan = Decimal("nan")
 * s_logger = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_zero, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":36
 * NaN = float("nan")
 * s_decimal_zero = Decimal(0)
 * s_decimal_nan = Decimal("nan")             # <<<<<<<<<<<<<<
 * s_logger = None
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_nan, __pyx_t_2) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":37
 * s_decimal_zero = Decimal(0)
 * s_decimal_nan = Decimal("nan")
 * s_logger = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_logger, Py_None) < 0) __PYX_ERR(0, 37, __pyx_L1_error)

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":41
 * 
 * cdef class CrossExchangeMarketMakingStrategy(StrategyBase):
 *     OPTION_LOG_NULL_ORDER_SIZE = 1 << 0             # <<<<<<<<<<<<<<
 *     OPTION_LOG_REMOVING_ORDER = 1 << 1
 *     OPTION_LOG_ADJUST_ORDER = 1 << 2
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_NULL_ORDER_SIZE, __pyx_int_1) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":42
 * cdef class CrossExchangeMarketMakingStrategy(StrategyBase):
 *     OPTION_LOG_NULL_ORDER_SIZE = 1 << 0
 *     OPTION_LOG_REMOVING_ORDER = 1 << 1             # <<<<<<<<<<<<<<
 *     OPTION_LOG_ADJUST_ORDER = 1 << 2
 *     OPTION_LOG_CREATE_ORDER = 1 << 3
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_REMOVING_ORDER, __pyx_int_2) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":43
 *     OPTION_LOG_NULL_ORDER_SIZE = 1 << 0
 *     OPTION_LOG_REMOVING_ORDER = 1 << 1
 *     OPTION_LOG_ADJUST_ORDER = 1 << 2             # <<<<<<<<<<<<<<
 *     OPTION_LOG_CREATE_ORDER = 1 << 3
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_ADJUST_ORDER, __pyx_int_4) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":44
 *     OPTION_LOG_REMOVING_ORDER = 1 << 1
 *     OPTION_LOG_ADJUST_ORDER = 1 << 2
 *     OPTION_LOG_CREATE_ORDER = 1 << 3             # <<<<<<<<<<<<<<
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4
 *     OPTION_LOG_STATUS_REPORT = 1 << 5
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_CREATE_ORDER, __pyx_int_8) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":45
 *     OPTION_LOG_ADJUST_ORDER = 1 << 2
 *     OPTION_LOG_CREATE_ORDER = 1 << 3
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4             # <<<<<<<<<<<<<<
 *     OPTION_LOG_STATUS_REPORT = 1 << 5
 *     OPTION_LOG_MAKER_ORDER_HEDGED = 1 << 6
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED, __pyx_int_16) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":46
 *     OPTION_LOG_CREATE_ORDER = 1 << 3
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4
 *     OPTION_LOG_STATUS_REPORT = 1 << 5             # <<<<<<<<<<<<<<
 *     OPTION_LOG_MAKER_ORDER_HEDGED = 1 << 6
 *     OPTION_LOG_ALL = 0x7fffffffffffffff
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_STATUS_REPORT, __pyx_int_32) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":47
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4
 *     OPTION_LOG_STATUS_REPORT = 1 << 5
 *     OPTION_LOG_MAKER_ORDER_HEDGED = 1 << 6             # <<<<<<<<<<<<<<
 *     OPTION_LOG_ALL = 0x7fffffffffffffff
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_MAKER_ORDER_HEDGED, __pyx_int_64) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":48
 *     OPTION_LOG_STATUS_REPORT = 1 << 5
 *     OPTION_LOG_MAKER_ORDER_HEDGED = 1 << 6
 *     OPTION_LOG_ALL = 0x7fffffffffffffff             # <<<<<<<<<<<<<<
 * 
 *     ORDER_ADJUST_SAMPLE_INTERVAL = 5
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_ALL, __pyx_int_9223372036854775807) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":50
 *     OPTION_LOG_ALL = 0x7fffffffffffffff
 * 
 *     ORDER_ADJUST_SAMPLE_INTERVAL = 5             # <<<<<<<<<<<<<<
 *     ORDER_ADJUST_SAMPLE_WINDOW = 12
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_ORDER_ADJUST_SAMPLE_INTERVAL, __pyx_int_5) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":51
 * 
 *     ORDER_ADJUST_SAMPLE_INTERVAL = 5
 *     ORDER_ADJUST_SAMPLE_WINDOW = 12             # <<<<<<<<<<<<<<
 * 
 *     SHADOW_MAKER_ORDER_KEEP_ALIVE_DURATION = 60.0 * 15
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_ORDER_ADJUST_SAMPLE_WINDOW, __pyx_int_12) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":53
 *     ORDER_ADJUST_SAMPLE_WINDOW = 12
 * 
 *     SHADOW_MAKER_ORDER_KEEP_ALIVE_DURATION = 60.0 * 15             # <<<<<<<<<<<<<<
 *     CANCEL_EXPIRY_DURATION = 60.0
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((60.0 * 15.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_SHADOW_MAKER_ORDER_KEEP_ALIVE_DU, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":54
 * 
 *     SHADOW_MAKER_ORDER_KEEP_ALIVE_DURATION = 60.0 * 15
 *     CANCEL_EXPIRY_DURATION = 60.0             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_CANCEL_EXPIRY_DURATION, __pyx_float_60_0) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":57
 * 
 *     @classmethod
 *     def logger(cls):             # <<<<<<<<<<<<<<
 *         global s_logger
 *         if s_logger is None:
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":56
 *     CANCEL_EXPIRY_DURATION = 60.0
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global s_logger
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy->tp_dict, __pyx_n_s_logger, __pyx_t_1) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy);

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":67
 *                     third_market: [MarketTradingPairTuple],
 *                     min_profitability: Decimal,
 *                     order_amount: Optional[Decimal] = Decimal("0.0"),             # <<<<<<<<<<<<<<
 *                     order_size_taker_volume_factor: Decimal = Decimal("1"),
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k_ = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":68
 *                     min_profitability: Decimal,
 *                     order_amount: Optional[Decimal] = Decimal("0.0"),
 *                     order_size_taker_volume_factor: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_maker_balance_factor: Decimal = Decimal("0.925"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__2 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":69
 *                     order_amount: Optional[Decimal] = Decimal("0.0"),
 *                     order_size_taker_volume_factor: Decimal = Decimal("1"),
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),             # <<<<<<<<<<<<<<
 *                     order_size_maker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_portfolio_ratio_limit: Decimal = Decimal("0.1667"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__3 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":70
 *                     order_size_taker_volume_factor: Decimal = Decimal("1"),
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_maker_balance_factor: Decimal = Decimal("0.925"),             # <<<<<<<<<<<<<<
 *                     order_size_portfolio_ratio_limit: Decimal = Decimal("0.1667"),
 *                     limit_order_min_expiration: float = 130.0,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__4 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":71
 *                     order_size_taker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_maker_balance_factor: Decimal = Decimal("0.925"),
 *                     order_size_portfolio_ratio_limit: Decimal = Decimal("0.1667"),             # <<<<<<<<<<<<<<
 *                     limit_order_min_expiration: float = 130.0,
 *                     adjust_order_enabled: bool = True,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__5 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":80
 *                     triangular_arbitrage: bool = False,
 *                     triangular_switch: bool = True,
 *                     cancel_order_threshold: Decimal = Decimal("0.05"),             # <<<<<<<<<<<<<<
 *                     top_depth_tolerance: Decimal = Decimal(0),
 *                     top_depth_tolerance_taker: Decimal = Decimal(0),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__6 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":81
 *                     triangular_switch: bool = True,
 *                     cancel_order_threshold: Decimal = Decimal("0.05"),
 *                     top_depth_tolerance: Decimal = Decimal(0),             # <<<<<<<<<<<<<<
 *                     top_depth_tolerance_taker: Decimal = Decimal(0),
 *                     logging_options: int = OPTION_LOG_ALL,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__7 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":82
 *                     cancel_order_threshold: Decimal = Decimal("0.05"),
 *                     top_depth_tolerance: Decimal = Decimal(0),
 *                     top_depth_tolerance_taker: Decimal = Decimal(0),             # <<<<<<<<<<<<<<
 *                     logging_options: int = OPTION_LOG_ALL,
 *                     status_report_interval: float = 900,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__8 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":83
 *                     top_depth_tolerance: Decimal = Decimal(0),
 *                     top_depth_tolerance_taker: Decimal = Decimal(0),
 *                     logging_options: int = OPTION_LOG_ALL,             # <<<<<<<<<<<<<<
 *                     status_report_interval: float = 900,
 *                     use_oracle_conversion_rate: bool = False,
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_28cross_exchange_market_making_28cross_exchange_market_making_CrossExchangeMarketMakingStrategy, __pyx_n_s_OPTION_LOG_ALL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__9 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":86
 *                     status_report_interval: float = 900,
 *                     use_oracle_conversion_rate: bool = False,
 *                     taker_to_maker_base_conversion_rate: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     taker_to_maker_quote_conversion_rate: Decimal = Decimal("1"),
 *                     slippage_buffer: Decimal = Decimal("0.05"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__10 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":87
 *                     use_oracle_conversion_rate: bool = False,
 *                     taker_to_maker_base_conversion_rate: Decimal = Decimal("1"),
 *                     taker_to_maker_quote_conversion_rate: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     slippage_buffer: Decimal = Decimal("0.05"),
 *                     min_order_amount: Decimal = Decimal,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__11 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":88
 *                     taker_to_maker_base_conversion_rate: Decimal = Decimal("1"),
 *                     taker_to_maker_quote_conversion_rate: Decimal = Decimal("1"),
 *                     slippage_buffer: Decimal = Decimal("0.05"),             # <<<<<<<<<<<<<<
 *                     min_order_amount: Decimal = Decimal,
 *                     hb_app_notification: bool = False,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__12 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":89
 *                     taker_to_maker_quote_conversion_rate: Decimal = Decimal("1"),
 *                     slippage_buffer: Decimal = Decimal("0.05"),
 *                     min_order_amount: Decimal = Decimal,             # <<<<<<<<<<<<<<
 *                     hb_app_notification: bool = False,
 *                     target_base_balance: Decimal = Decimal("1"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__13 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":91
 *                     min_order_amount: Decimal = Decimal,
 *                     hb_app_notification: bool = False,
 *                     target_base_balance: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     slippage_buffer_fix: Decimal = 3,
 *                     waiting_time: float = 1,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__14 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/cross_exchange_market_making/cross_exchange_market_making.pyx":1
 * from collections import (             # <<<<<<<<<<<<<<
 *     defaultdict,
 *     deque
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../opt/anaconda3/lib/python3.8/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hummingbot.strategy.cross_exchange_market_making.cross_exchange_market_making");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_values */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_values, d);
    else
        return PyDict_Values(d);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(b)
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(b)
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_sst_abs(size) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            if (unlikely(zerodivision_check && b == 0)) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero");
                return NULL;
            }
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
